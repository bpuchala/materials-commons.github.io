{
  "reportTitle": "materialscommons.org",
  "reportPageTitle": "Mochawesome Report Card",
  "stats": {
    "suites": 66,
    "tests": 102,
    "passes": 92,
    "pending": 10,
    "failures": 0,
    "start": "2017-08-03T17:14:35.839Z",
    "end": "2017-08-03T17:17:03.616Z",
    "duration": 147777,
    "testsRegistered": 102,
    "passPercent": 100,
    "pendingPercent": 9.8,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Feature - Dataset: ",
        "suites": [
          {
            "title": "DOI Request - ",
            "suites": [],
            "tests": [
              {
                "title": "checks DOI server status - raw",
                "fullTitle": "Feature - Dataset:  DOI Request -  checks DOI server status - raw",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "9d7cfbe5-2af4-4b24-b959-69b31636f3a9",
                "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
                "skipped": false
              },
              {
                "title": "calls function to get DOI server status",
                "fullTitle": "Feature - Dataset:  DOI Request -  calls function to get DOI server status",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "a9180143-c8cd-4630-bcfe-cf657044f0a8",
                "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
                "skipped": false
              },
              {
                "title": "creates a test DOI - raw",
                "fullTitle": "Feature - Dataset:  DOI Request -  creates a test DOI - raw",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "b9362c06-069a-4770-bea8-d254d8f88861",
                "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
                "skipped": false
              },
              {
                "title": "mints a new DOI and puts into dataset record",
                "fullTitle": "Feature - Dataset:  DOI Request -  mints a new DOI and puts into dataset record",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "48e549ee-9b90-419c-95e7-6bc14656ace8",
                "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
                "skipped": false
              }
            ],
            "pending": [
              {
                "title": "checks DOI server status - raw",
                "fullTitle": "Feature - Dataset:  DOI Request -  checks DOI server status - raw",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "9d7cfbe5-2af4-4b24-b959-69b31636f3a9",
                "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
                "skipped": false
              },
              {
                "title": "calls function to get DOI server status",
                "fullTitle": "Feature - Dataset:  DOI Request -  calls function to get DOI server status",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "a9180143-c8cd-4630-bcfe-cf657044f0a8",
                "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
                "skipped": false
              },
              {
                "title": "creates a test DOI - raw",
                "fullTitle": "Feature - Dataset:  DOI Request -  creates a test DOI - raw",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "b9362c06-069a-4770-bea8-d254d8f88861",
                "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
                "skipped": false
              },
              {
                "title": "mints a new DOI and puts into dataset record",
                "fullTitle": "Feature - Dataset:  DOI Request -  mints a new DOI and puts into dataset record",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "48e549ee-9b90-419c-95e7-6bc14656ace8",
                "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
                "skipped": false
              }
            ],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/dataset-doi-spec.js",
            "uuid": "c307aea1-cf8b-43f2-97cc-477d123d3000",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/dataset-doi-spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 4,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": true,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "uuid": "273f4995-e2b3-4a38-a03b-2dd2633e7deb",
        "fullFile": "",
        "file": "",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - dataset: ",
        "suites": [
          {
            "title": "Delete Dataset: ",
            "suites": [],
            "tests": [
              {
                "title": "deletes a dataset",
                "fullTitle": "Feature - dataset:  Delete Dataset:  deletes a dataset",
                "timedOut": false,
                "duration": 4982,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, check, dataset_list, dataset, expected_count, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context2.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            check = _context2.sent;<br>                            dataset_list = check.val;<br>                            dataset = dataset_list[<span class=\"hljs-number\">0</span>];<br>                            expected_count = dataset_list.length - <span class=\"hljs-number\">1</span>;<br>                            assert.isFalse(dataset.published);<br>                            _context2.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            results = _context2.sent;<br>                            assert.isTrue(results.val);<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            check = _context2.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "65e9de67-da8d-4a9a-a24c-436c58059bb9",
                "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
                "skipped": false
              },
              {
                "title": "does not delete a published dataset",
                "fullTitle": "Feature - dataset:  Delete Dataset:  does not delete a published dataset",
                "timedOut": false,
                "duration": 5412,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, expected_count, results, dataset, check, dataset_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            expected_count = datasetIdList.length;<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            dataset = results.val;<br>                            assert.isOk(dataset.published);<br>                            assert.isTrue(dataset.published);<br>                            assert.equal(dataset.id, datasetId);<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            dataset = results.val;<br>                            assert.isTrue(dataset.published);<br>                            assert.isFalse(!!dataset.doi);<br>                            <span class=\"hljs-comment\">// delete database fails</span><br>                            _context3.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            results = _context3.sent;<br>                            assert.isFalse(results.val);<br>                            _context3.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            check = _context3.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                            _context3.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "f5974fa3-cb3b-4ca2-8455-403af0412ab6",
                "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
                "skipped": false
              },
              {
                "title": "does not delete a dataset with an assigned DOI",
                "fullTitle": "Feature - dataset:  Delete Dataset:  does not delete a dataset with an assigned DOI",
                "timedOut": false,
                "duration": 5249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, expected_count, fakeDOI, status, results, check, dataset_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            expected_count = datasetIdList.length;<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            status = _context4.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete database fails</span><br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            results = _context4.sent;<br>                            assert.isFalse(results.val);<br>                            _context4.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            check = _context4.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                            _context4.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "00cb65dd-c9e4-4433-8bc5-c7e1803cde08",
                "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/datasets-spec.js",
            "uuid": "bc287706-d226-4af6-9ea1-bd57965812d7",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/datasets-spec.js",
            "passes": [
              {
                "title": "deletes a dataset",
                "fullTitle": "Feature - dataset:  Delete Dataset:  deletes a dataset",
                "timedOut": false,
                "duration": 4982,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, check, dataset_list, dataset, expected_count, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context2.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            check = _context2.sent;<br>                            dataset_list = check.val;<br>                            dataset = dataset_list[<span class=\"hljs-number\">0</span>];<br>                            expected_count = dataset_list.length - <span class=\"hljs-number\">1</span>;<br>                            assert.isFalse(dataset.published);<br>                            _context2.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            results = _context2.sent;<br>                            assert.isTrue(results.val);<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            check = _context2.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "65e9de67-da8d-4a9a-a24c-436c58059bb9",
                "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
                "skipped": false
              },
              {
                "title": "does not delete a published dataset",
                "fullTitle": "Feature - dataset:  Delete Dataset:  does not delete a published dataset",
                "timedOut": false,
                "duration": 5412,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, expected_count, results, dataset, check, dataset_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            expected_count = datasetIdList.length;<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            dataset = results.val;<br>                            assert.isOk(dataset.published);<br>                            assert.isTrue(dataset.published);<br>                            assert.equal(dataset.id, datasetId);<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            dataset = results.val;<br>                            assert.isTrue(dataset.published);<br>                            assert.isFalse(!!dataset.doi);<br>                            <span class=\"hljs-comment\">// delete database fails</span><br>                            _context3.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            results = _context3.sent;<br>                            assert.isFalse(results.val);<br>                            _context3.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            check = _context3.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                            _context3.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "f5974fa3-cb3b-4ca2-8455-403af0412ab6",
                "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
                "skipped": false
              },
              {
                "title": "does not delete a dataset with an assigned DOI",
                "fullTitle": "Feature - dataset:  Delete Dataset:  does not delete a dataset with an assigned DOI",
                "timedOut": false,
                "duration": 5249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, expected_count, fakeDOI, status, results, check, dataset_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            expected_count = datasetIdList.length;<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            status = _context4.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete database fails</span><br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            results = _context4.sent;<br>                            assert.isFalse(results.val);<br>                            _context4.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            check = _context4.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                            _context4.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "00cb65dd-c9e4-4433-8bc5-c7e1803cde08",
                "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 15643
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/datasets-spec.js",
        "uuid": "e0e8150a-9879-4ef4-98cb-a40b4bba8c0b",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/datasets-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - directories: ",
        "suites": [
          {
            "title": "Top level directory",
            "suites": [],
            "tests": [
              {
                "title": "fetch top level directory from project",
                "fullTitle": "Feature - directories:  Top level directory fetch top level directory from project",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project, project_id, top_directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context2.sent;<br>                            project = ret.val;<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            project_list = _context2.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            project_id = project.id;<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            top_directory = _context2.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, found_project.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "50e8f453-7678-43af-bdcc-5e0fc020f583",
                "parentUUID": "dc9e0d01-c58a-4651-b590-d5ba4ce6e760",
                "skipped": false
              },
              {
                "title": "fetch top level directory by id",
                "fullTitle": "Feature - directories:  Top level directory fetch top level directory by id",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context3.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context3.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context3.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context3.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                            directory_id = top_directory.id;<br>                            _context3.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            directory = _context3.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "d262c2b6-093e-44ad-9cf4-cec81e4bdb28",
                "parentUUID": "dc9e0d01-c58a-4651-b590-d5ba4ce6e760",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/directories-spec.js",
            "uuid": "dc9e0d01-c58a-4651-b590-d5ba4ce6e760",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/directories-spec.js",
            "passes": [
              {
                "title": "fetch top level directory from project",
                "fullTitle": "Feature - directories:  Top level directory fetch top level directory from project",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project, project_id, top_directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context2.sent;<br>                            project = ret.val;<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            project_list = _context2.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            project_id = project.id;<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            top_directory = _context2.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, found_project.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "50e8f453-7678-43af-bdcc-5e0fc020f583",
                "parentUUID": "dc9e0d01-c58a-4651-b590-d5ba4ce6e760",
                "skipped": false
              },
              {
                "title": "fetch top level directory by id",
                "fullTitle": "Feature - directories:  Top level directory fetch top level directory by id",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context3.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context3.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context3.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context3.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                            directory_id = top_directory.id;<br>                            _context3.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            directory = _context3.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "d262c2b6-093e-44ad-9cf4-cec81e4bdb28",
                "parentUUID": "dc9e0d01-c58a-4651-b590-d5ba4ce6e760",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 223
          },
          {
            "title": "Create directory",
            "suites": [],
            "tests": [
              {
                "title": "create directory path from top directory as /",
                "fullTitle": "Feature - directories:  Create directory create directory path from top directory as /",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context4.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context4.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context4.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "0d2f2d7b-53fd-49da-9f6e-71f66b48a2bb",
                "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
                "skipped": false
              },
              {
                "title": "create directory path from top directory as id",
                "fullTitle": "Feature - directories:  Create directory create directory path from top directory as id",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context5.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context5.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context5.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context5.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context5.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: top_directory.id,<br>                                path: path<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context5.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "c67fde1b-1be7-486e-bf04-b7fcf8a9fbf7",
                "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
                "skipped": false
              },
              {
                "title": "create directory path from directory as path",
                "fullTitle": "Feature - directories:  Create directory create directory path from directory as path",
                "timedOut": false,
                "duration": 240,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context6.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context6.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context6.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context6.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context6.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context6.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            from_dir = from_dir + path;<br>                            path = <span class=\"hljs-string\">\"D1/E1\"</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            result = _context6.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "c09d8580-463f-4e93-952c-2401cb46a8ca",
                "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/directories-spec.js",
            "uuid": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/directories-spec.js",
            "passes": [
              {
                "title": "create directory path from top directory as /",
                "fullTitle": "Feature - directories:  Create directory create directory path from top directory as /",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context4.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context4.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context4.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "0d2f2d7b-53fd-49da-9f6e-71f66b48a2bb",
                "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
                "skipped": false
              },
              {
                "title": "create directory path from top directory as id",
                "fullTitle": "Feature - directories:  Create directory create directory path from top directory as id",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context5.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context5.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context5.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context5.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context5.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: top_directory.id,<br>                                path: path<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context5.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "c67fde1b-1be7-486e-bf04-b7fcf8a9fbf7",
                "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
                "skipped": false
              },
              {
                "title": "create directory path from directory as path",
                "fullTitle": "Feature - directories:  Create directory create directory path from directory as path",
                "timedOut": false,
                "duration": 240,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context6.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context6.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context6.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context6.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context6.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context6.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            from_dir = from_dir + path;<br>                            path = <span class=\"hljs-string\">\"D1/E1\"</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            result = _context6.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "c09d8580-463f-4e93-952c-2401cb46a8ca",
                "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 632
          },
          {
            "title": "Get directories",
            "suites": [],
            "tests": [
              {
                "title": "Get all dirs in project and test for empty",
                "fullTitle": "Feature - directories:  Get directories Get all dirs in project and test for empty",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context7.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context7.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context7.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context7.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context7.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context7.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context7.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context7.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            _context7.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            dir_list = _context7.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">4</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            _context7.t0 = assert;<br>                            _context7.next = <span class=\"hljs-number\">36</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">0</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                            _context7.t1 = _context7.sent;<br>                            _context7.t0.isFalse.call(_context7.t0, _context7.t1);<br>                            _context7.t2 = assert;<br>                            _context7.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">1</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            _context7.t3 = _context7.sent;<br>                            _context7.t2.isFalse.call(_context7.t2, _context7.t3);<br>                            _context7.t4 = assert;<br>                            _context7.next = <span class=\"hljs-number\">46</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">2</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            _context7.t5 = _context7.sent;<br>                            _context7.t4.isFalse.call(_context7.t4, _context7.t5);<br>                            _context7.t6 = assert;<br>                            _context7.next = <span class=\"hljs-number\">51</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">3</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">51</span>:<br>                            _context7.t7 = _context7.sent;<br>                            _context7.t6.isTrue.call(_context7.t6, _context7.t7);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">53</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "680028d9-46ac-48f1-ba6e-49c29b06d26d",
                "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
                "skipped": false
              },
              {
                "title": "Subdir exists and test for empty",
                "fullTitle": "Feature - directories:  Get directories Subdir exists and test for empty",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, directory, subdir;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context8.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context8.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context8.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context8.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context8.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context8.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context8.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context8.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            directory = dir_list[<span class=\"hljs-number\">0</span>];<br>                            _context8.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.subdirExists(directory.id, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context8.sent;<br>                            subdir = result[<span class=\"hljs-number\">0</span>];<br>                            assert.equal(subdir.name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(subdir.parent, directory.id);<br>                            _context8.t0 = assert;<br>                            _context8.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            _context8.t1 = _context8.sent;<br>                            _context8.t0.isFalse.call(_context8.t0, _context8.t1);<br>                            _context8.t2 = assert;<br>                            _context8.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(subdir.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context8.t3 = _context8.sent;<br>                            _context8.t2.isTrue.call(_context8.t2, _context8.t3);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "5aac2dc1-3ebc-40ba-81a1-7bcc1a33df8b",
                "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
                "skipped": false
              },
              {
                "title": "Get sub-directories as peer_directories",
                "fullTitle": "Feature - directories:  Get directories Get sub-directories as peer_directories",
                "timedOut": false,
                "duration": 218,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path1, path2, path3, dir_args1, dir_args2, dir_args3, result, dir_list, directory, dir_with_subs, subs, expected, missing;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context9.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context9.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context9.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context9.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context9.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path1 = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            path2 = <span class=\"hljs-string\">'A1/C1'</span>;<br>                            path3 = <span class=\"hljs-string\">'A1/D1'</span>;<br>                            dir_args1 = {<br>                                from_dir: from_dir,<br>                                path: path1<br>                            };<br>                            dir_args2 = {<br>                                from_dir: from_dir,<br>                                path: path2<br>                            };<br>                            dir_args3 = {<br>                                from_dir: from_dir,<br>                                path: path3<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            _context9.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            _context9.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args3);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            result = _context9.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/D1'</span>);<br>                            directory = dir_list[<span class=\"hljs-number\">0</span>];<br>                            _context9.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.peerDirectories(directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            dir_with_subs = _context9.sent;<br>                            assert.equal(dir_with_subs.name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_with_subs.name, directory.name);<br>                            assert.equal(dir_with_subs.id, directory.id);<br>                            assert.isTrue(dir_with_subs.hasOwnProperty(<span class=\"hljs-string\">'peer_directories'</span>));<br>                            subs = dir_with_subs.peer_directories;<br>                            expected = [project_name + <span class=\"hljs-string\">\"/\"</span> + path1, project_name + <span class=\"hljs-string\">\"/\"</span> + path2, project_name + <span class=\"hljs-string\">\"/\"</span> + path3];<br>                            missing = [];<br>                            expected.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">target</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = <span class=\"hljs-literal\">false</span>;<br>                                subs.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">dir</span>) </span>{<br>                                    <span class=\"hljs-keyword\">if</span> (dir.name == target) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                });<br>                                <span class=\"hljs-keyword\">if</span> (!found) missing.push(target);<br>                            });<br>                            assert.deepEqual(missing, [], <span class=\"hljs-string\">\"Should be empty list of missing expected values\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "345d4c4e-b36c-4f42-9a85-8a730e9fe9a8",
                "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
                "skipped": false
              },
              {
                "title": "Find in project",
                "fullTitle": "Feature - directories:  Get directories Find in project",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, cross;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10$</span>(<span class=\"hljs-params\">_context10</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context10.prev = _context10.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context10.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context10.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context10.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context10.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context10.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context10.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context10.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context10.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            <span class=\"hljs-comment\">// it appears from the code that case 1 does not work!</span><br>                            <span class=\"hljs-comment\">// let dir1 = yield directories.findInProject(project_id,'','/A1/B1');</span><br>                            _context10.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.findInProject(project_id, <span class=\"hljs-string\">''</span>, dir_list[<span class=\"hljs-number\">1</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            cross = _context10.sent;<br>                            assert.isNotNull(cross);<br>                            assert.equal(cross.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(cross[<span class=\"hljs-number\">0</span>].project_id, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context10.stop();<br>                    }<br>                }<br>            }, _callee10, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "caeeaafa-f844-42d9-bf2a-0990109a45d3",
                "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/directories-spec.js",
            "uuid": "10e715ee-b8d6-48fa-86eb-346efe502754",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/directories-spec.js",
            "passes": [
              {
                "title": "Get all dirs in project and test for empty",
                "fullTitle": "Feature - directories:  Get directories Get all dirs in project and test for empty",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context7.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context7.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context7.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context7.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context7.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context7.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context7.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context7.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            _context7.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            dir_list = _context7.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">4</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            _context7.t0 = assert;<br>                            _context7.next = <span class=\"hljs-number\">36</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">0</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                            _context7.t1 = _context7.sent;<br>                            _context7.t0.isFalse.call(_context7.t0, _context7.t1);<br>                            _context7.t2 = assert;<br>                            _context7.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">1</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            _context7.t3 = _context7.sent;<br>                            _context7.t2.isFalse.call(_context7.t2, _context7.t3);<br>                            _context7.t4 = assert;<br>                            _context7.next = <span class=\"hljs-number\">46</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">2</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            _context7.t5 = _context7.sent;<br>                            _context7.t4.isFalse.call(_context7.t4, _context7.t5);<br>                            _context7.t6 = assert;<br>                            _context7.next = <span class=\"hljs-number\">51</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">3</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">51</span>:<br>                            _context7.t7 = _context7.sent;<br>                            _context7.t6.isTrue.call(_context7.t6, _context7.t7);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">53</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "680028d9-46ac-48f1-ba6e-49c29b06d26d",
                "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
                "skipped": false
              },
              {
                "title": "Subdir exists and test for empty",
                "fullTitle": "Feature - directories:  Get directories Subdir exists and test for empty",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, directory, subdir;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context8.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context8.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context8.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context8.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context8.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context8.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context8.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context8.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            directory = dir_list[<span class=\"hljs-number\">0</span>];<br>                            _context8.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.subdirExists(directory.id, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context8.sent;<br>                            subdir = result[<span class=\"hljs-number\">0</span>];<br>                            assert.equal(subdir.name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(subdir.parent, directory.id);<br>                            _context8.t0 = assert;<br>                            _context8.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            _context8.t1 = _context8.sent;<br>                            _context8.t0.isFalse.call(_context8.t0, _context8.t1);<br>                            _context8.t2 = assert;<br>                            _context8.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(subdir.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context8.t3 = _context8.sent;<br>                            _context8.t2.isTrue.call(_context8.t2, _context8.t3);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "5aac2dc1-3ebc-40ba-81a1-7bcc1a33df8b",
                "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
                "skipped": false
              },
              {
                "title": "Get sub-directories as peer_directories",
                "fullTitle": "Feature - directories:  Get directories Get sub-directories as peer_directories",
                "timedOut": false,
                "duration": 218,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path1, path2, path3, dir_args1, dir_args2, dir_args3, result, dir_list, directory, dir_with_subs, subs, expected, missing;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context9.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context9.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context9.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context9.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context9.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path1 = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            path2 = <span class=\"hljs-string\">'A1/C1'</span>;<br>                            path3 = <span class=\"hljs-string\">'A1/D1'</span>;<br>                            dir_args1 = {<br>                                from_dir: from_dir,<br>                                path: path1<br>                            };<br>                            dir_args2 = {<br>                                from_dir: from_dir,<br>                                path: path2<br>                            };<br>                            dir_args3 = {<br>                                from_dir: from_dir,<br>                                path: path3<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            _context9.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            _context9.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args3);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            result = _context9.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/D1'</span>);<br>                            directory = dir_list[<span class=\"hljs-number\">0</span>];<br>                            _context9.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.peerDirectories(directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            dir_with_subs = _context9.sent;<br>                            assert.equal(dir_with_subs.name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_with_subs.name, directory.name);<br>                            assert.equal(dir_with_subs.id, directory.id);<br>                            assert.isTrue(dir_with_subs.hasOwnProperty(<span class=\"hljs-string\">'peer_directories'</span>));<br>                            subs = dir_with_subs.peer_directories;<br>                            expected = [project_name + <span class=\"hljs-string\">\"/\"</span> + path1, project_name + <span class=\"hljs-string\">\"/\"</span> + path2, project_name + <span class=\"hljs-string\">\"/\"</span> + path3];<br>                            missing = [];<br>                            expected.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">target</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = <span class=\"hljs-literal\">false</span>;<br>                                subs.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">dir</span>) </span>{<br>                                    <span class=\"hljs-keyword\">if</span> (dir.name == target) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                });<br>                                <span class=\"hljs-keyword\">if</span> (!found) missing.push(target);<br>                            });<br>                            assert.deepEqual(missing, [], <span class=\"hljs-string\">\"Should be empty list of missing expected values\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "345d4c4e-b36c-4f42-9a85-8a730e9fe9a8",
                "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
                "skipped": false
              },
              {
                "title": "Find in project",
                "fullTitle": "Feature - directories:  Get directories Find in project",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, cross;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10$</span>(<span class=\"hljs-params\">_context10</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context10.prev = _context10.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context10.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context10.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context10.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context10.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context10.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context10.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context10.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context10.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            <span class=\"hljs-comment\">// it appears from the code that case 1 does not work!</span><br>                            <span class=\"hljs-comment\">// let dir1 = yield directories.findInProject(project_id,'','/A1/B1');</span><br>                            _context10.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.findInProject(project_id, <span class=\"hljs-string\">''</span>, dir_list[<span class=\"hljs-number\">1</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            cross = _context10.sent;<br>                            assert.isNotNull(cross);<br>                            assert.equal(cross.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(cross[<span class=\"hljs-number\">0</span>].project_id, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context10.stop();<br>                    }<br>                }<br>            }, _callee10, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "caeeaafa-f844-42d9-bf2a-0990109a45d3",
                "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 741
          },
          {
            "title": "Modify directory",
            "suites": [],
            "tests": [
              {
                "title": "Rename leaf directory",
                "fullTitle": "Feature - directories:  Modify directory Rename leaf directory",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, name, directory_id, rename_args, dir, expectedPath;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11$</span>(<span class=\"hljs-params\">_context11</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context11.prev = _context11.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context11.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context11.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context11.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context11.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context11.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context11.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context11.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context11.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            name = <span class=\"hljs-string\">'XX'</span>;<br>                            directory_id = dir_list[<span class=\"hljs-number\">0</span>].id;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: name<br>                                }<br>                            };<br>                            _context11.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            _context11.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            dir = _context11.sent;<br>                            expectedPath = project_name + <span class=\"hljs-string\">'/XX'</span>;<br>                            assert.equal(dir.path, expectedPath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context11.stop();<br>                    }<br>                }<br>            }, _callee11, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "33bb1438-b447-4755-96bc-34df1b09ab8e",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Move leaf directory",
                "fullTitle": "Feature - directories:  Modify directory Move leaf directory",
                "timedOut": false,
                "duration": 203,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path1, path2, dir_args1, dir_args2, result, dir_list, dir1_id, dir2_id, rename_args, dir3;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12$</span>(<span class=\"hljs-params\">_context12</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context12.prev = _context12.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context12.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context12.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context12.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context12.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context12.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context12.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path1 = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            path2 = <span class=\"hljs-string\">'A1/C1'</span>;<br>                            dir_args1 = {<br>                                from_dir: from_dir,<br>                                path: path1<br>                            };<br>                            dir_args2 = {<br>                                from_dir: from_dir,<br>                                path: path2<br>                            };<br>                            _context12.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            result = _context12.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            dir1_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            _context12.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context12.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/C1'</span>);<br>                            dir2_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: dir2_id<br>                                }<br>                            };<br>                            _context12.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, dir1_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            ret = _context12.sent;<br>                            dir3 = ret.val;<br>                            assert.equal(dir3.path, project_name + <span class=\"hljs-string\">'/A1/C1/B1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context12.stop();<br>                    }<br>                }<br>            }, _callee12, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "1da42a15-fec1-411f-9870-bd6862fada50",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Delete leaf directory",
                "fullTitle": "Feature - directories:  Modify directory Delete leaf directory",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, directory_id, dir;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13$</span>(<span class=\"hljs-params\">_context13</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context13.prev = _context13.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context13.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context13.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context13.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context13.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context13.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context13.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context13.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context13.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            directory_id = dir_list[<span class=\"hljs-number\">0</span>].id;<br>                            _context13.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            dir = _context13.sent;<br>                            assert.isNotNull(dir);<br>                            _context13.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            dir_list = _context13.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            _context13.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.remove(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context13.sent;<br>                            assert.isTrue(ret.val);<br>                            _context13.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            dir_list = _context13.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">40</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context13.stop();<br>                    }<br>                }<br>            }, _callee13, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "5a158fca-c056-4a5c-b615-8eda08614a59",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Rename interior directory",
                "fullTitle": "Feature - directories:  Modify directory Rename interior directory",
                "timedOut": false,
                "duration": 425,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, dir_list, newName, directory_id, rename_args, results, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14$</span>(<span class=\"hljs-params\">_context14</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context14.prev = _context14.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context14.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context14.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context14.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context14.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context14.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context14.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1/D1/E1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C2'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C3'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            _context14.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            dir_list = _context14.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">8</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">7</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C3'</span>);<br>                            newName = <span class=\"hljs-string\">'XX'</span>;<br>                            directory_id = dir_list[<span class=\"hljs-number\">2</span>].id;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: newName<br>                                }<br>                            };<br>                            path = project_name + <span class=\"hljs-string\">\"/A1/\"</span> + newName;<br>                            _context14.next = <span class=\"hljs-number\">44</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                            results = _context14.sent;<br>                            directory = results.val;<br>                            assert.equal(directory.path, path);<br>                            _context14.next = <span class=\"hljs-number\">49</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            dir_list = _context14.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">8</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">7</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C3'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">59</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context14.stop();<br>                    }<br>                }<br>            }, _callee14, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "2d6e7c92-9dbb-411e-ad80-d608f8e99de1",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Move interior directory",
                "fullTitle": "Feature - directories:  Modify directory Move interior directory",
                "timedOut": false,
                "duration": 333,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, dir_list, directoryA1_id, directoryB1_id, directoryC1_id, directoryD1_id, directoryE1_id, directoryC2_id, directory_id, rename_args, results, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15$</span>(<span class=\"hljs-params\">_context15</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context15.prev = _context15.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context15.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context15.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context15.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context15.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context15.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context15.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1/D1/E1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C2'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            _context15.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            dir_list = _context15.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">7</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            directoryA1_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            directoryB1_id = dir_list[<span class=\"hljs-number\">2</span>].id;<br>                            directoryC1_id = dir_list[<span class=\"hljs-number\">3</span>].id;<br>                            directoryD1_id = dir_list[<span class=\"hljs-number\">4</span>].id;<br>                            directoryE1_id = dir_list[<span class=\"hljs-number\">5</span>].id;<br>                            directoryC2_id = dir_list[<span class=\"hljs-number\">6</span>].id;<br>                            directory_id = dir_list[<span class=\"hljs-number\">3</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: dir_list[<span class=\"hljs-number\">6</span>].id<br>                                }<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">43</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">43</span>:<br>                            results = _context15.sent;<br>                            directory = results.val;<br>                            assert.equal(directory.path, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1'</span>);<br>                            _context15.next = <span class=\"hljs-number\">48</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">48</span>:<br>                            dir_list = _context15.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">7</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].id, directoryA1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].id, directoryB1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].id, directoryC2_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].id, directoryC1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].id, directoryD1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].id, directoryE1_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">63</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context15.stop();<br>                    }<br>                }<br>            }, _callee15, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "c7863465-8d8f-4f80-a9a5-d52097a7d475",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Can not rename top level directory",
                "fullTitle": "Feature - directories:  Modify directory Can not rename top level directory",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, name, rename_args, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16$</span>(<span class=\"hljs-params\">_context16</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context16.prev = _context16.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context16.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context16.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context16.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context16.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context16.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context16.sent;<br>                            directory_id = top_directory.id;<br>                            name = <span class=\"hljs-string\">'XX'</span>;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: name<br>                                }<br>                            };<br>                            _context16.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context16.sent;<br>                            assert(!!result.error);<br>                            _context16.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            top_directory = _context16.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context16.stop();<br>                    }<br>                }<br>            }, _callee16, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "4e93666e-e26a-4a63-b67e-e9fd4760d1de",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Can not move top level directory",
                "fullTitle": "Feature - directories:  Modify directory Can not move top level directory",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, from_dir, target_path, target_dir_args, result, dir_list, target_id, rename_args;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17$</span>(<span class=\"hljs-params\">_context17</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context17.prev = _context17.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context17.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context17.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context17.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context17.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context17.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context17.sent;<br>                            directory_id = top_directory.id;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            target_path = <span class=\"hljs-string\">'NEW/LOCATION'</span>;<br>                            target_dir_args = {<br>                                from_dir: from_dir,<br>                                path: target_path<br>                            };<br>                            _context17.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, target_dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            result = _context17.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">\"/\"</span> + target_path);<br>                            target_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: target_id<br>                                }<br>                            };<br>                            _context17.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context17.sent;<br>                            assert.isTrue(!!result.error);<br>                            _context17.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            top_directory = _context17.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context17.stop();<br>                    }<br>                }<br>            }, _callee17, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "ce98080c-8a3a-4836-b320-c1c7944abb66",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Can not delete top level directory",
                "fullTitle": "Feature - directories:  Modify directory Can not delete top level directory",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, result, project, project_id, top_directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18$</span>(<span class=\"hljs-params\">_context18</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context18.prev = _context18.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context18.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context18.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context18.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            result = _context18.sent;<br>                            project = result.val;<br>                            project_id = project.id;<br>                            _context18.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context18.sent;<br>                            _context18.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.remove(project_id, top_directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            result = _context18.sent;<br>                            assert.isTrue(!!result.error);<br>                            _context18.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            top_directory = _context18.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context18.stop();<br>                    }<br>                }<br>            }, _callee18, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a333466a-86e0-4fbf-9c7a-c14bd037e1d8",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/directories-spec.js",
            "uuid": "58030eb7-6c04-4886-b86b-7bfda8378e44",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/directories-spec.js",
            "passes": [
              {
                "title": "Rename leaf directory",
                "fullTitle": "Feature - directories:  Modify directory Rename leaf directory",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, name, directory_id, rename_args, dir, expectedPath;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11$</span>(<span class=\"hljs-params\">_context11</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context11.prev = _context11.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context11.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context11.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context11.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context11.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context11.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context11.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context11.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context11.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            name = <span class=\"hljs-string\">'XX'</span>;<br>                            directory_id = dir_list[<span class=\"hljs-number\">0</span>].id;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: name<br>                                }<br>                            };<br>                            _context11.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            _context11.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            dir = _context11.sent;<br>                            expectedPath = project_name + <span class=\"hljs-string\">'/XX'</span>;<br>                            assert.equal(dir.path, expectedPath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context11.stop();<br>                    }<br>                }<br>            }, _callee11, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "33bb1438-b447-4755-96bc-34df1b09ab8e",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Move leaf directory",
                "fullTitle": "Feature - directories:  Modify directory Move leaf directory",
                "timedOut": false,
                "duration": 203,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path1, path2, dir_args1, dir_args2, result, dir_list, dir1_id, dir2_id, rename_args, dir3;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12$</span>(<span class=\"hljs-params\">_context12</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context12.prev = _context12.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context12.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context12.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context12.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context12.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context12.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context12.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path1 = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            path2 = <span class=\"hljs-string\">'A1/C1'</span>;<br>                            dir_args1 = {<br>                                from_dir: from_dir,<br>                                path: path1<br>                            };<br>                            dir_args2 = {<br>                                from_dir: from_dir,<br>                                path: path2<br>                            };<br>                            _context12.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            result = _context12.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            dir1_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            _context12.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context12.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/C1'</span>);<br>                            dir2_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: dir2_id<br>                                }<br>                            };<br>                            _context12.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, dir1_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            ret = _context12.sent;<br>                            dir3 = ret.val;<br>                            assert.equal(dir3.path, project_name + <span class=\"hljs-string\">'/A1/C1/B1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context12.stop();<br>                    }<br>                }<br>            }, _callee12, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "1da42a15-fec1-411f-9870-bd6862fada50",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Delete leaf directory",
                "fullTitle": "Feature - directories:  Modify directory Delete leaf directory",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, directory_id, dir;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13$</span>(<span class=\"hljs-params\">_context13</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context13.prev = _context13.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context13.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context13.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context13.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context13.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context13.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context13.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context13.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context13.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            directory_id = dir_list[<span class=\"hljs-number\">0</span>].id;<br>                            _context13.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            dir = _context13.sent;<br>                            assert.isNotNull(dir);<br>                            _context13.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            dir_list = _context13.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            _context13.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.remove(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context13.sent;<br>                            assert.isTrue(ret.val);<br>                            _context13.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            dir_list = _context13.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">40</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context13.stop();<br>                    }<br>                }<br>            }, _callee13, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "5a158fca-c056-4a5c-b615-8eda08614a59",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Rename interior directory",
                "fullTitle": "Feature - directories:  Modify directory Rename interior directory",
                "timedOut": false,
                "duration": 425,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, dir_list, newName, directory_id, rename_args, results, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14$</span>(<span class=\"hljs-params\">_context14</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context14.prev = _context14.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context14.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context14.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context14.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context14.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context14.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context14.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1/D1/E1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C2'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C3'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            _context14.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            dir_list = _context14.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">8</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">7</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C3'</span>);<br>                            newName = <span class=\"hljs-string\">'XX'</span>;<br>                            directory_id = dir_list[<span class=\"hljs-number\">2</span>].id;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: newName<br>                                }<br>                            };<br>                            path = project_name + <span class=\"hljs-string\">\"/A1/\"</span> + newName;<br>                            _context14.next = <span class=\"hljs-number\">44</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                            results = _context14.sent;<br>                            directory = results.val;<br>                            assert.equal(directory.path, path);<br>                            _context14.next = <span class=\"hljs-number\">49</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            dir_list = _context14.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">8</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">7</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C3'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">59</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context14.stop();<br>                    }<br>                }<br>            }, _callee14, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "2d6e7c92-9dbb-411e-ad80-d608f8e99de1",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Move interior directory",
                "fullTitle": "Feature - directories:  Modify directory Move interior directory",
                "timedOut": false,
                "duration": 333,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, dir_list, directoryA1_id, directoryB1_id, directoryC1_id, directoryD1_id, directoryE1_id, directoryC2_id, directory_id, rename_args, results, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15$</span>(<span class=\"hljs-params\">_context15</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context15.prev = _context15.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context15.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context15.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context15.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context15.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context15.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context15.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1/D1/E1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C2'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            _context15.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            dir_list = _context15.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">7</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            directoryA1_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            directoryB1_id = dir_list[<span class=\"hljs-number\">2</span>].id;<br>                            directoryC1_id = dir_list[<span class=\"hljs-number\">3</span>].id;<br>                            directoryD1_id = dir_list[<span class=\"hljs-number\">4</span>].id;<br>                            directoryE1_id = dir_list[<span class=\"hljs-number\">5</span>].id;<br>                            directoryC2_id = dir_list[<span class=\"hljs-number\">6</span>].id;<br>                            directory_id = dir_list[<span class=\"hljs-number\">3</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: dir_list[<span class=\"hljs-number\">6</span>].id<br>                                }<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">43</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">43</span>:<br>                            results = _context15.sent;<br>                            directory = results.val;<br>                            assert.equal(directory.path, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1'</span>);<br>                            _context15.next = <span class=\"hljs-number\">48</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">48</span>:<br>                            dir_list = _context15.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">7</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].id, directoryA1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].id, directoryB1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].id, directoryC2_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].id, directoryC1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].id, directoryD1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].id, directoryE1_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">63</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context15.stop();<br>                    }<br>                }<br>            }, _callee15, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "c7863465-8d8f-4f80-a9a5-d52097a7d475",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Can not rename top level directory",
                "fullTitle": "Feature - directories:  Modify directory Can not rename top level directory",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, name, rename_args, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16$</span>(<span class=\"hljs-params\">_context16</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context16.prev = _context16.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context16.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context16.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context16.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context16.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context16.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context16.sent;<br>                            directory_id = top_directory.id;<br>                            name = <span class=\"hljs-string\">'XX'</span>;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: name<br>                                }<br>                            };<br>                            _context16.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context16.sent;<br>                            assert(!!result.error);<br>                            _context16.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            top_directory = _context16.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context16.stop();<br>                    }<br>                }<br>            }, _callee16, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "4e93666e-e26a-4a63-b67e-e9fd4760d1de",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Can not move top level directory",
                "fullTitle": "Feature - directories:  Modify directory Can not move top level directory",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, from_dir, target_path, target_dir_args, result, dir_list, target_id, rename_args;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17$</span>(<span class=\"hljs-params\">_context17</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context17.prev = _context17.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context17.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context17.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context17.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context17.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context17.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context17.sent;<br>                            directory_id = top_directory.id;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            target_path = <span class=\"hljs-string\">'NEW/LOCATION'</span>;<br>                            target_dir_args = {<br>                                from_dir: from_dir,<br>                                path: target_path<br>                            };<br>                            _context17.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, target_dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            result = _context17.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">\"/\"</span> + target_path);<br>                            target_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: target_id<br>                                }<br>                            };<br>                            _context17.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context17.sent;<br>                            assert.isTrue(!!result.error);<br>                            _context17.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            top_directory = _context17.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context17.stop();<br>                    }<br>                }<br>            }, _callee17, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "ce98080c-8a3a-4836-b320-c1c7944abb66",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              },
              {
                "title": "Can not delete top level directory",
                "fullTitle": "Feature - directories:  Modify directory Can not delete top level directory",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, result, project, project_id, top_directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18$</span>(<span class=\"hljs-params\">_context18</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context18.prev = _context18.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context18.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context18.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context18.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            result = _context18.sent;<br>                            project = result.val;<br>                            project_id = project.id;<br>                            _context18.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context18.sent;<br>                            _context18.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.remove(project_id, top_directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            result = _context18.sent;<br>                            assert.isTrue(!!result.error);<br>                            _context18.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            top_directory = _context18.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context18.stop();<br>                    }<br>                }<br>            }, _callee18, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a333466a-86e0-4fbf-9c7a-c14bd037e1d8",
                "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 8,
            "totalPasses": 8,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1546
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/directories-spec.js",
        "uuid": "5a0a2ca5-7389-423c-828c-678f6ce9e61d",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/directories-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Experiments: ",
        "suites": [
          {
            "title": "Delete Experiment - in parts: ",
            "suites": [],
            "tests": [
              {
                "title": "deletes best_measure_history",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  deletes best_measure_history",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> experiment_id, idList, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// chain from experiment_id -&gt; property_id list through:</span><br>                            <span class=\"hljs-comment\">//   experiment2sample - samples</span><br>                            <span class=\"hljs-comment\">//   sample2propertyset - propertysets</span><br>                            <span class=\"hljs-comment\">//   propertyset2property - properties</span><br>                            <span class=\"hljs-comment\">//   best_measure_history</span><br>                            <span class=\"hljs-comment\">// to get best_measure_history items by property_id</span><br>                            _context2.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'samples'</span>)).zip().eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'sample2propertyset'</span>), { index: <span class=\"hljs-string\">'sample_id'</span> }).zip().eqJoin(<span class=\"hljs-string\">'property_set_id'</span>, r.table(<span class=\"hljs-string\">'propertysets'</span>)).zip().eqJoin(<span class=\"hljs-string\">'property_set_id'</span>, r.table(<span class=\"hljs-string\">'propertyset2property'</span>), { index: <span class=\"hljs-string\">'property_set_id'</span> }).zip().eqJoin(<span class=\"hljs-string\">'property_id'</span>, r.table(<span class=\"hljs-string\">'properties'</span>)).zip().eqJoin(<span class=\"hljs-string\">'property_id'</span>, r.table(<span class=\"hljs-string\">'best_measure_history'</span>), { index: <span class=\"hljs-string\">'property_id'</span> }).zip().getField(<span class=\"hljs-string\">'property_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            idList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'best_measure_history'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList))), { index: <span class=\"hljs-string\">'property_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "ba4df9fa-bab8-47f1-ac97-fba564abd3a4",
                "parentUUID": "124a6d4e-d7fc-41a0-ae71-8b6b78208220",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-best-mearure-history-spec.js",
            "uuid": "124a6d4e-d7fc-41a0-ae71-8b6b78208220",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-best-mearure-history-spec.js",
            "passes": [
              {
                "title": "deletes best_measure_history",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  deletes best_measure_history",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> experiment_id, idList, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// chain from experiment_id -&gt; property_id list through:</span><br>                            <span class=\"hljs-comment\">//   experiment2sample - samples</span><br>                            <span class=\"hljs-comment\">//   sample2propertyset - propertysets</span><br>                            <span class=\"hljs-comment\">//   propertyset2property - properties</span><br>                            <span class=\"hljs-comment\">//   best_measure_history</span><br>                            <span class=\"hljs-comment\">// to get best_measure_history items by property_id</span><br>                            _context2.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'samples'</span>)).zip().eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'sample2propertyset'</span>), { index: <span class=\"hljs-string\">'sample_id'</span> }).zip().eqJoin(<span class=\"hljs-string\">'property_set_id'</span>, r.table(<span class=\"hljs-string\">'propertysets'</span>)).zip().eqJoin(<span class=\"hljs-string\">'property_set_id'</span>, r.table(<span class=\"hljs-string\">'propertyset2property'</span>), { index: <span class=\"hljs-string\">'property_set_id'</span> }).zip().eqJoin(<span class=\"hljs-string\">'property_id'</span>, r.table(<span class=\"hljs-string\">'properties'</span>)).zip().eqJoin(<span class=\"hljs-string\">'property_id'</span>, r.table(<span class=\"hljs-string\">'best_measure_history'</span>), { index: <span class=\"hljs-string\">'property_id'</span> }).zip().getField(<span class=\"hljs-string\">'property_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            idList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'best_measure_history'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList))), { index: <span class=\"hljs-string\">'property_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "ba4df9fa-bab8-47f1-ac97-fba564abd3a4",
                "parentUUID": "124a6d4e-d7fc-41a0-ae71-8b6b78208220",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 26
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-best-mearure-history-spec.js",
        "uuid": "e3957e3f-34df-4005-b9df-ed411f52d9f3",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-best-mearure-history-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Experiments: ",
        "suites": [
          {
            "title": "Delete Experiment - complex case: ",
            "suites": [],
            "tests": [
              {
                "title": "deletes all datasets, processes, samples, tasks, and links to files",
                "fullTitle": "Feature - Experiments:  Delete Experiment - complex case:  deletes all datasets, processes, samples, tasks, and links to files",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// test that structures exist</span><br>                            <span class=\"hljs-comment\">// experiments.delete(experiment_id, {deleteProcesses: true});</span><br>                            <span class=\"hljs-comment\">// test that structures are deleted</span><br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "473a19b0-4acc-4dd9-9e43-c33f26f59813",
                "parentUUID": "e38a4ab2-ecc2-4eea-98a3-bb0d3ad5c7a9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-complex-delete-processes-spec.js",
            "uuid": "e38a4ab2-ecc2-4eea-98a3-bb0d3ad5c7a9",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-complex-delete-processes-spec.js",
            "passes": [
              {
                "title": "deletes all datasets, processes, samples, tasks, and links to files",
                "fullTitle": "Feature - Experiments:  Delete Experiment - complex case:  deletes all datasets, processes, samples, tasks, and links to files",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// test that structures exist</span><br>                            <span class=\"hljs-comment\">// experiments.delete(experiment_id, {deleteProcesses: true});</span><br>                            <span class=\"hljs-comment\">// test that structures are deleted</span><br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "473a19b0-4acc-4dd9-9e43-c33f26f59813",
                "parentUUID": "e38a4ab2-ecc2-4eea-98a3-bb0d3ad5c7a9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-complex-delete-processes-spec.js",
        "uuid": "59a22eed-8a28-4bfe-9a97-3a5267312843",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-complex-delete-processes-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Experiments: ",
        "suites": [
          {
            "title": "Delete Experiment - complex case: ",
            "suites": [],
            "tests": [
              {
                "title": "deletes all datasets, tasks, and links to files - preserve processes, samples",
                "fullTitle": "Feature - Experiments:  Delete Experiment - complex case:  deletes all datasets, tasks, and links to files - preserve processes, samples",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// test that structures exist</span><br>                            <span class=\"hljs-comment\">// experiments.delete(experiment_id, {deleteProcesses: true});</span><br>                            <span class=\"hljs-comment\">// test that structures are deleted</span><br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "5d3e82cc-587a-44e9-a103-6adf5bfb61da",
                "parentUUID": "3e9e0eb3-7ac0-4bee-ba25-5ed4d5715cdf",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-complex-preserve-processes-spec.js",
            "uuid": "3e9e0eb3-7ac0-4bee-ba25-5ed4d5715cdf",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-complex-preserve-processes-spec.js",
            "passes": [
              {
                "title": "deletes all datasets, tasks, and links to files - preserve processes, samples",
                "fullTitle": "Feature - Experiments:  Delete Experiment - complex case:  deletes all datasets, tasks, and links to files - preserve processes, samples",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// test that structures exist</span><br>                            <span class=\"hljs-comment\">// experiments.delete(experiment_id, {deleteProcesses: true});</span><br>                            <span class=\"hljs-comment\">// test that structures are deleted</span><br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "5d3e82cc-587a-44e9-a103-6adf5bfb61da",
                "parentUUID": "3e9e0eb3-7ac0-4bee-ba25-5ed4d5715cdf",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-complex-preserve-processes-spec.js",
        "uuid": "ac4c72db-db9c-4d0d-98ea-127aa69136e6",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-complex-preserve-processes-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Experiments: ",
        "suites": [
          {
            "title": "Delete Experiment - in parts: ",
            "suites": [],
            "tests": [
              {
                "title": "deletes all datasets",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  deletes all datasets",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results, dataset_list, hasPublishedDatasets, i, dataset, _i, _dataset;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i &lt; dataset_list.length)) {<br>                                _context2.next = <span class=\"hljs-number\">21</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            _dataset = dataset_list[_i];<br>                            _context2.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(_dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            _i++;<br>                            _context2.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context2.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "24833dfe-bb08-4d66-9f22-8e0a9d4913c5",
                "parentUUID": "a95b300c-68c7-4bf4-a80d-a5337cd1b66e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-datasets-spec.js",
            "uuid": "a95b300c-68c7-4bf4-a80d-a5337cd1b66e",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-datasets-spec.js",
            "passes": [
              {
                "title": "deletes all datasets",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  deletes all datasets",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results, dataset_list, hasPublishedDatasets, i, dataset, _i, _dataset;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i &lt; dataset_list.length)) {<br>                                _context2.next = <span class=\"hljs-number\">21</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            _dataset = dataset_list[_i];<br>                            _context2.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(_dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            _i++;<br>                            _context2.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context2.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "24833dfe-bb08-4d66-9f22-8e0a9d4913c5",
                "parentUUID": "a95b300c-68c7-4bf4-a80d-a5337cd1b66e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 147
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-datasets-spec.js",
        "uuid": "73a5b92a-aa31-4d13-9f81-40d042bc4bea",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-datasets-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Experiments: ",
        "suites": [
          {
            "title": "Delete Experiment - basic parts: ",
            "suites": [],
            "tests": [
              {
                "title": "deletes experiment part: experiment-notes",
                "fullTitle": "Feature - Experiments:  Delete Experiment - basic parts:  deletes experiment part: experiment-notes",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> projectId, experimentId, idList, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-comment\">// ---- experimentnote ----</span><br>                            <span class=\"hljs-comment\">// experiment2experimentnote</span><br>                            <span class=\"hljs-comment\">// experimentnotes</span><br>                            projectId = project.id;<br>                            assert.isOk(projectId);<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimentnote'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_note_id'</span>, r.table(<span class=\"hljs-string\">'experimentnotes'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_note_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            idList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimentnotes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context2.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimentnote'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "90e01db7-3666-4af4-b588-4dacd7302a77",
                "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
                "skipped": false
              },
              {
                "title": "deletes experiment part: experiment-tasks",
                "fullTitle": "Feature - Experiments:  Delete Experiment - basic parts:  deletes experiment part: experiment-tasks",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> projectId, experimentId, idList, taskId, task, processId, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            projectId = project.id;<br>                            assert.isOk(projectId);<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            <span class=\"hljs-comment\">// get taskId and processId</span><br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_task_id'</span>, r.table(<span class=\"hljs-string\">'experimenttasks'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_task_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            idList = _context3.sent;<br>                            assert.isOk(idList);<br>                            assert.equal(idList.length, <span class=\"hljs-number\">1</span>);<br>                            taskId = idList[<span class=\"hljs-number\">0</span>];<br>                            assert.isOk(taskId);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttasks'</span>).get(taskId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            task = _context3.sent;<br>                            assert.isOk(task);<br>                            assert.isOk(task.process_id);<br>                            processId = task.process_id;<br>                            <span class=\"hljs-comment\">// experiment2experimenttask</span><br>                            <span class=\"hljs-comment\">// experimenttask2process</span><br>                            <span class=\"hljs-comment\">// experimenttasks</span><br>                            <span class=\"hljs-comment\">// processes</span><br>                            _context3.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttask2process'</span>).getAll(taskId, { index: <span class=\"hljs-string\">'experiment_task_id'</span> }).eqJoin(<span class=\"hljs-string\">'process_id'</span>, r.table(<span class=\"hljs-string\">'processes'</span>)).zip().getField(<span class=\"hljs-string\">'process_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            idList = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'processes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttask2process'</span>).getAll(taskId, { index: <span class=\"hljs-string\">'experiment_task_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_task_id'</span>, r.table(<span class=\"hljs-string\">'experimenttasks'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_task_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            idList = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttasks'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "19dbdb98-6fed-4078-8da4-5bb3c949f130",
                "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
                "skipped": false
              },
              {
                "title": "deletes links between files and experiment",
                "fullTitle": "Feature - Experiments:  Delete Experiment - basic parts:  deletes links between files and experiment",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> experimentId, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            _context4.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2datafile'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            delete_msg = _context4.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">16</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a2b114b3-8112-4aad-8341-91ca9115647a",
                "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-experiment-notes-spec.js",
            "uuid": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-experiment-notes-spec.js",
            "passes": [
              {
                "title": "deletes experiment part: experiment-notes",
                "fullTitle": "Feature - Experiments:  Delete Experiment - basic parts:  deletes experiment part: experiment-notes",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> projectId, experimentId, idList, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-comment\">// ---- experimentnote ----</span><br>                            <span class=\"hljs-comment\">// experiment2experimentnote</span><br>                            <span class=\"hljs-comment\">// experimentnotes</span><br>                            projectId = project.id;<br>                            assert.isOk(projectId);<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimentnote'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_note_id'</span>, r.table(<span class=\"hljs-string\">'experimentnotes'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_note_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            idList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimentnotes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context2.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimentnote'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "90e01db7-3666-4af4-b588-4dacd7302a77",
                "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
                "skipped": false
              },
              {
                "title": "deletes experiment part: experiment-tasks",
                "fullTitle": "Feature - Experiments:  Delete Experiment - basic parts:  deletes experiment part: experiment-tasks",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> projectId, experimentId, idList, taskId, task, processId, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            projectId = project.id;<br>                            assert.isOk(projectId);<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            <span class=\"hljs-comment\">// get taskId and processId</span><br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_task_id'</span>, r.table(<span class=\"hljs-string\">'experimenttasks'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_task_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            idList = _context3.sent;<br>                            assert.isOk(idList);<br>                            assert.equal(idList.length, <span class=\"hljs-number\">1</span>);<br>                            taskId = idList[<span class=\"hljs-number\">0</span>];<br>                            assert.isOk(taskId);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttasks'</span>).get(taskId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            task = _context3.sent;<br>                            assert.isOk(task);<br>                            assert.isOk(task.process_id);<br>                            processId = task.process_id;<br>                            <span class=\"hljs-comment\">// experiment2experimenttask</span><br>                            <span class=\"hljs-comment\">// experimenttask2process</span><br>                            <span class=\"hljs-comment\">// experimenttasks</span><br>                            <span class=\"hljs-comment\">// processes</span><br>                            _context3.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttask2process'</span>).getAll(taskId, { index: <span class=\"hljs-string\">'experiment_task_id'</span> }).eqJoin(<span class=\"hljs-string\">'process_id'</span>, r.table(<span class=\"hljs-string\">'processes'</span>)).zip().getField(<span class=\"hljs-string\">'process_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            idList = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'processes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttask2process'</span>).getAll(taskId, { index: <span class=\"hljs-string\">'experiment_task_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_task_id'</span>, r.table(<span class=\"hljs-string\">'experimenttasks'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_task_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            idList = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttasks'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "19dbdb98-6fed-4078-8da4-5bb3c949f130",
                "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
                "skipped": false
              },
              {
                "title": "deletes links between files and experiment",
                "fullTitle": "Feature - Experiments:  Delete Experiment - basic parts:  deletes links between files and experiment",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> experimentId, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            _context4.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2datafile'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            delete_msg = _context4.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">16</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a2b114b3-8112-4aad-8341-91ca9115647a",
                "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 162
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-experiment-notes-spec.js",
        "uuid": "cc84a8ea-f003-461c-a1b0-2a8bfe058a56",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-experiment-notes-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Experiments: ",
        "suites": [
          {
            "title": "Delete Experiment - in parts: ",
            "suites": [],
            "tests": [
              {
                "title": "deletes items in notes",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  deletes items in notes",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> id_list, i, _i6, _i7, entities, noteIdSet, _i8, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            id_list = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; process_list.length; i++) {<br>                                id_list.push(process_list[i].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i6 = <span class=\"hljs-number\">0</span>; _i6 &lt; sample_list.length; _i6++) {<br>                                id_list.push(sample_list[_i6].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i7 = <span class=\"hljs-number\">0</span>; _i7 &lt; file_list.length; _i7++) {<br>                                id_list.push(file_list[_i7].id);<br>                            }<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'note2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            entities = _context2.sent;<br>                            assert.equal(entities.length, notes_count);<br>                            noteIdSet = <span class=\"hljs-keyword\">new</span> _set2.default();<br>                            <span class=\"hljs-keyword\">for</span> (_i8 = <span class=\"hljs-number\">0</span>; _i8 &lt; entities.length; _i8++) {<br>                                noteIdSet = noteIdSet.add(entities[_i8].note_id);<br>                            }<br>                            assert.equal(noteIdSet.size, <span class=\"hljs-number\">1</span>);<br>                            _context2.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'note2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, notes_count);<br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'notes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(noteIdSet)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "43556f2c-2648-4deb-951c-3e79ea48a4fe",
                "parentUUID": "13e14486-efa7-45e0-b959-4c2adf3897f9",
                "skipped": false
              },
              {
                "title": "deletes items in reviews",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  deletes items in reviews",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> id_list, i, _i9, _i10, entities, reviewIdSet, _i11, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            id_list = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; process_list.length; i++) {<br>                                id_list.push(process_list[i].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i9 = <span class=\"hljs-number\">0</span>; _i9 &lt; sample_list.length; _i9++) {<br>                                id_list.push(sample_list[_i9].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i10 = <span class=\"hljs-number\">0</span>; _i10 &lt; file_list.length; _i10++) {<br>                                id_list.push(file_list[_i10].id);<br>                            }<br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'review2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            entities = _context3.sent;<br>                            assert.equal(entities.length, reviews_count);<br>                            reviewIdSet = <span class=\"hljs-keyword\">new</span> _set2.default();<br>                            <span class=\"hljs-keyword\">for</span> (_i11 = <span class=\"hljs-number\">0</span>; _i11 &lt; entities.length; _i11++) {<br>                                reviewIdSet = reviewIdSet.add(entities[_i11].review_id);<br>                            }<br>                            assert.equal(reviewIdSet.size, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'review2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, reviews_count);<br>                            _context3.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'reviews'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(reviewIdSet)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "72539676-11dd-4642-a3ef-3a385ecff7e1",
                "parentUUID": "13e14486-efa7-45e0-b959-4c2adf3897f9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-notes-and-reviews-spec.js",
            "uuid": "13e14486-efa7-45e0-b959-4c2adf3897f9",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-notes-and-reviews-spec.js",
            "passes": [
              {
                "title": "deletes items in notes",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  deletes items in notes",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> id_list, i, _i6, _i7, entities, noteIdSet, _i8, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            id_list = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; process_list.length; i++) {<br>                                id_list.push(process_list[i].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i6 = <span class=\"hljs-number\">0</span>; _i6 &lt; sample_list.length; _i6++) {<br>                                id_list.push(sample_list[_i6].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i7 = <span class=\"hljs-number\">0</span>; _i7 &lt; file_list.length; _i7++) {<br>                                id_list.push(file_list[_i7].id);<br>                            }<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'note2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            entities = _context2.sent;<br>                            assert.equal(entities.length, notes_count);<br>                            noteIdSet = <span class=\"hljs-keyword\">new</span> _set2.default();<br>                            <span class=\"hljs-keyword\">for</span> (_i8 = <span class=\"hljs-number\">0</span>; _i8 &lt; entities.length; _i8++) {<br>                                noteIdSet = noteIdSet.add(entities[_i8].note_id);<br>                            }<br>                            assert.equal(noteIdSet.size, <span class=\"hljs-number\">1</span>);<br>                            _context2.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'note2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, notes_count);<br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'notes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(noteIdSet)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "43556f2c-2648-4deb-951c-3e79ea48a4fe",
                "parentUUID": "13e14486-efa7-45e0-b959-4c2adf3897f9",
                "skipped": false
              },
              {
                "title": "deletes items in reviews",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  deletes items in reviews",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> id_list, i, _i9, _i10, entities, reviewIdSet, _i11, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            id_list = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; process_list.length; i++) {<br>                                id_list.push(process_list[i].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i9 = <span class=\"hljs-number\">0</span>; _i9 &lt; sample_list.length; _i9++) {<br>                                id_list.push(sample_list[_i9].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i10 = <span class=\"hljs-number\">0</span>; _i10 &lt; file_list.length; _i10++) {<br>                                id_list.push(file_list[_i10].id);<br>                            }<br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'review2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            entities = _context3.sent;<br>                            assert.equal(entities.length, reviews_count);<br>                            reviewIdSet = <span class=\"hljs-keyword\">new</span> _set2.default();<br>                            <span class=\"hljs-keyword\">for</span> (_i11 = <span class=\"hljs-number\">0</span>; _i11 &lt; entities.length; _i11++) {<br>                                reviewIdSet = reviewIdSet.add(entities[_i11].review_id);<br>                            }<br>                            assert.equal(reviewIdSet.size, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'review2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, reviews_count);<br>                            _context3.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'reviews'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(reviewIdSet)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "72539676-11dd-4642-a3ef-3a385ecff7e1",
                "parentUUID": "13e14486-efa7-45e0-b959-4c2adf3897f9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 124
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-notes-and-reviews-spec.js",
        "uuid": "e8795984-6644-4c9f-8a19-a0d9923d47a8",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-notes-and-reviews-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Experiments: ",
        "suites": [
          {
            "title": "Delete Experiment - in parts: ",
            "suites": [],
            "tests": [
              {
                "title": "deletes datasets and deletes all processes and samples",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  deletes datasets and deletes all processes and samples",
                "timedOut": false,
                "duration": 954,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, rv, key, results, dataset_list, hasPublishedDatasets, i, dataset, _i, _dataset, _i2, _process, simple, proc_list, sampleList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// Note: create fake sample that is not part of a process for testing</span><br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'samples'</span>).insert({ <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'fake sample'</span>, <span class=\"hljs-string\">'otype'</span>: <span class=\"hljs-string\">'sample'</span>, <span class=\"hljs-string\">'owner'</span>: <span class=\"hljs-string\">'noone'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            rv = _context2.sent;<br>                            key = rv.generated_keys[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).insert({ sample_id: key, experiment_id: experiment_id });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i &lt; dataset_list.length)) {<br>                                _context2.next = <span class=\"hljs-number\">27</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            _dataset = dataset_list[_i];<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(_dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            _i++;<br>                            _context2.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context2.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">0</span>);<br>                            _i2 = process_list.length;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i2 &gt; <span class=\"hljs-number\">0</span>)) {<br>                                _context2.next = <span class=\"hljs-number\">41</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            <span class=\"hljs-comment\">// delete leaf-nodes first!</span><br>                            _process = process_list[_i2 - <span class=\"hljs-number\">1</span>];<br>                            _context2.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, _process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            _i2--;<br>                            _context2.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            simple = <span class=\"hljs-literal\">true</span>;<br>                            _context2.next = <span class=\"hljs-number\">44</span>;<br>                            <span class=\"hljs-keyword\">return</span> experiments.getProcessesForExperiment(experiment_id, simple);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                            results = _context2.sent;<br>                            proc_list = results.val;<br>                            assert.isOk(proc_list);<br>                            assert.equal(proc_list.length, <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-comment\">// ... but, in rare cases, there my be samples in the experiment that are in no process</span><br>                            _context2.next = <span class=\"hljs-number\">50</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'samples'</span>)).zip().getField(<span class=\"hljs-string\">'sample_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">50</span>:<br>                            sampleList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">53</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'samples'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(sampleList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">53</span>:<br>                            rv = _context2.sent;<br>                            assert.equal(rv.deleted, <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-comment\">// and the sample entries for the experiment are left in experiment2sample</span><br>                            _context2.next = <span class=\"hljs-number\">57</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">57</span>:<br>                            rv = _context2.sent;<br>                            assert.equal(rv.deleted, <span class=\"hljs-number\">8</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">59</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "d6386206-edff-4f53-a85c-c9cc0700d72a",
                "parentUUID": "a92f98b9-a270-4f4a-bcb2-da82e042cc14",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-processes-spec.js",
            "uuid": "a92f98b9-a270-4f4a-bcb2-da82e042cc14",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-processes-spec.js",
            "passes": [
              {
                "title": "deletes datasets and deletes all processes and samples",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  deletes datasets and deletes all processes and samples",
                "timedOut": false,
                "duration": 954,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, rv, key, results, dataset_list, hasPublishedDatasets, i, dataset, _i, _dataset, _i2, _process, simple, proc_list, sampleList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// Note: create fake sample that is not part of a process for testing</span><br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'samples'</span>).insert({ <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'fake sample'</span>, <span class=\"hljs-string\">'otype'</span>: <span class=\"hljs-string\">'sample'</span>, <span class=\"hljs-string\">'owner'</span>: <span class=\"hljs-string\">'noone'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            rv = _context2.sent;<br>                            key = rv.generated_keys[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).insert({ sample_id: key, experiment_id: experiment_id });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i &lt; dataset_list.length)) {<br>                                _context2.next = <span class=\"hljs-number\">27</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            _dataset = dataset_list[_i];<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(_dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            _i++;<br>                            _context2.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context2.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">0</span>);<br>                            _i2 = process_list.length;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i2 &gt; <span class=\"hljs-number\">0</span>)) {<br>                                _context2.next = <span class=\"hljs-number\">41</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            <span class=\"hljs-comment\">// delete leaf-nodes first!</span><br>                            _process = process_list[_i2 - <span class=\"hljs-number\">1</span>];<br>                            _context2.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, _process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            _i2--;<br>                            _context2.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            simple = <span class=\"hljs-literal\">true</span>;<br>                            _context2.next = <span class=\"hljs-number\">44</span>;<br>                            <span class=\"hljs-keyword\">return</span> experiments.getProcessesForExperiment(experiment_id, simple);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                            results = _context2.sent;<br>                            proc_list = results.val;<br>                            assert.isOk(proc_list);<br>                            assert.equal(proc_list.length, <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-comment\">// ... but, in rare cases, there my be samples in the experiment that are in no process</span><br>                            _context2.next = <span class=\"hljs-number\">50</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'samples'</span>)).zip().getField(<span class=\"hljs-string\">'sample_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">50</span>:<br>                            sampleList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">53</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'samples'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(sampleList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">53</span>:<br>                            rv = _context2.sent;<br>                            assert.equal(rv.deleted, <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-comment\">// and the sample entries for the experiment are left in experiment2sample</span><br>                            _context2.next = <span class=\"hljs-number\">57</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">57</span>:<br>                            rv = _context2.sent;<br>                            assert.equal(rv.deleted, <span class=\"hljs-number\">8</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">59</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "d6386206-edff-4f53-a85c-c9cc0700d72a",
                "parentUUID": "a92f98b9-a270-4f4a-bcb2-da82e042cc14",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 954
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-processes-spec.js",
        "uuid": "5fd8a72d-59ef-4ac6-9c13-c9cb87d539f6",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-processes-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Experiments: ",
        "suites": [
          {
            "title": "Delete Experiment - in parts: ",
            "suites": [],
            "tests": [
              {
                "title": "checks for published dataset",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  checks for published dataset",
                "timedOut": false,
                "duration": 632,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results, dataset_list, dataset_id, hasPublishedDatasets, i, dataset, publishedDataset, _i, _dataset, unpublishedDataset, _i2, _dataset2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            dataset_id = dataset_list[<span class=\"hljs-number\">0</span>].id;<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _context2.next = <span class=\"hljs-number\">16</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(dataset_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            results = _context2.sent;<br>                            publishedDataset = results.val;<br>                            assert.isOk(publishedDataset);<br>                            assert.isTrue(publishedDataset.published);<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i = <span class=\"hljs-number\">0</span>; _i &lt; dataset_list.length; _i++) {<br>                                _dataset = dataset_list[_i];<br>                                <span class=\"hljs-keyword\">if</span> (_dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isTrue(hasPublishedDatasets);<br>                            _context2.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.unpublishDataset(dataset_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            results = _context2.sent;<br>                            unpublishedDataset = results.val;<br>                            assert.isOk(unpublishedDataset);<br>                            assert.isFalse(unpublishedDataset.published);<br>                            _context2.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i2 = <span class=\"hljs-number\">0</span>; _i2 &lt; dataset_list.length; _i2++) {<br>                                _dataset2 = dataset_list[_i2];<br>                                <span class=\"hljs-keyword\">if</span> (_dataset2.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "ad27464b-1164-4c6c-8e0c-0e6423ee9fed",
                "parentUUID": "32e3e6b5-685f-484b-8f2f-bb311f886f39",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-published-dataset-guard-spec.js",
            "uuid": "32e3e6b5-685f-484b-8f2f-bb311f886f39",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-published-dataset-guard-spec.js",
            "passes": [
              {
                "title": "checks for published dataset",
                "fullTitle": "Feature - Experiments:  Delete Experiment - in parts:  checks for published dataset",
                "timedOut": false,
                "duration": 632,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results, dataset_list, dataset_id, hasPublishedDatasets, i, dataset, publishedDataset, _i, _dataset, unpublishedDataset, _i2, _dataset2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            dataset_id = dataset_list[<span class=\"hljs-number\">0</span>].id;<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _context2.next = <span class=\"hljs-number\">16</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(dataset_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            results = _context2.sent;<br>                            publishedDataset = results.val;<br>                            assert.isOk(publishedDataset);<br>                            assert.isTrue(publishedDataset.published);<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i = <span class=\"hljs-number\">0</span>; _i &lt; dataset_list.length; _i++) {<br>                                _dataset = dataset_list[_i];<br>                                <span class=\"hljs-keyword\">if</span> (_dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isTrue(hasPublishedDatasets);<br>                            _context2.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.unpublishDataset(dataset_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            results = _context2.sent;<br>                            unpublishedDataset = results.val;<br>                            assert.isOk(unpublishedDataset);<br>                            assert.isFalse(unpublishedDataset.published);<br>                            _context2.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i2 = <span class=\"hljs-number\">0</span>; _i2 &lt; dataset_list.length; _i2++) {<br>                                _dataset2 = dataset_list[_i2];<br>                                <span class=\"hljs-keyword\">if</span> (_dataset2.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "ad27464b-1164-4c6c-8e0c-0e6423ee9fed",
                "parentUUID": "32e3e6b5-685f-484b-8f2f-bb311f886f39",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 632
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-published-dataset-guard-spec.js",
        "uuid": "8f28c5de-96bc-4588-90b0-24325ebb8eeb",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-published-dataset-guard-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Experiments: ",
        "suites": [
          {
            "title": "Delete Experiment: ",
            "suites": [],
            "tests": [
              {
                "title": "does not delete an experiment with a published dataset",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  does not delete an experiment with a published dataset",
                "timedOut": false,
                "duration": 5547,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, idList, i, datasetId, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            idList = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; datasetList.length; i++) {<br>                                idList.push(datasetList[i].id);<br>                            }<br>                            _context2.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = idList[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.published);<br>                            assert(results.val.published);<br>                            <span class=\"hljs-comment\">// delete experiment - fails</span><br>                            _context2.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context2.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "6e31e9f5-86ce-4288-8703-269ad3cc5c2e",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              },
              {
                "title": "does not delete an experiment with a dataset that has an assigned DOI",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  does not delete an experiment with a dataset that has an assigned DOI",
                "timedOut": false,
                "duration": 5198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, idList, i, datasetId, fakeDOI, status, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            idList = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; datasetList.length; i++) {<br>                                idList.push(datasetList[i].id);<br>                            }<br>                            _context3.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = idList[<span class=\"hljs-number\">0</span>];<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context3.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            status = _context3.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete experiment - fails</span><br>                            _context3.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context3.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "6fc648f6-dfd0-4bb8-8f58-74a715ec718f",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              },
              {
                "title": "deletes experiment and all its parts",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  deletes experiment and all its parts",
                "timedOut": false,
                "duration": 6619,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context4.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context4.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context4.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context4.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context4.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context4.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context4.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">true</span>, dryRun: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context4.sent;<br>                            checkResults(results);<br>                            _context4.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context4.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context4.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context4.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context4.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context4.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context4.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "27f0b131-9275-46bf-a54a-47a9839a140a",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              },
              {
                "title": "with deleteProcess false - deletes experiment, but not process, samples, etc.",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  with deleteProcess false - deletes experiment, but not process, samples, etc.",
                "timedOut": false,
                "duration": 5831,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context5.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context5.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context5.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context5.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context5.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context5.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context5.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context5.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context5.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">false</span>, dryRun: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context5.sent;<br>                            checkResultsForNotDeleteProcess(results);<br>                            _context5.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context5.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context5.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context5.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context5.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context5.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context5.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "79ead680-a34a-41b0-8e87-7d5bf0e51cd5",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              },
              {
                "title": "with dry run true, delete process true - shows all will be deleted",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  with dry run true, delete process true - shows all will be deleted",
                "timedOut": false,
                "duration": 5555,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context6.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context6.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context6.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context6.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context6.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context6.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context6.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context6.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context6.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">true</span>, dryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context6.sent;<br>                            checkResults(results);<br>                            _context6.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id, { forDryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context6.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context6.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context6.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context6.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context6.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context6.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context6.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "d3735f8c-c5f8-4e54-b798-6b52b5e96482",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              },
              {
                "title": "with dry run true, delete process false - shows some will be deleted",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  with dry run true, delete process false - shows some will be deleted",
                "timedOut": false,
                "duration": 5430,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context7.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context7.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context7.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context7.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context7.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context7.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context7.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context7.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context7.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">false</span>, dryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context7.sent;<br>                            checkResultsForNotDeleteProcess(results);<br>                            _context7.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id, { forDryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context7.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context7.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context7.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context7.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context7.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context7.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context7.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "07a6c21e-7f99-471f-80ae-2bbcc6fc5fa7",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-spec.js",
            "uuid": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-spec.js",
            "passes": [
              {
                "title": "does not delete an experiment with a published dataset",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  does not delete an experiment with a published dataset",
                "timedOut": false,
                "duration": 5547,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, idList, i, datasetId, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            idList = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; datasetList.length; i++) {<br>                                idList.push(datasetList[i].id);<br>                            }<br>                            _context2.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = idList[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.published);<br>                            assert(results.val.published);<br>                            <span class=\"hljs-comment\">// delete experiment - fails</span><br>                            _context2.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context2.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "6e31e9f5-86ce-4288-8703-269ad3cc5c2e",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              },
              {
                "title": "does not delete an experiment with a dataset that has an assigned DOI",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  does not delete an experiment with a dataset that has an assigned DOI",
                "timedOut": false,
                "duration": 5198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, idList, i, datasetId, fakeDOI, status, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            idList = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; datasetList.length; i++) {<br>                                idList.push(datasetList[i].id);<br>                            }<br>                            _context3.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = idList[<span class=\"hljs-number\">0</span>];<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context3.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            status = _context3.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete experiment - fails</span><br>                            _context3.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context3.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "6fc648f6-dfd0-4bb8-8f58-74a715ec718f",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              },
              {
                "title": "deletes experiment and all its parts",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  deletes experiment and all its parts",
                "timedOut": false,
                "duration": 6619,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context4.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context4.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context4.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context4.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context4.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context4.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context4.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">true</span>, dryRun: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context4.sent;<br>                            checkResults(results);<br>                            _context4.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context4.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context4.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context4.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context4.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context4.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context4.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "27f0b131-9275-46bf-a54a-47a9839a140a",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              },
              {
                "title": "with deleteProcess false - deletes experiment, but not process, samples, etc.",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  with deleteProcess false - deletes experiment, but not process, samples, etc.",
                "timedOut": false,
                "duration": 5831,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context5.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context5.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context5.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context5.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context5.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context5.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context5.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context5.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context5.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">false</span>, dryRun: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context5.sent;<br>                            checkResultsForNotDeleteProcess(results);<br>                            _context5.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context5.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context5.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context5.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context5.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context5.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context5.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "79ead680-a34a-41b0-8e87-7d5bf0e51cd5",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              },
              {
                "title": "with dry run true, delete process true - shows all will be deleted",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  with dry run true, delete process true - shows all will be deleted",
                "timedOut": false,
                "duration": 5555,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context6.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context6.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context6.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context6.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context6.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context6.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context6.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context6.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context6.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">true</span>, dryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context6.sent;<br>                            checkResults(results);<br>                            _context6.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id, { forDryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context6.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context6.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context6.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context6.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context6.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context6.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context6.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "d3735f8c-c5f8-4e54-b798-6b52b5e96482",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              },
              {
                "title": "with dry run true, delete process false - shows some will be deleted",
                "fullTitle": "Feature - Experiments:  Delete Experiment:  with dry run true, delete process false - shows some will be deleted",
                "timedOut": false,
                "duration": 5430,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context7.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context7.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context7.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context7.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context7.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context7.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context7.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context7.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context7.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">false</span>, dryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context7.sent;<br>                            checkResultsForNotDeleteProcess(results);<br>                            _context7.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id, { forDryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context7.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context7.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context7.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context7.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context7.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context7.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context7.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "07a6c21e-7f99-471f-80ae-2bbcc6fc5fa7",
                "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 34180
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/experiments-delete-spec.js",
        "uuid": "185ae4d6-7044-4f68-a348-783920a82554",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-delete-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Experiments: ",
        "suites": [
          {
            "title": "Function level",
            "suites": [],
            "tests": [
              {
                "title": "individual test level",
                "fullTitle": "Feature - Experiments:  Function level individual test level",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "b065fbc3-f3e6-4417-aeb7-2b8ca71bab36",
                "parentUUID": "11b90a72-ee4f-4fc7-99d1-8155cd675aeb",
                "skipped": false
              }
            ],
            "pending": [
              {
                "title": "individual test level",
                "fullTitle": "Feature - Experiments:  Function level individual test level",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "b065fbc3-f3e6-4417-aeb7-2b8ca71bab36",
                "parentUUID": "11b90a72-ee4f-4fc7-99d1-8155cd675aeb",
                "skipped": false
              }
            ],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/experiments-spec.js",
            "uuid": "11b90a72-ee4f-4fc7-99d1-8155cd675aeb",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 1,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": true,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/experiments-spec.js",
        "uuid": "8eeb135b-5554-4aeb-b806-5a8f7ed69f92",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/experiments-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Files: ",
        "suites": [
          {
            "title": "Delete",
            "suites": [],
            "tests": [
              {
                "title": "Will delete a file that has the uses id set",
                "fullTitle": "Feature - Files:  Delete Will delete a file that has the uses id set",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "87686b0c-c945-4a00-ad30-390b90cd9141",
                "parentUUID": "042222f8-f54a-4907-bab3-a269a10f82d6",
                "skipped": false
              },
              {
                "title": "Will delete a file but keep physical file when needed",
                "fullTitle": "Feature - Files:  Delete Will delete a file but keep physical file when needed",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "48e56176-b00e-4d30-9050-8c13cd75dd18",
                "parentUUID": "042222f8-f54a-4907-bab3-a269a10f82d6",
                "skipped": false
              }
            ],
            "pending": [
              {
                "title": "Will delete a file that has the uses id set",
                "fullTitle": "Feature - Files:  Delete Will delete a file that has the uses id set",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "87686b0c-c945-4a00-ad30-390b90cd9141",
                "parentUUID": "042222f8-f54a-4907-bab3-a269a10f82d6",
                "skipped": false
              },
              {
                "title": "Will delete a file but keep physical file when needed",
                "fullTitle": "Feature - Files:  Delete Will delete a file but keep physical file when needed",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "48e56176-b00e-4d30-9050-8c13cd75dd18",
                "parentUUID": "042222f8-f54a-4907-bab3-a269a10f82d6",
                "skipped": false
              }
            ],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/files-delete-spec.js",
            "uuid": "042222f8-f54a-4907-bab3-a269a10f82d6",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/files-delete-spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 2,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": true,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "uuid": "bdcf6f0e-8cfc-431f-8efe-a3daa5ff8a2b",
        "fullFile": "",
        "file": "",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Files: ",
        "suites": [
          {
            "title": "Get File Information",
            "suites": [],
            "tests": [
              {
                "title": "get by id",
                "fullTitle": "Feature - Files:  Get File Information get by id",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, fileId, fetchedFile;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">0</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context2.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            fileId = file.id;<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            fetchedFile = _context2.sent;<br>                            assert.equal(file.id, fetchedFile.id);<br>                            assert.equal(file.name, fetchedFile.name);<br>                            assert.equal(file.owner, fetchedFile.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "2aa1f5fc-9ead-4fa3-b9f2-fad6754b6573",
                "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
                "skipped": false
              },
              {
                "title": "get by checksum",
                "fullTitle": "Feature - Files:  Get File Information get by checksum",
                "timedOut": false,
                "duration": 143,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, checksum, results, fetchedFileList, target;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context3.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            checksum = file.checksum;<br>                            _context3.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getAllByChecksum(checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            fetchedFileList = [].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(results));<br>                            assert.isOk(fetchedFileList);<br>                            target = <span class=\"hljs-literal\">null</span>;<br>                            fetchedFileList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">foundFile</span>) </span>{<br>                                assert.equal(foundFile.owner, userId);<br>                                <span class=\"hljs-keyword\">if</span> (foundFile.id === file.id) {<br>                                    target = foundFile;<br>                                }<br>                            });<br>                            assert.isOk(target);<br>                            assert.equal(file.id, target.id);<br>                            assert.equal(file.name, target.name);<br>                            assert.equal(file.owner, target.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "67053660-deb5-45ce-bb72-4fbec6745faa",
                "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
                "skipped": false
              },
              {
                "title": "get by id list",
                "fullTitle": "Feature - Files:  Get File Information get by id list",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, idList, fileList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context4.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            _context4.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context4.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            idList = [file1.id, file2.id];<br>                            _context4.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getList(project.id, idList);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            fileList = _context4.sent;<br>                            assert.isOk(fileList);<br>                            assert.equal(fileList.length, <span class=\"hljs-number\">2</span>);<br>                            fileList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = idList.indexOf(file.id) &gt; -<span class=\"hljs-number\">1</span>;<br>                                assert(found, <span class=\"hljs-string\">'failed to find file '</span> + file.name + <span class=\"hljs-string\">' in query results'</span>);<br>                            });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "fc6b2f54-5abd-4b52-9578-68202139de15",
                "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
                "skipped": false
              },
              {
                "title": "get by file path in project",
                "fullTitle": "Feature - Files:  Get File Information get by file path in project",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, probe, filePath, valOrError;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">4</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context5.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            _context5.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            top_directory = _context5.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            result = _context5.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            _context5.next = <span class=\"hljs-number\">25</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                            probe = _context5.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            filePath = project.name + <span class=\"hljs-string\">\"/\"</span> + path + <span class=\"hljs-string\">\"/\"</span> + file.name;<br>                            _context5.next = <span class=\"hljs-number\">32</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.byPath(project.id, filePath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">32</span>:<br>                            valOrError = _context5.sent;<br>                            assert.isOk(valOrError);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            filePath = <span class=\"hljs-string\">\"bogas\"</span> + <span class=\"hljs-string\">\"/\"</span> + path + <span class=\"hljs-string\">\"/\"</span> + file.name;<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.byPath(project.id, filePath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            valOrError = _context5.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.error);<br>                            assert.equal(valOrError.error, <span class=\"hljs-string\">'No matching file'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "4fece870-789f-4a08-8c33-91593a762b59",
                "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/files-spec.js",
            "uuid": "b8dbce0c-a541-43ed-9b64-fd4758286841",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/files-spec.js",
            "passes": [
              {
                "title": "get by id",
                "fullTitle": "Feature - Files:  Get File Information get by id",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, fileId, fetchedFile;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">0</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context2.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            fileId = file.id;<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            fetchedFile = _context2.sent;<br>                            assert.equal(file.id, fetchedFile.id);<br>                            assert.equal(file.name, fetchedFile.name);<br>                            assert.equal(file.owner, fetchedFile.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "2aa1f5fc-9ead-4fa3-b9f2-fad6754b6573",
                "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
                "skipped": false
              },
              {
                "title": "get by checksum",
                "fullTitle": "Feature - Files:  Get File Information get by checksum",
                "timedOut": false,
                "duration": 143,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, checksum, results, fetchedFileList, target;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context3.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            checksum = file.checksum;<br>                            _context3.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getAllByChecksum(checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            fetchedFileList = [].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(results));<br>                            assert.isOk(fetchedFileList);<br>                            target = <span class=\"hljs-literal\">null</span>;<br>                            fetchedFileList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">foundFile</span>) </span>{<br>                                assert.equal(foundFile.owner, userId);<br>                                <span class=\"hljs-keyword\">if</span> (foundFile.id === file.id) {<br>                                    target = foundFile;<br>                                }<br>                            });<br>                            assert.isOk(target);<br>                            assert.equal(file.id, target.id);<br>                            assert.equal(file.name, target.name);<br>                            assert.equal(file.owner, target.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "67053660-deb5-45ce-bb72-4fbec6745faa",
                "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
                "skipped": false
              },
              {
                "title": "get by id list",
                "fullTitle": "Feature - Files:  Get File Information get by id list",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, idList, fileList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context4.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            _context4.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context4.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            idList = [file1.id, file2.id];<br>                            _context4.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getList(project.id, idList);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            fileList = _context4.sent;<br>                            assert.isOk(fileList);<br>                            assert.equal(fileList.length, <span class=\"hljs-number\">2</span>);<br>                            fileList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = idList.indexOf(file.id) &gt; -<span class=\"hljs-number\">1</span>;<br>                                assert(found, <span class=\"hljs-string\">'failed to find file '</span> + file.name + <span class=\"hljs-string\">' in query results'</span>);<br>                            });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "fc6b2f54-5abd-4b52-9578-68202139de15",
                "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
                "skipped": false
              },
              {
                "title": "get by file path in project",
                "fullTitle": "Feature - Files:  Get File Information get by file path in project",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, probe, filePath, valOrError;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">4</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context5.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            _context5.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            top_directory = _context5.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            result = _context5.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            _context5.next = <span class=\"hljs-number\">25</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                            probe = _context5.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            filePath = project.name + <span class=\"hljs-string\">\"/\"</span> + path + <span class=\"hljs-string\">\"/\"</span> + file.name;<br>                            _context5.next = <span class=\"hljs-number\">32</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.byPath(project.id, filePath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">32</span>:<br>                            valOrError = _context5.sent;<br>                            assert.isOk(valOrError);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            filePath = <span class=\"hljs-string\">\"bogas\"</span> + <span class=\"hljs-string\">\"/\"</span> + path + <span class=\"hljs-string\">\"/\"</span> + file.name;<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.byPath(project.id, filePath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            valOrError = _context5.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.error);<br>                            assert.equal(valOrError.error, <span class=\"hljs-string\">'No matching file'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "4fece870-789f-4a08-8c33-91593a762b59",
                "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 483
          },
          {
            "title": "File Update",
            "suites": [],
            "tests": [
              {
                "title": "will rename a file",
                "fullTitle": "Feature - Files:  File Update will rename a file",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> newName, oldName, file, updateArgs, valOrError, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            newName = <span class=\"hljs-string\">'Another name for photo.jpg'</span>;<br>                            oldName = <span class=\"hljs-string\">'L124_photo.jpg'</span>;<br>                            _context6.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            file = _context6.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            assert.equal(file.name, oldName);<br>                            updateArgs = {<br>                                name: newName<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            valOrError = _context6.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.val);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.name, newName);<br>                            assert.equal(probe.id, file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "b0314d9f-7d28-4590-933c-78af6ca6f0b8",
                "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
                "skipped": false
              },
              {
                "title": "will not let you rename a file to a name in use",
                "fullTitle": "Feature - Files:  File Update will not let you rename a file to a name in use",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> newName, oldName, file, anotherFile, updateArgs, valOrError, message;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            newName = <span class=\"hljs-string\">'Another name for photo.jpg'</span>;<br>                            oldName = <span class=\"hljs-string\">'L124_photo.jpg'</span>;<br>                            _context7.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            file = _context7.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            assert.equal(file.name, oldName);<br>                            _context7.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            anotherFile = _context7.sent;<br>                            assert.isOk(anotherFile);<br>                            assert.equal(anotherFile.owner, userId);<br>                            newName = anotherFile.name;<br>                            updateArgs = {<br>                                name: newName<br>                            };<br>                            _context7.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            valOrError = _context7.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.error, <span class=\"hljs-string\">\"Expected an error return\"</span>);<br>                            message = <span class=\"hljs-string\">'Unexpected error message: '</span> + valOrError.error;<br>                            assert(valOrError.error.indexOf(<span class=\"hljs-string\">\"already exists\"</span>) &gt; -<span class=\"hljs-number\">1</span>, message);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "31788288-82f4-4aa6-9c87-b36b0f1a21b9",
                "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
                "skipped": false
              },
              {
                "title": "will change the description of a file",
                "fullTitle": "Feature - Files:  File Update will change the description of a file",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> description, file, updateArgs, valOrError, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            description = <span class=\"hljs-string\">'This is a test description - '</span> + project.name;<br>                            _context8.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            file = _context8.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            updateArgs = {<br>                                description: description<br>                            };<br>                            _context8.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            valOrError = _context8.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.val);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            assert(probe.description !== file.description);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "44656d86-591a-40d6-a708-8983b4f140c7",
                "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
                "skipped": false
              },
              {
                "title": "will move a file",
                "fullTitle": "Feature - Files:  File Update will move a file",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context9.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            _context9.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            top_directory = _context9.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            result = _context9.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            _context9.next = <span class=\"hljs-number\">25</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                            probe = _context9.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "7ff53b74-0964-4ff7-a1cb-db78c3718513",
                "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/files-spec.js",
            "uuid": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/files-spec.js",
            "passes": [
              {
                "title": "will rename a file",
                "fullTitle": "Feature - Files:  File Update will rename a file",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> newName, oldName, file, updateArgs, valOrError, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            newName = <span class=\"hljs-string\">'Another name for photo.jpg'</span>;<br>                            oldName = <span class=\"hljs-string\">'L124_photo.jpg'</span>;<br>                            _context6.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            file = _context6.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            assert.equal(file.name, oldName);<br>                            updateArgs = {<br>                                name: newName<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            valOrError = _context6.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.val);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.name, newName);<br>                            assert.equal(probe.id, file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "b0314d9f-7d28-4590-933c-78af6ca6f0b8",
                "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
                "skipped": false
              },
              {
                "title": "will not let you rename a file to a name in use",
                "fullTitle": "Feature - Files:  File Update will not let you rename a file to a name in use",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> newName, oldName, file, anotherFile, updateArgs, valOrError, message;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            newName = <span class=\"hljs-string\">'Another name for photo.jpg'</span>;<br>                            oldName = <span class=\"hljs-string\">'L124_photo.jpg'</span>;<br>                            _context7.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            file = _context7.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            assert.equal(file.name, oldName);<br>                            _context7.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            anotherFile = _context7.sent;<br>                            assert.isOk(anotherFile);<br>                            assert.equal(anotherFile.owner, userId);<br>                            newName = anotherFile.name;<br>                            updateArgs = {<br>                                name: newName<br>                            };<br>                            _context7.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            valOrError = _context7.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.error, <span class=\"hljs-string\">\"Expected an error return\"</span>);<br>                            message = <span class=\"hljs-string\">'Unexpected error message: '</span> + valOrError.error;<br>                            assert(valOrError.error.indexOf(<span class=\"hljs-string\">\"already exists\"</span>) &gt; -<span class=\"hljs-number\">1</span>, message);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "31788288-82f4-4aa6-9c87-b36b0f1a21b9",
                "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
                "skipped": false
              },
              {
                "title": "will change the description of a file",
                "fullTitle": "Feature - Files:  File Update will change the description of a file",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> description, file, updateArgs, valOrError, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            description = <span class=\"hljs-string\">'This is a test description - '</span> + project.name;<br>                            _context8.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            file = _context8.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            updateArgs = {<br>                                description: description<br>                            };<br>                            _context8.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            valOrError = _context8.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.val);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            assert(probe.description !== file.description);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "44656d86-591a-40d6-a708-8983b4f140c7",
                "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
                "skipped": false
              },
              {
                "title": "will move a file",
                "fullTitle": "Feature - Files:  File Update will move a file",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context9.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            _context9.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            top_directory = _context9.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            result = _context9.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            _context9.next = <span class=\"hljs-number\">25</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                            probe = _context9.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "7ff53b74-0964-4ff7-a1cb-db78c3718513",
                "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 222
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/files-spec.js",
        "uuid": "15552105-fc0e-4480-b273-68810da4cd66",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/files-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Files: ",
        "suites": [
          {
            "title": "Versioning",
            "suites": [],
            "tests": [
              {
                "title": "supports different versions of the file - same directory",
                "fullTitle": "Feature - Files:  Versioning supports different versions of the file - same directory",
                "timedOut": false,
                "duration": 293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, file3, fileWithVersion, otherVersion, versions, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context2.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            <span class=\"hljs-comment\">// create faked version of file</span><br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context2.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">3</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            file3 = _context2.sent;<br>                            assert.isOk(file3);<br>                            assert.equal(file3.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file2, file1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file2.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file1.id);<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file1.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file3, file2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file3.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file2.id);<br>                            _context2.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file2.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">45</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getVersions(fileWithVersion.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                            versions = _context2.sent;<br>                            assert.isOk(versions);<br>                            assert.isOk(versions.val);<br>                            probe = versions.val;<br>                            assert.equal(probe.length, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"Some versions of the file are missing\"</span>);<br>                            assert.equal(probe[<span class=\"hljs-number\">0</span>].id, file2.id);<br>                            assert.equal(probe[<span class=\"hljs-number\">1</span>].id, file1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">52</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a53aad33-a1ae-49e5-a0ca-c820852296f4",
                "parentUUID": "5710bd7b-a319-4143-a7a0-8bbc5a6e31d5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/files-version-spec.js",
            "uuid": "5710bd7b-a319-4143-a7a0-8bbc5a6e31d5",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/files-version-spec.js",
            "passes": [
              {
                "title": "supports different versions of the file - same directory",
                "fullTitle": "Feature - Files:  Versioning supports different versions of the file - same directory",
                "timedOut": false,
                "duration": 293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, file3, fileWithVersion, otherVersion, versions, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context2.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            <span class=\"hljs-comment\">// create faked version of file</span><br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context2.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">3</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            file3 = _context2.sent;<br>                            assert.isOk(file3);<br>                            assert.equal(file3.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file2, file1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file2.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file1.id);<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file1.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file3, file2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file3.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file2.id);<br>                            _context2.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file2.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">45</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getVersions(fileWithVersion.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                            versions = _context2.sent;<br>                            assert.isOk(versions);<br>                            assert.isOk(versions.val);<br>                            probe = versions.val;<br>                            assert.equal(probe.length, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"Some versions of the file are missing\"</span>);<br>                            assert.equal(probe[<span class=\"hljs-number\">0</span>].id, file2.id);<br>                            assert.equal(probe[<span class=\"hljs-number\">1</span>].id, file1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">52</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a53aad33-a1ae-49e5-a0ca-c820852296f4",
                "parentUUID": "5710bd7b-a319-4143-a7a0-8bbc5a6e31d5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 293
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/files-version-spec.js",
        "uuid": "f7fae093-378f-4208-9a4d-95a9e8eeaf8f",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/files-version-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Files: ",
        "suites": [
          {
            "title": "Versioning",
            "suites": [],
            "tests": [
              {
                "title": "supports different versions of the file - different directories",
                "fullTitle": "Feature - Files:  Versioning supports different versions of the file - different directories",
                "timedOut": false,
                "duration": 399,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, file3, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, fileProbe, fileWithVersion, otherVersion, versions, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context2.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context2.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">3</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            file3 = _context2.sent;<br>                            assert.isOk(file3);<br>                            assert.equal(file3.owner, userId);<br>                            <span class=\"hljs-comment\">// file 2 moved to a different directory</span><br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            top_directory = _context2.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context2.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            result = _context2.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context2.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file2.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context2.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            fileProbe = _context2.sent;<br>                            assert.isOk(fileProbe);<br>                            assert.equal(fileProbe.owner, userId);<br>                            assert.equal(fileProbe.id, file2.id);<br>                            <span class=\"hljs-comment\">// create faked versions of file3</span><br>                            _context2.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file2, file1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file2.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file1.id);<br>                            _context2.next = <span class=\"hljs-number\">48</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">48</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file1.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">55</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file3, file2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">55</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file3.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file2.id);<br>                            _context2.next = <span class=\"hljs-number\">62</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">62</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file2.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            <span class=\"hljs-comment\">// versions are still available</span><br>                            _context2.next = <span class=\"hljs-number\">69</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getVersions(fileWithVersion.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">69</span>:<br>                            versions = _context2.sent;<br>                            assert.isOk(versions);<br>                            assert.isOk(versions.val);<br>                            probe = versions.val;<br>                            assert.equal(probe.length, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"Some versions of the file are missing\"</span>);<br>                            assert.equal(probe[<span class=\"hljs-number\">0</span>].id, file2.id);<br>                            assert.equal(probe[<span class=\"hljs-number\">1</span>].id, file1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">76</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "db7efabd-5eca-4a91-be44-37f8bcc100f6",
                "parentUUID": "fd12e689-51f0-4fee-ad4f-99ed5b35cf32",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/files-version-special-spec.js",
            "uuid": "fd12e689-51f0-4fee-ad4f-99ed5b35cf32",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/files-version-special-spec.js",
            "passes": [
              {
                "title": "supports different versions of the file - different directories",
                "fullTitle": "Feature - Files:  Versioning supports different versions of the file - different directories",
                "timedOut": false,
                "duration": 399,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, file3, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, fileProbe, fileWithVersion, otherVersion, versions, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context2.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context2.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">3</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            file3 = _context2.sent;<br>                            assert.isOk(file3);<br>                            assert.equal(file3.owner, userId);<br>                            <span class=\"hljs-comment\">// file 2 moved to a different directory</span><br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            top_directory = _context2.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context2.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            result = _context2.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context2.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file2.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context2.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            fileProbe = _context2.sent;<br>                            assert.isOk(fileProbe);<br>                            assert.equal(fileProbe.owner, userId);<br>                            assert.equal(fileProbe.id, file2.id);<br>                            <span class=\"hljs-comment\">// create faked versions of file3</span><br>                            _context2.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file2, file1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file2.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file1.id);<br>                            _context2.next = <span class=\"hljs-number\">48</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">48</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file1.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">55</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file3, file2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">55</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file3.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file2.id);<br>                            _context2.next = <span class=\"hljs-number\">62</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">62</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file2.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            <span class=\"hljs-comment\">// versions are still available</span><br>                            _context2.next = <span class=\"hljs-number\">69</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getVersions(fileWithVersion.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">69</span>:<br>                            versions = _context2.sent;<br>                            assert.isOk(versions);<br>                            assert.isOk(versions.val);<br>                            probe = versions.val;<br>                            assert.equal(probe.length, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"Some versions of the file are missing\"</span>);<br>                            assert.equal(probe[<span class=\"hljs-number\">0</span>].id, file2.id);<br>                            assert.equal(probe[<span class=\"hljs-number\">1</span>].id, file1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">76</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "db7efabd-5eca-4a91-be44-37f8bcc100f6",
                "parentUUID": "fd12e689-51f0-4fee-ad4f-99ed5b35cf32",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 399
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/files-version-special-spec.js",
        "uuid": "792da77b-ed17-437d-9b9a-332e5640f1d3",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/files-version-special-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Measurments: ",
        "suites": [
          {
            "title": "Function level",
            "suites": [],
            "tests": [
              {
                "title": "individual test level",
                "fullTitle": "Feature - Measurments:  Function level individual test level",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "2ca1acb2-a4d4-4527-ae41-87d70b7de4e9",
                "parentUUID": "15b33842-9fdb-4bd6-8db4-f2c40443ad0a",
                "skipped": false
              }
            ],
            "pending": [
              {
                "title": "individual test level",
                "fullTitle": "Feature - Measurments:  Function level individual test level",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "2ca1acb2-a4d4-4527-ae41-87d70b7de4e9",
                "parentUUID": "15b33842-9fdb-4bd6-8db4-f2c40443ad0a",
                "skipped": false
              }
            ],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/measurements-spec.js",
            "uuid": "15b33842-9fdb-4bd6-8db4-f2c40443ad0a",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/measurements-spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 1,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": true,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/measurements-spec.js",
        "uuid": "de24c4ae-d74c-40a4-bd7d-2ef0785bbb7d",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/measurements-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Processes: ",
        "suites": [
          {
            "title": "Function level",
            "suites": [],
            "tests": [
              {
                "title": "creates a process",
                "fullTitle": "Feature - Processes:  Function level creates a process",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Create Process Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context2.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context2.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context2.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            process = ret.val;<br>                            assert.isOk(process);<br>                            assert.equal(process.owner, user.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a841dc2d-f6b6-41d9-b0e8-cbd0073f1a1d",
                "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
                "skipped": false
              },
              {
                "title": "creates two processes linked by sample ",
                "fullTitle": "Feature - Processes:  Function level creates two processes linked by sample ",
                "timedOut": false,
                "duration": 678,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context3.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "5d3c172f-0020-476f-893e-fbc200d36a59",
                "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
                "skipped": false
              },
              {
                "title": "deletes two processes leaf first",
                "fullTitle": "Feature - Processes:  Function level deletes two processes leaf first",
                "timedOut": false,
                "duration": 841,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Delete Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context4.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, measurement_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            _context4.next = <span class=\"hljs-number\">46</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, create_sample_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "72c75ecf-9cfb-46dd-884c-20437961efb8",
                "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
                "skipped": false
              },
              {
                "title": "does not allow deleting non-leaf nodes",
                "fullTitle": "Feature - Processes:  Function level does not allow deleting non-leaf nodes",
                "timedOut": false,
                "duration": 656,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Delete Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context5.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, create_sample_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.error);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "172c0b29-860b-4d29-88f1-08170abb7410",
                "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/processes-spec.js",
            "uuid": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/processes-spec.js",
            "passes": [
              {
                "title": "creates a process",
                "fullTitle": "Feature - Processes:  Function level creates a process",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Create Process Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context2.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context2.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context2.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            process = ret.val;<br>                            assert.isOk(process);<br>                            assert.equal(process.owner, user.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a841dc2d-f6b6-41d9-b0e8-cbd0073f1a1d",
                "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
                "skipped": false
              },
              {
                "title": "creates two processes linked by sample ",
                "fullTitle": "Feature - Processes:  Function level creates two processes linked by sample ",
                "timedOut": false,
                "duration": 678,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context3.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "5d3c172f-0020-476f-893e-fbc200d36a59",
                "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
                "skipped": false
              },
              {
                "title": "deletes two processes leaf first",
                "fullTitle": "Feature - Processes:  Function level deletes two processes leaf first",
                "timedOut": false,
                "duration": 841,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Delete Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context4.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, measurement_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            _context4.next = <span class=\"hljs-number\">46</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, create_sample_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "72c75ecf-9cfb-46dd-884c-20437961efb8",
                "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
                "skipped": false
              },
              {
                "title": "does not allow deleting non-leaf nodes",
                "fullTitle": "Feature - Processes:  Function level does not allow deleting non-leaf nodes",
                "timedOut": false,
                "duration": 656,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Delete Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context5.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, create_sample_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.error);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "172c0b29-860b-4d29-88f1-08170abb7410",
                "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2436
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/processes-spec.js",
        "uuid": "01dc5dbb-61dc-4cdf-9277-01ea9478bac8",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/processes-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Projects: ",
        "suites": [
          {
            "title": "Delete Project: ",
            "suites": [],
            "tests": [
              {
                "title": "does not delete a project with any published datasets",
                "fullTitle": "Feature - Projects:  Delete Project:  does not delete a project with any published datasets",
                "timedOut": false,
                "duration": 5728,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.published);<br>                            assert(results.val.published);<br>                            <span class=\"hljs-comment\">// delete project - fails</span><br>                            _context2.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "e8f86f32-2287-49f1-99f6-19e4407382b3",
                "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
                "skipped": false
              },
              {
                "title": "does not delete a project if any dataset in any experiment has a DOI",
                "fullTitle": "Feature - Projects:  Delete Project:  does not delete a project if any dataset in any experiment has a DOI",
                "timedOut": false,
                "duration": 5222,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, fakeDOI, status, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            status = _context3.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete project - fails</span><br>                            _context3.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "22ce4575-5cb5-45c4-8717-37c23cff96ef",
                "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
                "skipped": false
              },
              {
                "title": "supports a dry run mode",
                "fullTitle": "Feature - Projects:  Delete Project:  supports a dry run mode",
                "timedOut": false,
                "duration": 5170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> dryRun, project_id, results, tally;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            dryRun = <span class=\"hljs-literal\">true</span>;<br>                            assert.isOk(project);<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            results = _context4.sent;<br>                            assert.isOk(results);<br>                            tally = results.val;<br>                            assert.isOk(tally);<br>                            _context4.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkTally(tally, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context4.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> confirmDemoProjectCoverage(tally, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a5291f07-5832-4d74-a7d2-ac8448ee3f5d",
                "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
                "skipped": false
              },
              {
                "title": "deletes the indicated project",
                "fullTitle": "Feature - Projects:  Delete Project:  deletes the indicated project",
                "timedOut": false,
                "duration": 7273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> dryRun, project_id, results, tally;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>); <span class=\"hljs-comment\">// test take up to 12 seconds</span><br>                            _context5.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            dryRun = <span class=\"hljs-literal\">false</span>;<br>                            assert.isOk(project);<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            _context5.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            results = _context5.sent;<br>                            assert.isOk(results);<br>                            tally = results.val;<br>                            assert.isOk(tally);<br>                            _context5.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkTally(tally, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context5.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> confirmDemoProjectCoverage(tally, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "816b8c31-c39b-4a19-a625-352fbb81e21f",
                "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/project-delete-spec.js",
            "uuid": "3bbde55c-8589-4d70-b76a-9af27ac59460",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/project-delete-spec.js",
            "passes": [
              {
                "title": "does not delete a project with any published datasets",
                "fullTitle": "Feature - Projects:  Delete Project:  does not delete a project with any published datasets",
                "timedOut": false,
                "duration": 5728,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.published);<br>                            assert(results.val.published);<br>                            <span class=\"hljs-comment\">// delete project - fails</span><br>                            _context2.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "e8f86f32-2287-49f1-99f6-19e4407382b3",
                "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
                "skipped": false
              },
              {
                "title": "does not delete a project if any dataset in any experiment has a DOI",
                "fullTitle": "Feature - Projects:  Delete Project:  does not delete a project if any dataset in any experiment has a DOI",
                "timedOut": false,
                "duration": 5222,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, fakeDOI, status, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            status = _context3.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete project - fails</span><br>                            _context3.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "22ce4575-5cb5-45c4-8717-37c23cff96ef",
                "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
                "skipped": false
              },
              {
                "title": "supports a dry run mode",
                "fullTitle": "Feature - Projects:  Delete Project:  supports a dry run mode",
                "timedOut": false,
                "duration": 5170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> dryRun, project_id, results, tally;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            dryRun = <span class=\"hljs-literal\">true</span>;<br>                            assert.isOk(project);<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            results = _context4.sent;<br>                            assert.isOk(results);<br>                            tally = results.val;<br>                            assert.isOk(tally);<br>                            _context4.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkTally(tally, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context4.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> confirmDemoProjectCoverage(tally, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a5291f07-5832-4d74-a7d2-ac8448ee3f5d",
                "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
                "skipped": false
              },
              {
                "title": "deletes the indicated project",
                "fullTitle": "Feature - Projects:  Delete Project:  deletes the indicated project",
                "timedOut": false,
                "duration": 7273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> dryRun, project_id, results, tally;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>); <span class=\"hljs-comment\">// test take up to 12 seconds</span><br>                            _context5.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            dryRun = <span class=\"hljs-literal\">false</span>;<br>                            assert.isOk(project);<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            _context5.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            results = _context5.sent;<br>                            assert.isOk(results);<br>                            tally = results.val;<br>                            assert.isOk(tally);<br>                            _context5.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkTally(tally, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context5.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> confirmDemoProjectCoverage(tally, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "816b8c31-c39b-4a19-a625-352fbb81e21f",
                "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 23393
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/project-delete-spec.js",
        "uuid": "2d333106-4708-407a-a12b-52534bb1745d",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/project-delete-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - projects: ",
        "suites": [
          {
            "title": "Create project",
            "suites": [],
            "tests": [
              {
                "title": "create project and get project back",
                "fullTitle": "Feature - projects:  Create project create project and get project back",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context2.sent;<br>                            project = ret.val;<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.owner, user.id);<br>                            assert.equal(project.owner, userId);<br>                            assert.equal(project.users.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "68b0bfe5-1ec7-4b1b-a06c-11568d9f252c",
                "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
                "skipped": false
              },
              {
                "title": "create project and find project in all projects",
                "fullTitle": "Feature - projects:  Create project create project and find project in all projects",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context3.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context3.sent;<br>                            project = ret.val;<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                            _context3.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.all();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            project_list = _context3.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a3819d22-a7a6-4b0f-b377-052e82412c1a",
                "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
                "skipped": false
              },
              {
                "title": "create project and find project by user",
                "fullTitle": "Feature - projects:  Create project create project and find project by user",
                "timedOut": false,
                "duration": 191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            project_list = _context4.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            assert.equal(found_project.users.length, <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> field is user, here, but user_id in test above!!!</span><br>                            <span class=\"hljs-comment\">// is this the correct behaivor???</span><br>                            assert.equal(found_project.users[<span class=\"hljs-number\">0</span>].user, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "8f964b32-fc1e-4988-a40a-00381a84ac71",
                "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
                "skipped": false
              },
              {
                "title": "create project, find by user, has full set of properties",
                "fullTitle": "Feature - projects:  Create project create project, find by user, has full set of properties",
                "timedOut": false,
                "duration": 191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context5.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context5.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context5.sent;<br>                            project = ret.val;<br>                            _context5.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            project_list = _context5.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            assert.equal(found_project.users.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(found_project.users[<span class=\"hljs-number\">0</span>].user, userId);<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'events'</span>));<br>                            assert.equal(found_project.events.length, <span class=\"hljs-number\">0</span>);<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'processes'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'samples'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'files'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'experiments'</span>));<br>                            assert.equal(found_project.processes, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.samples, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.files, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.experiments, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "9297b296-f325-45da-bbf1-a3ac3776a461",
                "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/projects-spec.js",
            "uuid": "54761fec-7206-469f-88f7-7c11efed28af",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/projects-spec.js",
            "passes": [
              {
                "title": "create project and get project back",
                "fullTitle": "Feature - projects:  Create project create project and get project back",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context2.sent;<br>                            project = ret.val;<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.owner, user.id);<br>                            assert.equal(project.owner, userId);<br>                            assert.equal(project.users.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "68b0bfe5-1ec7-4b1b-a06c-11568d9f252c",
                "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
                "skipped": false
              },
              {
                "title": "create project and find project in all projects",
                "fullTitle": "Feature - projects:  Create project create project and find project in all projects",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context3.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context3.sent;<br>                            project = ret.val;<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                            _context3.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.all();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            project_list = _context3.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a3819d22-a7a6-4b0f-b377-052e82412c1a",
                "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
                "skipped": false
              },
              {
                "title": "create project and find project by user",
                "fullTitle": "Feature - projects:  Create project create project and find project by user",
                "timedOut": false,
                "duration": 191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            project_list = _context4.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            assert.equal(found_project.users.length, <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> field is user, here, but user_id in test above!!!</span><br>                            <span class=\"hljs-comment\">// is this the correct behaivor???</span><br>                            assert.equal(found_project.users[<span class=\"hljs-number\">0</span>].user, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "8f964b32-fc1e-4988-a40a-00381a84ac71",
                "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
                "skipped": false
              },
              {
                "title": "create project, find by user, has full set of properties",
                "fullTitle": "Feature - projects:  Create project create project, find by user, has full set of properties",
                "timedOut": false,
                "duration": 191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context5.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context5.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context5.sent;<br>                            project = ret.val;<br>                            _context5.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            project_list = _context5.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            assert.equal(found_project.users.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(found_project.users[<span class=\"hljs-number\">0</span>].user, userId);<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'events'</span>));<br>                            assert.equal(found_project.events.length, <span class=\"hljs-number\">0</span>);<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'processes'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'samples'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'files'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'experiments'</span>));<br>                            assert.equal(found_project.processes, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.samples, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.files, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.experiments, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "9297b296-f325-45da-bbf1-a3ac3776a461",
                "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 526
          },
          {
            "title": "Update project",
            "suites": [],
            "tests": [
              {
                "title": "create project, update name and description",
                "fullTitle": "Feature - projects:  Update project create project, update name and description",
                "timedOut": false,
                "duration": 110,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, top_directory, name, description, update_attrs, updated_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context6.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context6.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context6.sent;<br>                            project = ret.val;<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.owner, userId);<br>                            _context6.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            top_directory = _context6.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                            name = random_name();<br>                            description = <span class=\"hljs-string\">\"An alternate description\"</span>;<br>                            update_attrs = {<br>                                name: name,<br>                                description: description<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.update(project.id, update_attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            updated_project = _context6.sent;<br>                            assert.equal(updated_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(updated_project.owner, userId);<br>                            assert.equal(updated_project.name, name);<br>                            assert.equal(updated_project.description, description);<br>                            _context6.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            top_directory = _context6.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "42daad6b-e07a-4ba6-b2ce-1800751f9a0f",
                "parentUUID": "f934f047-f029-47c4-9894-a58df5bfad04",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/projects-spec.js",
            "uuid": "f934f047-f029-47c4-9894-a58df5bfad04",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/projects-spec.js",
            "passes": [
              {
                "title": "create project, update name and description",
                "fullTitle": "Feature - projects:  Update project create project, update name and description",
                "timedOut": false,
                "duration": 110,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, top_directory, name, description, update_attrs, updated_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context6.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context6.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context6.sent;<br>                            project = ret.val;<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.owner, userId);<br>                            _context6.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            top_directory = _context6.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                            name = random_name();<br>                            description = <span class=\"hljs-string\">\"An alternate description\"</span>;<br>                            update_attrs = {<br>                                name: name,<br>                                description: description<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.update(project.id, update_attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            updated_project = _context6.sent;<br>                            assert.equal(updated_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(updated_project.owner, userId);<br>                            assert.equal(updated_project.name, name);<br>                            assert.equal(updated_project.description, description);<br>                            _context6.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            top_directory = _context6.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "42daad6b-e07a-4ba6-b2ce-1800751f9a0f",
                "parentUUID": "f934f047-f029-47c4-9894-a58df5bfad04",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 110
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/projects-spec.js",
        "uuid": "5984c3a2-f39c-490b-bd81-13f26609db9d",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/projects-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Properties: ",
        "suites": [
          {
            "title": "Function level",
            "suites": [],
            "tests": [
              {
                "title": "individual test level",
                "fullTitle": "Feature - Properties:  Function level individual test level",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "3ba5d837-5927-4b21-a8c8-29c407e8372e",
                "parentUUID": "5d3b927d-acba-4370-87e0-7c43b8597bb8",
                "skipped": false
              }
            ],
            "pending": [
              {
                "title": "individual test level",
                "fullTitle": "Feature - Properties:  Function level individual test level",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "3ba5d837-5927-4b21-a8c8-29c407e8372e",
                "parentUUID": "5d3b927d-acba-4370-87e0-7c43b8597bb8",
                "skipped": false
              }
            ],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/properties-spec.js",
            "uuid": "5d3b927d-acba-4370-87e0-7c43b8597bb8",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/properties-spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 1,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": true,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/properties-spec.js",
        "uuid": "d19732a1-d4d6-455f-ad62-9c1e053de576",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/properties-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - reset lost password: ",
        "suites": [
          {
            "title": "User with reset_password flag",
            "suites": [],
            "tests": [
              {
                "title": "there is a user for testing",
                "fullTitle": "Feature - reset lost password:  User with reset_password flag there is a user for testing",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "6c07ba07-2f05-4e72-b63b-c002c0432a3f",
                "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
                "skipped": false
              },
              {
                "title": "User with the reset password flag set",
                "fullTitle": "Feature - reset lost password:  User with reset_password flag User with the reset password flag set",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, validate_uuid, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.uuid();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            validate_uuid = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.setUserPasswordResetFlag(user1Id, validate_uuid);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            result = _context3.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly added to the user\"</span>);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            user = _context3.sent;<br>                            assert.isTrue(user.reset_password, <span class=\"hljs-string\">\"The flag is set\"</span>);<br>                            assert.equal(user.validate_uuid, validate_uuid);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "1d26e44b-7dbc-4c25-8005-d757164b0d9f",
                "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
                "skipped": false
              },
              {
                "title": "User reset password flag is cleared",
                "fullTitle": "Feature - reset lost password:  User with reset_password flag User reset password flag is cleared",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.setUserPasswordResetFlag(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            result = _context4.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly added to the user\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            user = _context4.sent;<br>                            assert.isTrue(user.reset_password);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.clearUserPasswordResetFlag(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            result = _context4.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly cleared from the user\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            user = _context4.sent;<br>                            assert.isUndefined(user.reset_password, <span class=\"hljs-string\">\"The flag is cleared\"</span>);<br>                            assert.isUndefined(user.validate_uuid, <span class=\"hljs-string\">\"The flag is cleared\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "739f5958-b7f4-4bbb-84cb-c9e9eead8211",
                "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/reset-lost-password-spec.js",
            "uuid": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/reset-lost-password-spec.js",
            "passes": [
              {
                "title": "there is a user for testing",
                "fullTitle": "Feature - reset lost password:  User with reset_password flag there is a user for testing",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "6c07ba07-2f05-4e72-b63b-c002c0432a3f",
                "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
                "skipped": false
              },
              {
                "title": "User with the reset password flag set",
                "fullTitle": "Feature - reset lost password:  User with reset_password flag User with the reset password flag set",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, validate_uuid, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.uuid();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            validate_uuid = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.setUserPasswordResetFlag(user1Id, validate_uuid);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            result = _context3.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly added to the user\"</span>);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            user = _context3.sent;<br>                            assert.isTrue(user.reset_password, <span class=\"hljs-string\">\"The flag is set\"</span>);<br>                            assert.equal(user.validate_uuid, validate_uuid);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "1d26e44b-7dbc-4c25-8005-d757164b0d9f",
                "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
                "skipped": false
              },
              {
                "title": "User reset password flag is cleared",
                "fullTitle": "Feature - reset lost password:  User with reset_password flag User reset password flag is cleared",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.setUserPasswordResetFlag(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            result = _context4.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly added to the user\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            user = _context4.sent;<br>                            assert.isTrue(user.reset_password);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.clearUserPasswordResetFlag(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            result = _context4.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly cleared from the user\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            user = _context4.sent;<br>                            assert.isUndefined(user.reset_password, <span class=\"hljs-string\">\"The flag is cleared\"</span>);<br>                            assert.isUndefined(user.validate_uuid, <span class=\"hljs-string\">\"The flag is cleared\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "739f5958-b7f4-4bbb-84cb-c9e9eead8211",
                "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 55
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/reset-lost-password-spec.js",
        "uuid": "de87537d-6d4d-469d-aee2-f448fcb33b44",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/reset-lost-password-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Samples: ",
        "suites": [
          {
            "title": "Create Sample",
            "suites": [],
            "tests": [
              {
                "title": "create a sample set",
                "fullTitle": "Feature - Samples:  Create Sample create a sample set",
                "timedOut": false,
                "duration": 146,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sampleName1, sampleName2, sampleNameList, sampleNameArgs, results, sampleList, sample1, sample2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            sampleName1 = <span class=\"hljs-string\">\"Sample1 For Test\"</span>;<br>                            sampleName2 = <span class=\"hljs-string\">\"Sample2 For Test\"</span>;<br>                            sampleNameList = [sampleName1, sampleName2];<br>                            sampleNameArgs = [];<br>                            sampleNameList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{<br>                                sampleNameArgs.push({ name: name });<br>                            });<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.createSamples(project.id, createSampleProcess.id, sampleNameArgs, project.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.samples);<br>                            sampleList = results.val.samples;<br>                            assert.isOk(sampleList);<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            sample1 = sampleList[<span class=\"hljs-number\">0</span>];<br>                            assert.isOk(sample1);<br>                            assert.equal(sample1.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample1.name, sampleName1);<br>                            sample2 = sampleList[<span class=\"hljs-number\">1</span>];<br>                            assert.isOk(sample2);<br>                            assert.equal(sample2.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample2.name, sampleName2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "b05a3d4e-8c46-4e87-b3c4-e78768555dfb",
                "parentUUID": "6fdf4d06-f29d-4db0-adcb-680176e87613",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/samples-create-spec.js",
            "uuid": "6fdf4d06-f29d-4db0-adcb-680176e87613",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/samples-create-spec.js",
            "passes": [
              {
                "title": "create a sample set",
                "fullTitle": "Feature - Samples:  Create Sample create a sample set",
                "timedOut": false,
                "duration": 146,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sampleName1, sampleName2, sampleNameList, sampleNameArgs, results, sampleList, sample1, sample2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            sampleName1 = <span class=\"hljs-string\">\"Sample1 For Test\"</span>;<br>                            sampleName2 = <span class=\"hljs-string\">\"Sample2 For Test\"</span>;<br>                            sampleNameList = [sampleName1, sampleName2];<br>                            sampleNameArgs = [];<br>                            sampleNameList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{<br>                                sampleNameArgs.push({ name: name });<br>                            });<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.createSamples(project.id, createSampleProcess.id, sampleNameArgs, project.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.samples);<br>                            sampleList = results.val.samples;<br>                            assert.isOk(sampleList);<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            sample1 = sampleList[<span class=\"hljs-number\">0</span>];<br>                            assert.isOk(sample1);<br>                            assert.equal(sample1.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample1.name, sampleName1);<br>                            sample2 = sampleList[<span class=\"hljs-number\">1</span>];<br>                            assert.isOk(sample2);<br>                            assert.equal(sample2.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample2.name, sampleName2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "b05a3d4e-8c46-4e87-b3c4-e78768555dfb",
                "parentUUID": "6fdf4d06-f29d-4db0-adcb-680176e87613",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 146
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/samples-create-spec.js",
        "uuid": "ef4d0725-fee3-4318-b510-93e88ea8a3a1",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/samples-create-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Samples: ",
        "suites": [
          {
            "title": "Get Samples",
            "suites": [],
            "tests": [
              {
                "title": "get samples by id",
                "fullTitle": "Feature - Samples:  Get Samples get samples by id",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sample, experiments, processes, checks, c, name, direction, found, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getSample(sample1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results.val);<br>                            sample = results.val;<br>                            assert.equal(sample.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample.name, sample1.name);<br>                            experiments = sample.experiments;<br>                            assert.equal(experiments.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(experiments[<span class=\"hljs-number\">0</span>].id, experiment.id);<br>                            processes = sample.processes;<br>                            assert.equal(processes.length, <span class=\"hljs-number\">3</span>);<br>                            checks = [{ name: createSampleProcess.name, direction: <span class=\"hljs-string\">'out'</span> }, { name: transformationProcess1.name, direction: <span class=\"hljs-string\">'in'</span> }, { name: transformationProcess1.name, direction: <span class=\"hljs-string\">'out'</span> }];<br>                            <span class=\"hljs-keyword\">for</span> (c = <span class=\"hljs-number\">0</span>; c &lt; checks.length; c++) {<br>                                name = checks[c].name;<br>                                direction = checks[c].direction;<br>                                found = <span class=\"hljs-literal\">false</span>;<br>                                <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; processes.length; i++) {<br>                                    <span class=\"hljs-keyword\">if</span> (name === processes[i].name &amp;&amp; direction === processes[i].direction) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                }<br>                                assert(found, <span class=\"hljs-string\">'Missing process for sample '</span> + sample1.name + <span class=\"hljs-string\">': expected name = \\''</span> + name + <span class=\"hljs-string\">'\\' with direction \\''</span> + direction + <span class=\"hljs-string\">'\\''</span>);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a7bdc22e-1e44-46ca-8cb0-120c7a180e5a",
                "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
                "skipped": false
              },
              {
                "title": "gets all samples for experiment",
                "fullTitle": "Feature - Samples:  Get Samples gets all samples for experiment",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sampleList, testTable, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getAllSamplesForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results.val);<br>                            sampleList = results.val;<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            testTable = {};<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleList.length; i++) {<br>                                testTable[sampleList[i].id] = sampleList[i];<br>                            }<br>                            assert.isOk(testTable[sample1.id]);<br>                            assert.equal(testTable[sample1.id].name, sample1.name);<br>                            assert.isOk(testTable[sample2.id]);<br>                            assert.equal(testTable[sample2.id].name, sample2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "2786c67b-598c-40c0-ba53-e6095d053886",
                "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
                "skipped": false
              },
              {
                "title": "gets all samples for project",
                "fullTitle": "Feature - Samples:  Get Samples gets all samples for project",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sampleList, testTable, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getAllSamplesForProject(project.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context4.sent;<br>                            assert.isOk(results.val);<br>                            sampleList = results.val;<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            testTable = {};<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleList.length; i++) {<br>                                testTable[sampleList[i].id] = sampleList[i];<br>                            }<br>                            assert.isOk(testTable[sample1.id]);<br>                            assert.equal(testTable[sample1.id].name, sample1.name);<br>                            assert.isOk(testTable[sample2.id]);<br>                            assert.equal(testTable[sample2.id].name, sample2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "92cbe8bb-ef9b-423f-af55-a003ef1b7f7d",
                "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/samples-get-spec.js",
            "uuid": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/samples-get-spec.js",
            "passes": [
              {
                "title": "get samples by id",
                "fullTitle": "Feature - Samples:  Get Samples get samples by id",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sample, experiments, processes, checks, c, name, direction, found, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getSample(sample1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results.val);<br>                            sample = results.val;<br>                            assert.equal(sample.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample.name, sample1.name);<br>                            experiments = sample.experiments;<br>                            assert.equal(experiments.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(experiments[<span class=\"hljs-number\">0</span>].id, experiment.id);<br>                            processes = sample.processes;<br>                            assert.equal(processes.length, <span class=\"hljs-number\">3</span>);<br>                            checks = [{ name: createSampleProcess.name, direction: <span class=\"hljs-string\">'out'</span> }, { name: transformationProcess1.name, direction: <span class=\"hljs-string\">'in'</span> }, { name: transformationProcess1.name, direction: <span class=\"hljs-string\">'out'</span> }];<br>                            <span class=\"hljs-keyword\">for</span> (c = <span class=\"hljs-number\">0</span>; c &lt; checks.length; c++) {<br>                                name = checks[c].name;<br>                                direction = checks[c].direction;<br>                                found = <span class=\"hljs-literal\">false</span>;<br>                                <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; processes.length; i++) {<br>                                    <span class=\"hljs-keyword\">if</span> (name === processes[i].name &amp;&amp; direction === processes[i].direction) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                }<br>                                assert(found, <span class=\"hljs-string\">'Missing process for sample '</span> + sample1.name + <span class=\"hljs-string\">': expected name = \\''</span> + name + <span class=\"hljs-string\">'\\' with direction \\''</span> + direction + <span class=\"hljs-string\">'\\''</span>);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "a7bdc22e-1e44-46ca-8cb0-120c7a180e5a",
                "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
                "skipped": false
              },
              {
                "title": "gets all samples for experiment",
                "fullTitle": "Feature - Samples:  Get Samples gets all samples for experiment",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sampleList, testTable, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getAllSamplesForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results.val);<br>                            sampleList = results.val;<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            testTable = {};<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleList.length; i++) {<br>                                testTable[sampleList[i].id] = sampleList[i];<br>                            }<br>                            assert.isOk(testTable[sample1.id]);<br>                            assert.equal(testTable[sample1.id].name, sample1.name);<br>                            assert.isOk(testTable[sample2.id]);<br>                            assert.equal(testTable[sample2.id].name, sample2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "2786c67b-598c-40c0-ba53-e6095d053886",
                "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
                "skipped": false
              },
              {
                "title": "gets all samples for project",
                "fullTitle": "Feature - Samples:  Get Samples gets all samples for project",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sampleList, testTable, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getAllSamplesForProject(project.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context4.sent;<br>                            assert.isOk(results.val);<br>                            sampleList = results.val;<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            testTable = {};<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleList.length; i++) {<br>                                testTable[sampleList[i].id] = sampleList[i];<br>                            }<br>                            assert.isOk(testTable[sample1.id]);<br>                            assert.equal(testTable[sample1.id].name, sample1.name);<br>                            assert.isOk(testTable[sample2.id]);<br>                            assert.equal(testTable[sample2.id].name, sample2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "92cbe8bb-ef9b-423f-af55-a003ef1b7f7d",
                "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/samples-get-spec.js",
        "uuid": "4cf24255-4692-400d-abbe-dc29f9615e54",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/samples-get-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Templates: ",
        "suites": [
          {
            "title": "Function level",
            "suites": [],
            "tests": [
              {
                "title": "individual test level",
                "fullTitle": "Feature - Templates:  Function level individual test level",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "624b8d8a-cd21-47d5-ae1e-63f1b78a131d",
                "parentUUID": "656aaefa-f1fa-4772-9651-1bef4fb0c7c7",
                "skipped": false
              }
            ],
            "pending": [
              {
                "title": "individual test level",
                "fullTitle": "Feature - Templates:  Function level individual test level",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "isRoot": false,
                "uuid": "624b8d8a-cd21-47d5-ae1e-63f1b78a131d",
                "parentUUID": "656aaefa-f1fa-4772-9651-1bef4fb0c7c7",
                "skipped": false
              }
            ],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/templates-spec.js",
            "uuid": "656aaefa-f1fa-4772-9651-1bef4fb0c7c7",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/templates-spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 1,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": true,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/templates-spec.js",
        "uuid": "3baa0881-0522-4918-a6f0-4e8a681ed03d",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/templates-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - Users: ",
        "suites": [
          {
            "title": "Standard Test Users",
            "suites": [],
            "tests": [
              {
                "title": "each users exist - internal use",
                "fullTitle": "Feature - Users:  Standard Test Users each users exist - internal use",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> users, ids, i, _user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUsers();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            users = _context2.sent;<br>                            ids = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; users.length; i++) {<br>                                _user = users[i];<br>                                ids.push(_user.id);<br>                            }<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"test@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"another@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"admin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"tadmin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "377102d1-59e2-48ef-8c98-9cd0b03671e4",
                "parentUUID": "35b97aba-8025-4ac2-8bdc-5e9dd400a6ac",
                "skipped": false
              },
              {
                "title": "each users exist - external use",
                "fullTitle": "Feature - Users:  Standard Test Users each users exist - external use",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> users, ids, i, _user2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getAllUsersExternal();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            users = _context3.sent;<br>                            ids = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; users.length; i++) {<br>                                _user2 = users[i];<br>                                ids.push(_user2.id);<br>                            }<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"test@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"another@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"admin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"tadmin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "d9c4370d-fac2-4fe1-b79c-fc4b99a0d7c0",
                "parentUUID": "35b97aba-8025-4ac2-8bdc-5e9dd400a6ac",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/users-spec.js",
            "uuid": "35b97aba-8025-4ac2-8bdc-5e9dd400a6ac",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/users-spec.js",
            "passes": [
              {
                "title": "each users exist - internal use",
                "fullTitle": "Feature - Users:  Standard Test Users each users exist - internal use",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> users, ids, i, _user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUsers();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            users = _context2.sent;<br>                            ids = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; users.length; i++) {<br>                                _user = users[i];<br>                                ids.push(_user.id);<br>                            }<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"test@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"another@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"admin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"tadmin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "377102d1-59e2-48ef-8c98-9cd0b03671e4",
                "parentUUID": "35b97aba-8025-4ac2-8bdc-5e9dd400a6ac",
                "skipped": false
              },
              {
                "title": "each users exist - external use",
                "fullTitle": "Feature - Users:  Standard Test Users each users exist - external use",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> users, ids, i, _user2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getAllUsersExternal();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            users = _context3.sent;<br>                            ids = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; users.length; i++) {<br>                                _user2 = users[i];<br>                                ids.push(_user2.id);<br>                            }<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"test@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"another@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"admin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"tadmin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "d9c4370d-fac2-4fe1-b79c-fc4b99a0d7c0",
                "parentUUID": "35b97aba-8025-4ac2-8bdc-5e9dd400a6ac",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5
          },
          {
            "title": "User Profile",
            "suites": [],
            "tests": [
              {
                "title": "can store values",
                "fullTitle": "Feature - Users:  User Profile can store values",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> name, value, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            name = random_name(<span class=\"hljs-string\">\"test value - \"</span>);<br>                            value = name;<br>                            _context4.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.storeInUserProfile(userId, name, value);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.storeInUserProfile(userId, name, value);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.getFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.clearFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.clearFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            probe = _context4.sent;<br>                            assert.isNull(probe);<br>                            _context4.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.getFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            probe = _context4.sent;<br>                            assert.isNull(probe);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "24fa1c2b-2013-4575-b142-ae89d53f1312",
                "parentUUID": "ec285e69-04f1-49d8-b350-6dc9e8021f62",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Database-Level/specs/users-spec.js",
            "uuid": "ec285e69-04f1-49d8-b350-6dc9e8021f62",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/users-spec.js",
            "passes": [
              {
                "title": "can store values",
                "fullTitle": "Feature - Users:  User Profile can store values",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> name, value, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            name = random_name(<span class=\"hljs-string\">\"test value - \"</span>);<br>                            value = name;<br>                            _context4.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.storeInUserProfile(userId, name, value);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.storeInUserProfile(userId, name, value);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.getFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.clearFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.clearFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            probe = _context4.sent;<br>                            assert.isNull(probe);<br>                            _context4.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.getFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            probe = _context4.sent;<br>                            assert.isNull(probe);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "24fa1c2b-2013-4575-b142-ae89d53f1312",
                "parentUUID": "ec285e69-04f1-49d8-b350-6dc9e8021f62",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 87
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Database-Level/specs/users-spec.js",
        "uuid": "2a170c53-5ec8-4969-b78c-05b27ec9befa",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Database-Level/specs/users-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Feature - User - Build Demo Project Support: ",
        "suites": [
          {
            "title": "User for test",
            "suites": [],
            "tests": [
              {
                "title": "exists",
                "fullTitle": "Feature - User - Build Demo Project Support:  User for test exists",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.apikey, demoProjectTestUserKey);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "fe0054a3-85c3-44e0-ad90-7690a300ccf7",
                "parentUUID": "5f6627d1-dd6c-4b8f-a16f-6fb848d054e7",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
            "uuid": "5f6627d1-dd6c-4b8f-a16f-6fb848d054e7",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
            "passes": [
              {
                "title": "exists",
                "fullTitle": "Feature - User - Build Demo Project Support:  User for test exists",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.apikey, demoProjectTestUserKey);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "fe0054a3-85c3-44e0-ad90-7690a300ccf7",
                "parentUUID": "5f6627d1-dd6c-4b8f-a16f-6fb848d054e7",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "List of files for build",
            "suites": [],
            "tests": [
              {
                "title": "exists in folder",
                "fullTitle": "Feature - User - Build Demo Project Support:  List of files for build exists in folder",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> i, checksumAndFilename, expectedChecksum, filename, path, checksum;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            assert(fs.existsSync(demoProjectConf.fullDatapath), <span class=\"hljs-string\">\"missing test datafile dir \"</span> + demoProjectConf.fullDatapath);<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context3.next = <span class=\"hljs-number\">15</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumAndFilename = helper.filesDescriptions()[i];<br>                            expectedChecksum = checksumAndFilename[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumAndFilename[<span class=\"hljs-number\">1</span>];<br>                            path = demoProjectConf.fullDatapath + <span class=\"hljs-string\">'/'</span> + filename;<br>                            assert(fs.existsSync(path), <span class=\"hljs-string\">\"missing test datafile \"</span> + demoProjectConf.fullDatapath + <span class=\"hljs-string\">\"/\"</span> + filename);<br>                            _context3.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> md5File(path);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            checksum = _context3.sent;<br>                            assert(expectedChecksum == checksum, <span class=\"hljs-string\">\"Checksums should be equal for file: \"</span> + filename + <span class=\"hljs-string\">\"; but expected \"</span> + expectedChecksum + <span class=\"hljs-string\">\" and got \"</span> + checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            i++;<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "dbda2056-9cba-4b2b-a84b-4db2d36d0372",
                "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
                "skipped": false
              },
              {
                "title": "can be inserted in database",
                "fullTitle": "Feature - User - Build Demo Project Support:  List of files for build can be inserted in database",
                "timedOut": false,
                "duration": 1320,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, projectName, attrs, ret, project, top_directory, tempDir, fileResults, fileCount, i, checksumFilenameAndMimetype, expectedChecksum, filename, mimetype, path, checksum, stats, fileSizeInBytes, source, args, file, _i, _checksumFilenameAndMimetype, _expectedChecksum, _filename, _file;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            projectName = random_name();<br>                            attrs = {<br>                                name: projectName,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            assert.equal(projectName, project.name);<br>                            assert.equal(user.id, project.owner);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            top_directory = _context4.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                            tempDir = os.tmpdir();<br>                            fileResults = {};<br>                            fileCount = <span class=\"hljs-number\">0</span>;<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context4.next = <span class=\"hljs-number\">49</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumFilenameAndMimetype = helper.filesDescriptions()[i];<br>                            expectedChecksum = checksumFilenameAndMimetype[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumFilenameAndMimetype[<span class=\"hljs-number\">1</span>];<br>                            mimetype = checksumFilenameAndMimetype[<span class=\"hljs-number\">2</span>];<br>                            path = demoProjectConf.fullDatapath + <span class=\"hljs-string\">'/'</span> + filename;<br>                            assert(fs.existsSync(path), <span class=\"hljs-string\">\"missing test datafile \"</span> + demoProjectConf.fullDatapath + <span class=\"hljs-string\">\"/\"</span> + filename);<br>                            _context4.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> md5File(path);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            checksum = _context4.sent;<br>                            assert(expectedChecksum == checksum, <span class=\"hljs-string\">\"Checksums should be equal for file: \"</span> + filename + <span class=\"hljs-string\">\"; but expected \"</span> + expectedChecksum + <span class=\"hljs-string\">\" and got \"</span> + checksum);<br>                            stats = fs.statSync(path);<br>                            fileSizeInBytes = stats.size;<br>                            _context4.next = <span class=\"hljs-number\">36</span>;<br>                            <span class=\"hljs-keyword\">return</span> copyOne(path, tempDir);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                            source = _context4.sent;<br>                            path = source.path;<br>                            args = {<br>                                name: filename,<br>                                checksum: checksum,<br>                                mediatype: fileUtils.mediaTypeDescriptionsFromMime(mimetype),<br>                                filesize: fileSizeInBytes,<br>                                filepath: path<br>                            };<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.ingestSingleLocalFile(project.id, top_directory.id, user.id, args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            file = _context4.sent;<br>                            should.exist(file);<br>                            assert.equal(file.name, filename);<br>                            assert.equal(file.checksum, checksum);<br>                            fileResults[file.checksum] = file;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            i++;<br>                            _context4.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            <span class=\"hljs-keyword\">for</span> (_i = <span class=\"hljs-number\">0</span>; _i &lt; helper.filesDescriptions().length; _i++) {<br>                                _checksumFilenameAndMimetype = helper.filesDescriptions()[_i];<br>                                _expectedChecksum = _checksumFilenameAndMimetype[<span class=\"hljs-number\">0</span>];<br>                                _filename = _checksumFilenameAndMimetype[<span class=\"hljs-number\">1</span>];<br>                                _file = fileResults[_expectedChecksum];<br>                                should.exist(_file, <span class=\"hljs-string\">\"file with filname = \"</span> + _filename + <span class=\"hljs-string\">\" in not in the results\"</span>);<br>                                assert.equal(_file.name, _filename);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">50</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "8866e153-0e7a-4f93-b3ed-5cecb02d8c54",
                "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
                "skipped": false
              },
              {
                "title": "is in the database",
                "fullTitle": "Feature - User - Build Demo Project Support:  List of files for build is in the database",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> i, checksumAndFilename, checksum, filename, fileList, file, _i2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            assert(fs.existsSync(demoProjectConf.fullDatapath), <span class=\"hljs-string\">\"missing test datafile dir \"</span> + demoProjectConf.fullDatapath);<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context5.next = <span class=\"hljs-number\">19</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumAndFilename = helper.filesDescriptions()[i];<br>                            checksum = checksumAndFilename[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumAndFilename[<span class=\"hljs-number\">1</span>];<br>                            _context5.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getAllByChecksum(checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            fileList = _context5.sent;<br>                            file = <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i2 = <span class=\"hljs-number\">0</span>; _i2 &lt; fileList.length; _i2++) {<br>                                <span class=\"hljs-keyword\">if</span> (!fileList[_i2].usesid) file = fileList[_i2];<br>                            }<br>                            assert(file, <span class=\"hljs-string\">\"Missing original file for \"</span> + filename);<br>                            _context5.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            file = _context5.sent;<br>                            assert(file.name == filename, <span class=\"hljs-string\">\"Filename for file by checksum for filename = \"</span> + filename + <span class=\"hljs-string\">\"; with checksum = \"</span> + checksum + <span class=\"hljs-string\">\"; expected \"</span> + filename + <span class=\"hljs-string\">\" but found \"</span> + file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            i++;<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "d3cfaa9a-d5dc-40a0-bfec-3debf5413fb0",
                "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
            "uuid": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
            "passes": [
              {
                "title": "exists in folder",
                "fullTitle": "Feature - User - Build Demo Project Support:  List of files for build exists in folder",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> i, checksumAndFilename, expectedChecksum, filename, path, checksum;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            assert(fs.existsSync(demoProjectConf.fullDatapath), <span class=\"hljs-string\">\"missing test datafile dir \"</span> + demoProjectConf.fullDatapath);<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context3.next = <span class=\"hljs-number\">15</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumAndFilename = helper.filesDescriptions()[i];<br>                            expectedChecksum = checksumAndFilename[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumAndFilename[<span class=\"hljs-number\">1</span>];<br>                            path = demoProjectConf.fullDatapath + <span class=\"hljs-string\">'/'</span> + filename;<br>                            assert(fs.existsSync(path), <span class=\"hljs-string\">\"missing test datafile \"</span> + demoProjectConf.fullDatapath + <span class=\"hljs-string\">\"/\"</span> + filename);<br>                            _context3.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> md5File(path);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            checksum = _context3.sent;<br>                            assert(expectedChecksum == checksum, <span class=\"hljs-string\">\"Checksums should be equal for file: \"</span> + filename + <span class=\"hljs-string\">\"; but expected \"</span> + expectedChecksum + <span class=\"hljs-string\">\" and got \"</span> + checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            i++;<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "dbda2056-9cba-4b2b-a84b-4db2d36d0372",
                "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
                "skipped": false
              },
              {
                "title": "can be inserted in database",
                "fullTitle": "Feature - User - Build Demo Project Support:  List of files for build can be inserted in database",
                "timedOut": false,
                "duration": 1320,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, projectName, attrs, ret, project, top_directory, tempDir, fileResults, fileCount, i, checksumFilenameAndMimetype, expectedChecksum, filename, mimetype, path, checksum, stats, fileSizeInBytes, source, args, file, _i, _checksumFilenameAndMimetype, _expectedChecksum, _filename, _file;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            projectName = random_name();<br>                            attrs = {<br>                                name: projectName,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            assert.equal(projectName, project.name);<br>                            assert.equal(user.id, project.owner);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            top_directory = _context4.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                            tempDir = os.tmpdir();<br>                            fileResults = {};<br>                            fileCount = <span class=\"hljs-number\">0</span>;<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context4.next = <span class=\"hljs-number\">49</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumFilenameAndMimetype = helper.filesDescriptions()[i];<br>                            expectedChecksum = checksumFilenameAndMimetype[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumFilenameAndMimetype[<span class=\"hljs-number\">1</span>];<br>                            mimetype = checksumFilenameAndMimetype[<span class=\"hljs-number\">2</span>];<br>                            path = demoProjectConf.fullDatapath + <span class=\"hljs-string\">'/'</span> + filename;<br>                            assert(fs.existsSync(path), <span class=\"hljs-string\">\"missing test datafile \"</span> + demoProjectConf.fullDatapath + <span class=\"hljs-string\">\"/\"</span> + filename);<br>                            _context4.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> md5File(path);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            checksum = _context4.sent;<br>                            assert(expectedChecksum == checksum, <span class=\"hljs-string\">\"Checksums should be equal for file: \"</span> + filename + <span class=\"hljs-string\">\"; but expected \"</span> + expectedChecksum + <span class=\"hljs-string\">\" and got \"</span> + checksum);<br>                            stats = fs.statSync(path);<br>                            fileSizeInBytes = stats.size;<br>                            _context4.next = <span class=\"hljs-number\">36</span>;<br>                            <span class=\"hljs-keyword\">return</span> copyOne(path, tempDir);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                            source = _context4.sent;<br>                            path = source.path;<br>                            args = {<br>                                name: filename,<br>                                checksum: checksum,<br>                                mediatype: fileUtils.mediaTypeDescriptionsFromMime(mimetype),<br>                                filesize: fileSizeInBytes,<br>                                filepath: path<br>                            };<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.ingestSingleLocalFile(project.id, top_directory.id, user.id, args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            file = _context4.sent;<br>                            should.exist(file);<br>                            assert.equal(file.name, filename);<br>                            assert.equal(file.checksum, checksum);<br>                            fileResults[file.checksum] = file;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            i++;<br>                            _context4.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            <span class=\"hljs-keyword\">for</span> (_i = <span class=\"hljs-number\">0</span>; _i &lt; helper.filesDescriptions().length; _i++) {<br>                                _checksumFilenameAndMimetype = helper.filesDescriptions()[_i];<br>                                _expectedChecksum = _checksumFilenameAndMimetype[<span class=\"hljs-number\">0</span>];<br>                                _filename = _checksumFilenameAndMimetype[<span class=\"hljs-number\">1</span>];<br>                                _file = fileResults[_expectedChecksum];<br>                                should.exist(_file, <span class=\"hljs-string\">\"file with filname = \"</span> + _filename + <span class=\"hljs-string\">\" in not in the results\"</span>);<br>                                assert.equal(_file.name, _filename);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">50</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "8866e153-0e7a-4f93-b3ed-5cecb02d8c54",
                "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
                "skipped": false
              },
              {
                "title": "is in the database",
                "fullTitle": "Feature - User - Build Demo Project Support:  List of files for build is in the database",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> i, checksumAndFilename, checksum, filename, fileList, file, _i2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            assert(fs.existsSync(demoProjectConf.fullDatapath), <span class=\"hljs-string\">\"missing test datafile dir \"</span> + demoProjectConf.fullDatapath);<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context5.next = <span class=\"hljs-number\">19</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumAndFilename = helper.filesDescriptions()[i];<br>                            checksum = checksumAndFilename[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumAndFilename[<span class=\"hljs-number\">1</span>];<br>                            _context5.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getAllByChecksum(checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            fileList = _context5.sent;<br>                            file = <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i2 = <span class=\"hljs-number\">0</span>; _i2 &lt; fileList.length; _i2++) {<br>                                <span class=\"hljs-keyword\">if</span> (!fileList[_i2].usesid) file = fileList[_i2];<br>                            }<br>                            assert(file, <span class=\"hljs-string\">\"Missing original file for \"</span> + filename);<br>                            _context5.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            file = _context5.sent;<br>                            assert(file.name == filename, <span class=\"hljs-string\">\"Filename for file by checksum for filename = \"</span> + filename + <span class=\"hljs-string\">\"; with checksum = \"</span> + checksum + <span class=\"hljs-string\">\"; expected \"</span> + filename + <span class=\"hljs-string\">\" but found \"</span> + file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            i++;<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "d3cfaa9a-d5dc-40a0-bfec-3debf5413fb0",
                "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1494
          },
          {
            "title": "Build Demo Project helper supporting functions",
            "suites": [],
            "tests": [
              {
                "title": "checkes for missing files in folder",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper supporting functions checkes for missing files in folder",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInFolder(demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            missingFiles = _context6.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "7e3fa941-5419-4723-9636-ba5b0c70926d",
                "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
                "skipped": false
              },
              {
                "title": "adds all files to top dir of a test Demo Project",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper supporting functions adds all files to top dir of a test Demo Project",
                "timedOut": false,
                "duration": 1375,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, projectName, attrs, ret, project, files, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context7.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context7.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            projectName = random_name();<br>                            attrs = {<br>                                name: projectName,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context7.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context7.sent;<br>                            project = ret.val;<br>                            assert.equal(projectName, project.name);<br>                            assert.equal(user.id, project.owner);<br>                            _context7.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            _context7.next = <span class=\"hljs-number\">16</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            files = _context7.sent;<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context7.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            missingFiles = _context7.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "9578f633-2c8e-46f6-908b-425483e1563a",
                "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
                "skipped": false
              },
              {
                "title": "create a table of all templates",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper supporting functions create a table of all templates",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> table;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context8.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.makeTemplateTable();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            table = _context8.sent;<br>                            assert.isOk(table, <span class=\"hljs-string\">\"table is undefined\"</span>);<br>                            assert(!_.isEmpty(table), <span class=\"hljs-string\">\"table is empty\"</span>);<br>                            assert.isOk(table[demoProjectConf.createSamplesTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.createSamplesTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.sectioningTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.sectioningTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.ebsdTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.ebsdTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.epmaTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.epmaTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "6bc5dadb-0351-41a1-ac29-e31414e97706",
                "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
            "uuid": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
            "passes": [
              {
                "title": "checkes for missing files in folder",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper supporting functions checkes for missing files in folder",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInFolder(demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            missingFiles = _context6.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "7e3fa941-5419-4723-9636-ba5b0c70926d",
                "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
                "skipped": false
              },
              {
                "title": "adds all files to top dir of a test Demo Project",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper supporting functions adds all files to top dir of a test Demo Project",
                "timedOut": false,
                "duration": 1375,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, projectName, attrs, ret, project, files, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context7.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context7.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            projectName = random_name();<br>                            attrs = {<br>                                name: projectName,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context7.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context7.sent;<br>                            project = ret.val;<br>                            assert.equal(projectName, project.name);<br>                            assert.equal(user.id, project.owner);<br>                            _context7.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            _context7.next = <span class=\"hljs-number\">16</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            files = _context7.sent;<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context7.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            missingFiles = _context7.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "9578f633-2c8e-46f6-908b-425483e1563a",
                "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
                "skipped": false
              },
              {
                "title": "create a table of all templates",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper supporting functions create a table of all templates",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> table;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context8.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.makeTemplateTable();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            table = _context8.sent;<br>                            assert.isOk(table, <span class=\"hljs-string\">\"table is undefined\"</span>);<br>                            assert(!_.isEmpty(table), <span class=\"hljs-string\">\"table is empty\"</span>);<br>                            assert.isOk(table[demoProjectConf.createSamplesTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.createSamplesTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.sectioningTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.sectioningTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.ebsdTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.ebsdTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.epmaTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.epmaTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "6bc5dadb-0351-41a1-ac29-e31414e97706",
                "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1443
          },
          {
            "title": "Build Demo Project helper main functions",
            "suites": [],
            "tests": [
              {
                "title": "demo project test user exists",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions demo project test user exists",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context9.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            assert.equal(user.name, demoProjectTestUserId);<br>                            assert.equal(user.apikey, demoProjectTestUserKey);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "8adc94fb-4d5e-40aa-b1fa-b39beeaf1a31",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the Demo Project",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the Demo Project",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10$</span>(<span class=\"hljs-params\">_context10</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context10.prev = _context10.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context10.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context10.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            <span class=\"hljs-comment\">// Note create project returns the project if it already exists, by name</span><br>                            <span class=\"hljs-comment\">// It does not create a duplicate!</span><br>                            _context10.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context10.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.isNotNull(project, <span class=\"hljs-string\">\"project is not null\"</span>);<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            assert(project.description.includes(demoProjectConf.demoProjectDescription)); <span class=\"hljs-comment\">// may have been turned into html!!</span><br>                            assert.equal(project.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context10.stop();<br>                    }<br>                }<br>            }, _callee10, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "e48fba7c-92f7-468d-a132-5a66128bd639",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the Demo Experiment",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the Demo Experiment",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11$</span>(<span class=\"hljs-params\">_context11</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context11.prev = _context11.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context11.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context11.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context11.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context11.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context11.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            valOrError = _context11.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.isNotNull(experiment, <span class=\"hljs-string\">\"experiment is not null\"</span>);<br>                            assert.equal(experiment.otype, <span class=\"hljs-string\">\"experiment\"</span>);<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            assert(experiment.description.includes(demoProjectConf.demoProjectExperimentDescription)); <span class=\"hljs-comment\">// may have been turned into html!!</span><br>                            assert.equal(experiment.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context11.stop();<br>                    }<br>                }<br>            }, _callee11, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "0701ed1a-74d2-4995-9dce-e3a01f3c507a",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create a Demo Process",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create a Demo Process",
                "timedOut": false,
                "duration": 198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processData, processName, templateId, process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12$</span>(<span class=\"hljs-params\">_context12</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context12.prev = _context12.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context12.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context12.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context12.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context12.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            processData = demoProjectConf.processesData[<span class=\"hljs-number\">0</span>];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context12.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            assert.equal(process.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                            assert.equal(process.name, processName);<br>                            assert.equal(process.template_id, templateId);<br>                            assert.equal(process.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context12.stop();<br>                    }<br>                }<br>            }, _callee12, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "bcbaf54c-0fcb-4b76-ad08-d754805699f2",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create all Demo Processes",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create all Demo Processes",
                "timedOut": false,
                "duration": 889,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, templateId, _process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13$</span>(<span class=\"hljs-params\">_context13</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context13.prev = _context13.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context13.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context13.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context13.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context13.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context13.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                templateId = processData.templateId;<br>                                _process = processes[i];<br>                                assert.equal(_process.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process.name, processName);<br>                                assert.equal(_process.template_id, templateId);<br>                                assert.equal(_process.owner, demoProjectTestUserId);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context13.stop();<br>                    }<br>                }<br>            }, _callee13, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "71b2a8d7-b05b-449d-b83d-19c139c31467",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the output samples for a given Process",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the output samples for a given Process",
                "timedOut": false,
                "duration": 416,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, mapEntry, processData, processName, templateId, process, sampleIndexList, sampleNames, i, samples, _i3, sample, name;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14$</span>(<span class=\"hljs-params\">_context14</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context14.prev = _context14.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context14.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context14.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context14.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context14.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            mapEntry = demoProjectConf.outputSampleIndexMap[<span class=\"hljs-number\">2</span>];<br>                            processData = demoProjectConf.processesData[mapEntry.processIndex];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context14.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleNames = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleIndexList.length; i++) {<br>                                sampleNames.push(demoProjectConf.sampleNameData[sampleIndexList[i]]);<br>                            }<br>                            _context14.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindProcessOutputSamples(project, experiment, process, sampleNames);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindProcessOutputSamples: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, sampleNames.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i3 = <span class=\"hljs-number\">0</span>; _i3 &lt; sampleNames.length; _i3++) {<br>                                sample = samples[_i3];<br>                                name = sampleNames[_i3];<br>                                assert.equal(name, sample.name);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context14.stop();<br>                    }<br>                }<br>            }, _callee14, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "15ac10cd-d56f-4116-82a6-76ef2dd9af88",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the output samples for all Process",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the output samples for all Process",
                "timedOut": false,
                "duration": 402,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process2, samples, _i4, sample, name;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15$</span>(<span class=\"hljs-params\">_context15</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context15.prev = _context15.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context15.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context15.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context15.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context15.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context15.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process2 = processes[i];<br>                                assert.equal(_process2.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process2.name, processName);<br>                            }<br>                            _context15.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i4 = <span class=\"hljs-number\">0</span>; _i4 &lt; demoProjectConf.sampleNameData.length; _i4++) {<br>                                sample = samples[_i4];<br>                                name = demoProjectConf.sampleNameData[_i4];<br>                                assert.equal(name, sample.name);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">32</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context15.stop();<br>                    }<br>                }<br>            }, _callee15, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "4a3547a4-8908-4383-9b7f-a9067698d6ac",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the input samples for a given Process",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the input samples for a given Process",
                "timedOut": false,
                "duration": 330,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process3, samples, mapEntry, process, sampleList, sampleIndexList, inputSampleList, missingSamples;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16$</span>(<span class=\"hljs-params\">_context16</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context16.prev = _context16.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context16.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context16.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context16.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context16.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context16.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process3 = processes[i];<br>                                assert.equal(_process3.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process3.name, processName);<br>                            }<br>                            _context16.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            mapEntry = demoProjectConf.inputSampleIndexMap[<span class=\"hljs-number\">0</span>];<br>                            process = processes[mapEntry.processIndex];<br>                            sampleList = [];<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleIndexList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{<br>                                sampleList.push(samples[sampleIndexList[index]]);<br>                            });<br>                            _context16.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindInputSamplesForProcess(project, experiment, process, sampleList);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSampleForProcess: \"</span> + valOrError.error);<br>                            inputSampleList = valOrError.val;<br>                            assert.isOk(inputSampleList);<br>                            assert.lengthOf(inputSampleList, sampleIndexList.length);<br>                            missingSamples = [];<br>                            sampleList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">sample</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = <span class=\"hljs-literal\">false</span>;<br>                                inputSampleList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">inputSample</span>) </span>{<br>                                    <span class=\"hljs-keyword\">if</span> (sample.id == inputSample.id) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                });<br>                                <span class=\"hljs-keyword\">if</span> (!found) {<br>                                    misingSamples.push(sample);<br>                                }<br>                            });<br>                            assert.lengthOf(missingSamples, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"Samples missing from input_samplesa of perocess\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context16.stop();<br>                    }<br>                }<br>            }, _callee16, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "13e45c22-3dfb-4abd-bc2c-951f4e7e6a7c",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the input samples for all Processes",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the input samples for all Processes",
                "timedOut": false,
                "duration": 461,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process4, samples, inputSampleListList, _i5, mapEntry, _processName, indexList, inputSampleList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17$</span>(<span class=\"hljs-params\">_context17</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context17.prev = _context17.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context17.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context17.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context17.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context17.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context17.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process4 = processes[i];<br>                                assert.equal(_process4.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process4.name, processName);<br>                            }<br>                            _context17.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            _context17.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindInputSamplesForAllProcesses(project, experiment, processes, samples, demoProjectConf.inputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindInputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            inputSampleListList = valOrError.val;<br>                            assert.isOk(inputSampleListList);<br>                            assert.lengthOf(inputSampleListList, demoProjectConf.inputSampleIndexMap.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i5 = <span class=\"hljs-number\">0</span>; _i5 &lt; inputSampleListList.length; _i5++) {<br>                                mapEntry = demoProjectConf.inputSampleIndexMap[_i5];<br>                                _processName = processes[mapEntry.processIndex].name;<br>                                indexList = mapEntry.sampleIndexList;<br>                                inputSampleList = inputSampleListList[_i5];<br>                                assert.lengthOf(inputSampleList, indexList.length, <span class=\"hljs-string\">\"Missing samples for process with name: \"</span> + _processName);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context17.stop();<br>                    }<br>                }<br>            }, _callee17, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "69c18c4e-4464-47dc-92e7-b90baae4e725",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "add the setup values for a given Process",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions add the setup values for a given Process",
                "timedOut": false,
                "duration": 583,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process5, _i6, _processData, _processName2, _process6, processIndex, process, templateId, templateTable, template, templatePropertyList, templetPropertyTable, processSetupPropertyList, processSetupTable, valuesForSetup, args, updatedProcess, updatedProperties, _i7, probe, updatedPropertyTable;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18$</span>(<span class=\"hljs-params\">_context18</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context18.prev = _context18.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context18.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context18.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context18.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context18.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context18.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process5 = processes[i];<br>                                assert.equal(_process5.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process5.name, processName);<br>                            }<br>                            <span class=\"hljs-comment\">// Note: refresh process list. If they were created for the first time on the above call, then the</span><br>                            <span class=\"hljs-comment\">// body of the returned process is not sufficently decorated to support inserting properties;</span><br>                            <span class=\"hljs-comment\">// however, on refresh it is. Needs to be investigated.</span><br>                            _context18.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i6 = <span class=\"hljs-number\">0</span>; _i6 &lt; demoProjectConf.processesData.length; _i6++) {<br>                                _processData = demoProjectConf.processesData[_i6];<br>                                _processName2 = _processData.name;<br>                                _process6 = processes[_i6];<br>                                assert.equal(_process6.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process6.name, _processName2);<br>                            }<br>                            processIndex = <span class=\"hljs-number\">0</span>;<br>                            process = processes[processIndex];<br>                            templateId = process[<span class=\"hljs-string\">'template_id'</span>];<br>                            _context18.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.makeTemplateTable();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            templateTable = _context18.sent;<br>                            template = templateTable[templateId];<br>                            templatePropertyList = template.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            templetPropertyTable = {};<br>                            templatePropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                templetPropertyTable[property.attribute] = property;<br>                            });<br>                            processSetupPropertyList = process.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            processSetupTable = {};<br>                            processSetupPropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                processSetupTable[property.attribute] = property;<br>                            });<br>                            assert.lengthOf(templatePropertyList, processSetupPropertyList.length, <span class=\"hljs-string\">\"Lengths of property-list in process and template should match\"</span>);<br>                            processSetupPropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">check</span>) </span>{<br>                                assert.ok(templetPropertyTable[check.attribute], <span class=\"hljs-string\">\"unexpected property attribute in process: \"</span> + check.attribute);<br>                                assert.equal(templetPropertyTable[check.attribute].otype, check.otype, <span class=\"hljs-string\">\"Type mismatch for property with attribute: \"</span> + check.attribute);<br>                            });<br>                            valuesForSetup = demoProjectConf.processesData[processIndex].properties;<br>                            args = [];<br>                            valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> property = processSetupTable[setupValue.attribute];<br>                                <span class=\"hljs-keyword\">if</span> (property) {<br>                                    property.setup_attribute = <span class=\"hljs-string\">\"instrument\"</span>;<br>                                    property.value = setupValue.value;<br>                                    <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                        property.unit = setupValue.unit;<br>                                    }<br>                                    args.push(property);<br>                                } <span class=\"hljs-keyword\">else</span> {<br>                                    assert.fail(<span class=\"hljs-string\">\"Template is missing expected attribute: \"</span> + setupValue.attribute);<br>                                }<br>                            });<br>                            _context18.next = <span class=\"hljs-number\">52</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcessSetupProperties(project, experiment, process, args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">52</span>:<br>                            valOrError = _context18.sent;<br>                            <span class=\"hljs-keyword\">if</span> (valOrError.error) {<br>                                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"           Error expanded from setup properties: \"</span>, (<span class=\"hljs-number\">0</span>, _stringify2.default)(valOrError.error));<br>                            }<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoSetupProperties: \"</span> + valOrError.error);<br>                            updatedProcess = valOrError.val;<br>                            assert.equal(process.id, updatedProcess.id, <span class=\"hljs-string\">'Updated process for \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                            updatedProperties = updatedProcess.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            _context18.next = <span class=\"hljs-number\">60</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">60</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i7 = <span class=\"hljs-number\">0</span>; _i7 &lt; demoProjectConf.processesData.length; _i7++) {<br>                                probe = processes[_i7];<br>                                <span class=\"hljs-keyword\">if</span> (probe.id == process.id) {<br>                                    updatedProcess = probe;<br>                                    updatedProperties = probe.setup[<span class=\"hljs-number\">0</span>].properties;<br>                                }<br>                            }<br>                            assert.equal(process.id, updatedProcess.id, <span class=\"hljs-string\">'Updated process for \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                            updatedPropertyTable = {};<br>                            updatedProperties.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                updatedPropertyTable[property.attribute] = property;<br>                            });<br>                            valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> property = updatedPropertyTable[setupValue.attribute];<br>                                <span class=\"hljs-keyword\">if</span> (property) {<br>                                    <span class=\"hljs-keyword\">if</span> (property.value.name) {<br>                                        assert.ok(property.value.value);<br>                                        assert.ok(setupValue.value.name);<br>                                        assert.ok(setupValue.value.value);<br>                                        assert.equal(property.value.name, setupValue.value.name);<br>                                        assert.equal(property.value.value, setupValue.value.value);<br>                                    } <span class=\"hljs-keyword\">else</span> {<br>                                        assert.equal(property.value, setupValue.value, <span class=\"hljs-string\">\"Value for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                    }<br>                                    <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                        assert.equal(property.unit, setupValue.unit, <span class=\"hljs-string\">\"Unit for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                    }<br>                                } <span class=\"hljs-keyword\">else</span> {<br>                                    assert.fail(<span class=\"hljs-string\">\"Process \"</span> + process.name + <span class=\"hljs-string\">\" is missing expected setup value attribute: \"</span> + setupValue.attribute);<br>                                }<br>                            });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">70</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context18.stop();<br>                    }<br>                }<br>            }, _callee18, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "20bbe880-93fa-46a9-9226-f747229ca348",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "add the setup values for all Processes",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions add the setup values for all Processes",
                "timedOut": false,
                "duration": 912,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee19</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process7, _i8, _processData2, _processName3, _process8, processIndex, updatedProcess, updatedProperties, valuesForSetup;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee19$</span>(<span class=\"hljs-params\">_context19</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context19.prev = _context19.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context19.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context19.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context19.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context19.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context19.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process7 = processes[i];<br>                                assert.equal(_process7.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process7.name, processName);<br>                            }<br>                            <span class=\"hljs-comment\">// Note: refresh process list. If they were created for the first time on the above call, then the</span><br>                            <span class=\"hljs-comment\">// body of the returned process is not sufficently decorated to support inserting properties;</span><br>                            <span class=\"hljs-comment\">// however, on refresh it is. Needs to be investigated.</span><br>                            _context19.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i8 = <span class=\"hljs-number\">0</span>; _i8 &lt; demoProjectConf.processesData.length; _i8++) {<br>                                _processData2 = demoProjectConf.processesData[_i8];<br>                                _processName3 = _processData2.name;<br>                                _process8 = processes[_i8];<br>                                assert.equal(_process8.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process8.name, _processName3);<br>                            }<br>                            _context19.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindSetupPropertiesForAllDemoProcesses(project, experiment, processes);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindSetupPropertiesForAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (processIndex = <span class=\"hljs-number\">0</span>; processIndex &lt; processes.length; processIndex++) {<br>                                updatedProcess = processes[processIndex];<br>                                updatedProperties = updatedProcess.setup[<span class=\"hljs-number\">0</span>].properties;<br>                                valuesForSetup = demoProjectConf.processesData[processIndex].properties;<br>                                <span class=\"hljs-keyword\">if</span> (valuesForSetup &amp;&amp; valuesForSetup.length &lt; <span class=\"hljs-number\">0</span>) {<br>                                    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>                                        <span class=\"hljs-keyword\">var</span> updatedPropertyTable = {};<br>                                        updatedProperties.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                            updatedPropertyTable[property.attribute] = property;<br>                                        });<br>                                        valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                            <span class=\"hljs-keyword\">var</span> property = updatedPropertyTable[setupValue.attribute];<br>                                            <span class=\"hljs-keyword\">if</span> (property) {<br>                                                assert.equal(property.value, setupValue.value, <span class=\"hljs-string\">\"Value for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                                <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"unit - \"</span> + setupValue.attribute + <span class=\"hljs-string\">': '</span> + property.unit);<br>                                                    assert.equal(property.unit, setupValue.unit, <span class=\"hljs-string\">\"Unit for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                                }<br>                                            } <span class=\"hljs-keyword\">else</span> {<br>                                                assert.fail(<span class=\"hljs-string\">\"Process \"</span> + process.name + <span class=\"hljs-string\">\" is missing expected setup value attribute: \"</span> + setupValue.attribute);<br>                                            }<br>                                        });<br>                                    })();<br>                                }<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context19.stop();<br>                    }<br>                }<br>            }, _callee19, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "7156f7ac-0c19-4288-9123-a68176c5b092",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "add the measurement values for the only Process with a measurement",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions add the measurement values for the only Process with a measurement",
                "timedOut": false,
                "duration": 375,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee20</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, mapEntry, processName, templateId, process, sampleIndexList, sampleNames, i, samples, _i9, _sample, name, processData, measurement, sample, updatedProcess, updatedmeasurement, _i10;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee20$</span>(<span class=\"hljs-params\">_context20</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context20.prev = _context20.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context20.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context20.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context20.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context20.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context20.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            mapEntry = demoProjectConf.outputSampleIndexMap[<span class=\"hljs-number\">0</span>];<br>                            processData = demoProjectConf.processesData[mapEntry.processIndex];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context20.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleNames = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleIndexList.length; i++) {<br>                                sampleNames.push(demoProjectConf.sampleNameData[sampleIndexList[i]]);<br>                            }<br>                            _context20.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindProcessOutputSamples(project, experiment, process, sampleNames);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindProcessOutputSamples: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, sampleNames.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i9 = <span class=\"hljs-number\">0</span>; _i9 &lt; sampleNames.length; _i9++) {<br>                                _sample = samples[_i9];<br>                                name = sampleNames[_i9];<br>                                assert.equal(name, _sample.name);<br>                            }<br>                            _context20.next = <span class=\"hljs-number\">42</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">42</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            processData = demoProjectConf.processesData[<span class=\"hljs-number\">0</span>];<br>                            measurement = processData.measurements[<span class=\"hljs-number\">0</span>];<br>                            _context20.next = <span class=\"hljs-number\">49</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.updateMeasurementForProcessSamples(process, measurement);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindMeasurement: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            sample = samples[<span class=\"hljs-number\">0</span>];<br>                            updatedProcess = <span class=\"hljs-literal\">null</span>;<br>                            sample.processes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">probe</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (probe.id == process.id) {<br>                                    updatedProcess = probe;<br>                                }<br>                            });<br>                            updatedmeasurement = updatedProcess.measurements[<span class=\"hljs-number\">0</span>];<br>                            assert.equal(measurement.attribute, updatedmeasurement.attribute);<br>                            assert.equal(measurement.name, updatedmeasurement.name);<br>                            assert.equal(measurement.otype, updatedmeasurement.otype);<br>                            assert.equal(measurement.unit, updatedmeasurement.unit);<br>                            assert.lengthOf(updatedmeasurement.value, measurement.value.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i10 = <span class=\"hljs-number\">0</span>; _i10 &lt; measurement.value.length; _i10++) {<br>                                assert.equal(updatedmeasurement.value[_i10].element, measurement.value[_i10].element);<br>                                assert.equal(updatedmeasurement.value[_i10].value, measurement.value[_i10].value);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">62</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context20.stop();<br>                    }<br>                }<br>            }, _callee20, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "07ab7018-582e-4d7b-ac6c-dc08123a0c51",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find and attache the demo-project files to project",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find and attache the demo-project files to project",
                "timedOut": false,
                "duration": 1350,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee21</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, files, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee21$</span>(<span class=\"hljs-params\">_context21</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context21.prev = _context21.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context21.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context21.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context21.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context21.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context21.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            _context21.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            files = _context21.sent;<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context21.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            missingFiles = _context21.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context21.stop();<br>                    }<br>                }<br>            }, _callee21, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "644afcf2-8900-4e56-8db7-dc7279e909bc",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "add the demo-project files to the experiment",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions add the demo-project files to the experiment",
                "timedOut": false,
                "duration": 886,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee22</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, files, i, checksum, file, processes, updatedProcesses, _loop, processIndex;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee22$</span>(<span class=\"hljs-params\">_context22</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context22.prev = _context22.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context22.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context22.sent;<br>                            _context22.next = <span class=\"hljs-number\">5</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context22.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            files = _context22.sent;<br>                            assert.lengthOf(files, demoProjectConf.checksumsFilesAndMimiTypes.length, <span class=\"hljs-string\">\"Files set is complete\"</span>);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.checksumsFilesAndMimiTypes.length; i++) {<br>                                checksum = demoProjectConf.checksumsFilesAndMimiTypes[i][<span class=\"hljs-number\">0</span>];<br>                                file = files[i];<br>                                assert.equal(checksum, file.checksum, <span class=\"hljs-string\">'Checksum for file: \\''</span> + file.name + <span class=\"hljs-string\">'\\''</span>);<br>                            }<br>                            _context22.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToExperimentProcesses(project, experiment, processes, files);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from addAllFilesToExperimentProcesses: \"</span> + valOrError.error);<br>                            updatedProcesses = valOrError.val;<br>                            assert.lengthOf(updatedProcesses, processes.length, <span class=\"hljs-string\">\"Processes with files added\"</span>);<br>                            _loop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_loop</span>(<span class=\"hljs-params\">processIndex</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> process = updatedProcesses[processIndex];<br>                                <span class=\"hljs-keyword\">var</span> fileIndexes = demoProjectConf.processFileIndexList[processIndex];<br>                                <span class=\"hljs-keyword\">var</span> expectedFiles = [];<br>                                fileIndexes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{<br>                                    expectedFiles.push(files[index]);<br>                                });<br>                                <span class=\"hljs-keyword\">var</span> processFileTable = {};<br>                                <span class=\"hljs-keyword\">var</span> processFiles = process.files;<br>                                processFiles.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>{<br>                                    processFileTable[file.checksum] = file;<br>                                });<br>                                expectedFiles.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">expectedFile</span>) </span>{<br>                                    <span class=\"hljs-keyword\">var</span> matchingFile = processFileTable[expectedFile.checksum];<br>                                    assert.ok(matchingFile, <span class=\"hljs-string\">'Expecting file \\''</span> + expectedFile.name + <span class=\"hljs-string\">'\\' in process \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                                    assert.equal(expectedFile.id, matchingFile.id);<br>                                });<br>                            };<br>                            <span class=\"hljs-keyword\">for</span> (processIndex = <span class=\"hljs-number\">0</span>; processIndex &lt; demoProjectConf.processFileIndexList.length; processIndex++) {<br>                                _loop(processIndex);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context22.stop();<br>                    }<br>                }<br>            }, _callee22, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "03d5a791-8e5f-497e-8974-f7f24de7e760",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
            "uuid": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
            "passes": [
              {
                "title": "demo project test user exists",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions demo project test user exists",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context9.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            assert.equal(user.name, demoProjectTestUserId);<br>                            assert.equal(user.apikey, demoProjectTestUserKey);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "8adc94fb-4d5e-40aa-b1fa-b39beeaf1a31",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the Demo Project",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the Demo Project",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10$</span>(<span class=\"hljs-params\">_context10</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context10.prev = _context10.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context10.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context10.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            <span class=\"hljs-comment\">// Note create project returns the project if it already exists, by name</span><br>                            <span class=\"hljs-comment\">// It does not create a duplicate!</span><br>                            _context10.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context10.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.isNotNull(project, <span class=\"hljs-string\">\"project is not null\"</span>);<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            assert(project.description.includes(demoProjectConf.demoProjectDescription)); <span class=\"hljs-comment\">// may have been turned into html!!</span><br>                            assert.equal(project.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context10.stop();<br>                    }<br>                }<br>            }, _callee10, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "e48fba7c-92f7-468d-a132-5a66128bd639",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the Demo Experiment",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the Demo Experiment",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11$</span>(<span class=\"hljs-params\">_context11</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context11.prev = _context11.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context11.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context11.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context11.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context11.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context11.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            valOrError = _context11.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.isNotNull(experiment, <span class=\"hljs-string\">\"experiment is not null\"</span>);<br>                            assert.equal(experiment.otype, <span class=\"hljs-string\">\"experiment\"</span>);<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            assert(experiment.description.includes(demoProjectConf.demoProjectExperimentDescription)); <span class=\"hljs-comment\">// may have been turned into html!!</span><br>                            assert.equal(experiment.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context11.stop();<br>                    }<br>                }<br>            }, _callee11, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "0701ed1a-74d2-4995-9dce-e3a01f3c507a",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create a Demo Process",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create a Demo Process",
                "timedOut": false,
                "duration": 198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processData, processName, templateId, process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12$</span>(<span class=\"hljs-params\">_context12</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context12.prev = _context12.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context12.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context12.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context12.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context12.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            processData = demoProjectConf.processesData[<span class=\"hljs-number\">0</span>];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context12.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            assert.equal(process.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                            assert.equal(process.name, processName);<br>                            assert.equal(process.template_id, templateId);<br>                            assert.equal(process.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context12.stop();<br>                    }<br>                }<br>            }, _callee12, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "bcbaf54c-0fcb-4b76-ad08-d754805699f2",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create all Demo Processes",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create all Demo Processes",
                "timedOut": false,
                "duration": 889,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, templateId, _process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13$</span>(<span class=\"hljs-params\">_context13</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context13.prev = _context13.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context13.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context13.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context13.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context13.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context13.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                templateId = processData.templateId;<br>                                _process = processes[i];<br>                                assert.equal(_process.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process.name, processName);<br>                                assert.equal(_process.template_id, templateId);<br>                                assert.equal(_process.owner, demoProjectTestUserId);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context13.stop();<br>                    }<br>                }<br>            }, _callee13, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "71b2a8d7-b05b-449d-b83d-19c139c31467",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the output samples for a given Process",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the output samples for a given Process",
                "timedOut": false,
                "duration": 416,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, mapEntry, processData, processName, templateId, process, sampleIndexList, sampleNames, i, samples, _i3, sample, name;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14$</span>(<span class=\"hljs-params\">_context14</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context14.prev = _context14.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context14.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context14.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context14.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context14.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            mapEntry = demoProjectConf.outputSampleIndexMap[<span class=\"hljs-number\">2</span>];<br>                            processData = demoProjectConf.processesData[mapEntry.processIndex];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context14.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleNames = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleIndexList.length; i++) {<br>                                sampleNames.push(demoProjectConf.sampleNameData[sampleIndexList[i]]);<br>                            }<br>                            _context14.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindProcessOutputSamples(project, experiment, process, sampleNames);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindProcessOutputSamples: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, sampleNames.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i3 = <span class=\"hljs-number\">0</span>; _i3 &lt; sampleNames.length; _i3++) {<br>                                sample = samples[_i3];<br>                                name = sampleNames[_i3];<br>                                assert.equal(name, sample.name);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context14.stop();<br>                    }<br>                }<br>            }, _callee14, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "15ac10cd-d56f-4116-82a6-76ef2dd9af88",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the output samples for all Process",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the output samples for all Process",
                "timedOut": false,
                "duration": 402,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process2, samples, _i4, sample, name;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15$</span>(<span class=\"hljs-params\">_context15</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context15.prev = _context15.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context15.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context15.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context15.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context15.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context15.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process2 = processes[i];<br>                                assert.equal(_process2.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process2.name, processName);<br>                            }<br>                            _context15.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i4 = <span class=\"hljs-number\">0</span>; _i4 &lt; demoProjectConf.sampleNameData.length; _i4++) {<br>                                sample = samples[_i4];<br>                                name = demoProjectConf.sampleNameData[_i4];<br>                                assert.equal(name, sample.name);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">32</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context15.stop();<br>                    }<br>                }<br>            }, _callee15, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "4a3547a4-8908-4383-9b7f-a9067698d6ac",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the input samples for a given Process",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the input samples for a given Process",
                "timedOut": false,
                "duration": 330,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process3, samples, mapEntry, process, sampleList, sampleIndexList, inputSampleList, missingSamples;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16$</span>(<span class=\"hljs-params\">_context16</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context16.prev = _context16.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context16.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context16.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context16.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context16.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context16.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process3 = processes[i];<br>                                assert.equal(_process3.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process3.name, processName);<br>                            }<br>                            _context16.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            mapEntry = demoProjectConf.inputSampleIndexMap[<span class=\"hljs-number\">0</span>];<br>                            process = processes[mapEntry.processIndex];<br>                            sampleList = [];<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleIndexList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{<br>                                sampleList.push(samples[sampleIndexList[index]]);<br>                            });<br>                            _context16.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindInputSamplesForProcess(project, experiment, process, sampleList);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSampleForProcess: \"</span> + valOrError.error);<br>                            inputSampleList = valOrError.val;<br>                            assert.isOk(inputSampleList);<br>                            assert.lengthOf(inputSampleList, sampleIndexList.length);<br>                            missingSamples = [];<br>                            sampleList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">sample</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = <span class=\"hljs-literal\">false</span>;<br>                                inputSampleList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">inputSample</span>) </span>{<br>                                    <span class=\"hljs-keyword\">if</span> (sample.id == inputSample.id) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                });<br>                                <span class=\"hljs-keyword\">if</span> (!found) {<br>                                    misingSamples.push(sample);<br>                                }<br>                            });<br>                            assert.lengthOf(missingSamples, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"Samples missing from input_samplesa of perocess\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context16.stop();<br>                    }<br>                }<br>            }, _callee16, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "13e45c22-3dfb-4abd-bc2c-951f4e7e6a7c",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find or create the input samples for all Processes",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find or create the input samples for all Processes",
                "timedOut": false,
                "duration": 461,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process4, samples, inputSampleListList, _i5, mapEntry, _processName, indexList, inputSampleList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17$</span>(<span class=\"hljs-params\">_context17</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context17.prev = _context17.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context17.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context17.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context17.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context17.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context17.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process4 = processes[i];<br>                                assert.equal(_process4.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process4.name, processName);<br>                            }<br>                            _context17.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            _context17.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindInputSamplesForAllProcesses(project, experiment, processes, samples, demoProjectConf.inputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindInputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            inputSampleListList = valOrError.val;<br>                            assert.isOk(inputSampleListList);<br>                            assert.lengthOf(inputSampleListList, demoProjectConf.inputSampleIndexMap.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i5 = <span class=\"hljs-number\">0</span>; _i5 &lt; inputSampleListList.length; _i5++) {<br>                                mapEntry = demoProjectConf.inputSampleIndexMap[_i5];<br>                                _processName = processes[mapEntry.processIndex].name;<br>                                indexList = mapEntry.sampleIndexList;<br>                                inputSampleList = inputSampleListList[_i5];<br>                                assert.lengthOf(inputSampleList, indexList.length, <span class=\"hljs-string\">\"Missing samples for process with name: \"</span> + _processName);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context17.stop();<br>                    }<br>                }<br>            }, _callee17, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "69c18c4e-4464-47dc-92e7-b90baae4e725",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "add the setup values for a given Process",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions add the setup values for a given Process",
                "timedOut": false,
                "duration": 583,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process5, _i6, _processData, _processName2, _process6, processIndex, process, templateId, templateTable, template, templatePropertyList, templetPropertyTable, processSetupPropertyList, processSetupTable, valuesForSetup, args, updatedProcess, updatedProperties, _i7, probe, updatedPropertyTable;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18$</span>(<span class=\"hljs-params\">_context18</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context18.prev = _context18.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context18.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context18.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context18.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context18.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context18.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process5 = processes[i];<br>                                assert.equal(_process5.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process5.name, processName);<br>                            }<br>                            <span class=\"hljs-comment\">// Note: refresh process list. If they were created for the first time on the above call, then the</span><br>                            <span class=\"hljs-comment\">// body of the returned process is not sufficently decorated to support inserting properties;</span><br>                            <span class=\"hljs-comment\">// however, on refresh it is. Needs to be investigated.</span><br>                            _context18.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i6 = <span class=\"hljs-number\">0</span>; _i6 &lt; demoProjectConf.processesData.length; _i6++) {<br>                                _processData = demoProjectConf.processesData[_i6];<br>                                _processName2 = _processData.name;<br>                                _process6 = processes[_i6];<br>                                assert.equal(_process6.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process6.name, _processName2);<br>                            }<br>                            processIndex = <span class=\"hljs-number\">0</span>;<br>                            process = processes[processIndex];<br>                            templateId = process[<span class=\"hljs-string\">'template_id'</span>];<br>                            _context18.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.makeTemplateTable();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            templateTable = _context18.sent;<br>                            template = templateTable[templateId];<br>                            templatePropertyList = template.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            templetPropertyTable = {};<br>                            templatePropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                templetPropertyTable[property.attribute] = property;<br>                            });<br>                            processSetupPropertyList = process.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            processSetupTable = {};<br>                            processSetupPropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                processSetupTable[property.attribute] = property;<br>                            });<br>                            assert.lengthOf(templatePropertyList, processSetupPropertyList.length, <span class=\"hljs-string\">\"Lengths of property-list in process and template should match\"</span>);<br>                            processSetupPropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">check</span>) </span>{<br>                                assert.ok(templetPropertyTable[check.attribute], <span class=\"hljs-string\">\"unexpected property attribute in process: \"</span> + check.attribute);<br>                                assert.equal(templetPropertyTable[check.attribute].otype, check.otype, <span class=\"hljs-string\">\"Type mismatch for property with attribute: \"</span> + check.attribute);<br>                            });<br>                            valuesForSetup = demoProjectConf.processesData[processIndex].properties;<br>                            args = [];<br>                            valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> property = processSetupTable[setupValue.attribute];<br>                                <span class=\"hljs-keyword\">if</span> (property) {<br>                                    property.setup_attribute = <span class=\"hljs-string\">\"instrument\"</span>;<br>                                    property.value = setupValue.value;<br>                                    <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                        property.unit = setupValue.unit;<br>                                    }<br>                                    args.push(property);<br>                                } <span class=\"hljs-keyword\">else</span> {<br>                                    assert.fail(<span class=\"hljs-string\">\"Template is missing expected attribute: \"</span> + setupValue.attribute);<br>                                }<br>                            });<br>                            _context18.next = <span class=\"hljs-number\">52</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcessSetupProperties(project, experiment, process, args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">52</span>:<br>                            valOrError = _context18.sent;<br>                            <span class=\"hljs-keyword\">if</span> (valOrError.error) {<br>                                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"           Error expanded from setup properties: \"</span>, (<span class=\"hljs-number\">0</span>, _stringify2.default)(valOrError.error));<br>                            }<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoSetupProperties: \"</span> + valOrError.error);<br>                            updatedProcess = valOrError.val;<br>                            assert.equal(process.id, updatedProcess.id, <span class=\"hljs-string\">'Updated process for \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                            updatedProperties = updatedProcess.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            _context18.next = <span class=\"hljs-number\">60</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">60</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i7 = <span class=\"hljs-number\">0</span>; _i7 &lt; demoProjectConf.processesData.length; _i7++) {<br>                                probe = processes[_i7];<br>                                <span class=\"hljs-keyword\">if</span> (probe.id == process.id) {<br>                                    updatedProcess = probe;<br>                                    updatedProperties = probe.setup[<span class=\"hljs-number\">0</span>].properties;<br>                                }<br>                            }<br>                            assert.equal(process.id, updatedProcess.id, <span class=\"hljs-string\">'Updated process for \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                            updatedPropertyTable = {};<br>                            updatedProperties.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                updatedPropertyTable[property.attribute] = property;<br>                            });<br>                            valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> property = updatedPropertyTable[setupValue.attribute];<br>                                <span class=\"hljs-keyword\">if</span> (property) {<br>                                    <span class=\"hljs-keyword\">if</span> (property.value.name) {<br>                                        assert.ok(property.value.value);<br>                                        assert.ok(setupValue.value.name);<br>                                        assert.ok(setupValue.value.value);<br>                                        assert.equal(property.value.name, setupValue.value.name);<br>                                        assert.equal(property.value.value, setupValue.value.value);<br>                                    } <span class=\"hljs-keyword\">else</span> {<br>                                        assert.equal(property.value, setupValue.value, <span class=\"hljs-string\">\"Value for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                    }<br>                                    <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                        assert.equal(property.unit, setupValue.unit, <span class=\"hljs-string\">\"Unit for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                    }<br>                                } <span class=\"hljs-keyword\">else</span> {<br>                                    assert.fail(<span class=\"hljs-string\">\"Process \"</span> + process.name + <span class=\"hljs-string\">\" is missing expected setup value attribute: \"</span> + setupValue.attribute);<br>                                }<br>                            });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">70</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context18.stop();<br>                    }<br>                }<br>            }, _callee18, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "20bbe880-93fa-46a9-9226-f747229ca348",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "add the setup values for all Processes",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions add the setup values for all Processes",
                "timedOut": false,
                "duration": 912,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee19</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process7, _i8, _processData2, _processName3, _process8, processIndex, updatedProcess, updatedProperties, valuesForSetup;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee19$</span>(<span class=\"hljs-params\">_context19</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context19.prev = _context19.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context19.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context19.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context19.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context19.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context19.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process7 = processes[i];<br>                                assert.equal(_process7.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process7.name, processName);<br>                            }<br>                            <span class=\"hljs-comment\">// Note: refresh process list. If they were created for the first time on the above call, then the</span><br>                            <span class=\"hljs-comment\">// body of the returned process is not sufficently decorated to support inserting properties;</span><br>                            <span class=\"hljs-comment\">// however, on refresh it is. Needs to be investigated.</span><br>                            _context19.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i8 = <span class=\"hljs-number\">0</span>; _i8 &lt; demoProjectConf.processesData.length; _i8++) {<br>                                _processData2 = demoProjectConf.processesData[_i8];<br>                                _processName3 = _processData2.name;<br>                                _process8 = processes[_i8];<br>                                assert.equal(_process8.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process8.name, _processName3);<br>                            }<br>                            _context19.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindSetupPropertiesForAllDemoProcesses(project, experiment, processes);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindSetupPropertiesForAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (processIndex = <span class=\"hljs-number\">0</span>; processIndex &lt; processes.length; processIndex++) {<br>                                updatedProcess = processes[processIndex];<br>                                updatedProperties = updatedProcess.setup[<span class=\"hljs-number\">0</span>].properties;<br>                                valuesForSetup = demoProjectConf.processesData[processIndex].properties;<br>                                <span class=\"hljs-keyword\">if</span> (valuesForSetup &amp;&amp; valuesForSetup.length &lt; <span class=\"hljs-number\">0</span>) {<br>                                    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>                                        <span class=\"hljs-keyword\">var</span> updatedPropertyTable = {};<br>                                        updatedProperties.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                            updatedPropertyTable[property.attribute] = property;<br>                                        });<br>                                        valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                            <span class=\"hljs-keyword\">var</span> property = updatedPropertyTable[setupValue.attribute];<br>                                            <span class=\"hljs-keyword\">if</span> (property) {<br>                                                assert.equal(property.value, setupValue.value, <span class=\"hljs-string\">\"Value for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                                <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"unit - \"</span> + setupValue.attribute + <span class=\"hljs-string\">': '</span> + property.unit);<br>                                                    assert.equal(property.unit, setupValue.unit, <span class=\"hljs-string\">\"Unit for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                                }<br>                                            } <span class=\"hljs-keyword\">else</span> {<br>                                                assert.fail(<span class=\"hljs-string\">\"Process \"</span> + process.name + <span class=\"hljs-string\">\" is missing expected setup value attribute: \"</span> + setupValue.attribute);<br>                                            }<br>                                        });<br>                                    })();<br>                                }<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context19.stop();<br>                    }<br>                }<br>            }, _callee19, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "7156f7ac-0c19-4288-9123-a68176c5b092",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "add the measurement values for the only Process with a measurement",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions add the measurement values for the only Process with a measurement",
                "timedOut": false,
                "duration": 375,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee20</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, mapEntry, processName, templateId, process, sampleIndexList, sampleNames, i, samples, _i9, _sample, name, processData, measurement, sample, updatedProcess, updatedmeasurement, _i10;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee20$</span>(<span class=\"hljs-params\">_context20</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context20.prev = _context20.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context20.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context20.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context20.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context20.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context20.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            mapEntry = demoProjectConf.outputSampleIndexMap[<span class=\"hljs-number\">0</span>];<br>                            processData = demoProjectConf.processesData[mapEntry.processIndex];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context20.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleNames = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleIndexList.length; i++) {<br>                                sampleNames.push(demoProjectConf.sampleNameData[sampleIndexList[i]]);<br>                            }<br>                            _context20.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindProcessOutputSamples(project, experiment, process, sampleNames);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindProcessOutputSamples: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, sampleNames.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i9 = <span class=\"hljs-number\">0</span>; _i9 &lt; sampleNames.length; _i9++) {<br>                                _sample = samples[_i9];<br>                                name = sampleNames[_i9];<br>                                assert.equal(name, _sample.name);<br>                            }<br>                            _context20.next = <span class=\"hljs-number\">42</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">42</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            processData = demoProjectConf.processesData[<span class=\"hljs-number\">0</span>];<br>                            measurement = processData.measurements[<span class=\"hljs-number\">0</span>];<br>                            _context20.next = <span class=\"hljs-number\">49</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.updateMeasurementForProcessSamples(process, measurement);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindMeasurement: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            sample = samples[<span class=\"hljs-number\">0</span>];<br>                            updatedProcess = <span class=\"hljs-literal\">null</span>;<br>                            sample.processes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">probe</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (probe.id == process.id) {<br>                                    updatedProcess = probe;<br>                                }<br>                            });<br>                            updatedmeasurement = updatedProcess.measurements[<span class=\"hljs-number\">0</span>];<br>                            assert.equal(measurement.attribute, updatedmeasurement.attribute);<br>                            assert.equal(measurement.name, updatedmeasurement.name);<br>                            assert.equal(measurement.otype, updatedmeasurement.otype);<br>                            assert.equal(measurement.unit, updatedmeasurement.unit);<br>                            assert.lengthOf(updatedmeasurement.value, measurement.value.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i10 = <span class=\"hljs-number\">0</span>; _i10 &lt; measurement.value.length; _i10++) {<br>                                assert.equal(updatedmeasurement.value[_i10].element, measurement.value[_i10].element);<br>                                assert.equal(updatedmeasurement.value[_i10].value, measurement.value[_i10].value);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">62</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context20.stop();<br>                    }<br>                }<br>            }, _callee20, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "07ab7018-582e-4d7b-ac6c-dc08123a0c51",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "find and attache the demo-project files to project",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions find and attache the demo-project files to project",
                "timedOut": false,
                "duration": 1350,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee21</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, files, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee21$</span>(<span class=\"hljs-params\">_context21</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context21.prev = _context21.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context21.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context21.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context21.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context21.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context21.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            _context21.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            files = _context21.sent;<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context21.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            missingFiles = _context21.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context21.stop();<br>                    }<br>                }<br>            }, _callee21, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "644afcf2-8900-4e56-8db7-dc7279e909bc",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              },
              {
                "title": "add the demo-project files to the experiment",
                "fullTitle": "Feature - User - Build Demo Project Support:  Build Demo Project helper main functions add the demo-project files to the experiment",
                "timedOut": false,
                "duration": 886,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee22</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, files, i, checksum, file, processes, updatedProcesses, _loop, processIndex;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee22$</span>(<span class=\"hljs-params\">_context22</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context22.prev = _context22.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context22.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context22.sent;<br>                            _context22.next = <span class=\"hljs-number\">5</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context22.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            files = _context22.sent;<br>                            assert.lengthOf(files, demoProjectConf.checksumsFilesAndMimiTypes.length, <span class=\"hljs-string\">\"Files set is complete\"</span>);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.checksumsFilesAndMimiTypes.length; i++) {<br>                                checksum = demoProjectConf.checksumsFilesAndMimiTypes[i][<span class=\"hljs-number\">0</span>];<br>                                file = files[i];<br>                                assert.equal(checksum, file.checksum, <span class=\"hljs-string\">'Checksum for file: \\''</span> + file.name + <span class=\"hljs-string\">'\\''</span>);<br>                            }<br>                            _context22.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToExperimentProcesses(project, experiment, processes, files);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from addAllFilesToExperimentProcesses: \"</span> + valOrError.error);<br>                            updatedProcesses = valOrError.val;<br>                            assert.lengthOf(updatedProcesses, processes.length, <span class=\"hljs-string\">\"Processes with files added\"</span>);<br>                            _loop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_loop</span>(<span class=\"hljs-params\">processIndex</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> process = updatedProcesses[processIndex];<br>                                <span class=\"hljs-keyword\">var</span> fileIndexes = demoProjectConf.processFileIndexList[processIndex];<br>                                <span class=\"hljs-keyword\">var</span> expectedFiles = [];<br>                                fileIndexes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{<br>                                    expectedFiles.push(files[index]);<br>                                });<br>                                <span class=\"hljs-keyword\">var</span> processFileTable = {};<br>                                <span class=\"hljs-keyword\">var</span> processFiles = process.files;<br>                                processFiles.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>{<br>                                    processFileTable[file.checksum] = file;<br>                                });<br>                                expectedFiles.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">expectedFile</span>) </span>{<br>                                    <span class=\"hljs-keyword\">var</span> matchingFile = processFileTable[expectedFile.checksum];<br>                                    assert.ok(matchingFile, <span class=\"hljs-string\">'Expecting file \\''</span> + expectedFile.name + <span class=\"hljs-string\">'\\' in process \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                                    assert.equal(expectedFile.id, matchingFile.id);<br>                                });<br>                            };<br>                            <span class=\"hljs-keyword\">for</span> (processIndex = <span class=\"hljs-number\">0</span>; processIndex &lt; demoProjectConf.processFileIndexList.length; processIndex++) {<br>                                _loop(processIndex);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context22.stop();<br>                    }<br>                }<br>            }, _callee22, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "03d5a791-8e5f-497e-8974-f7f24de7e760",
                "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 14,
            "totalPasses": 14,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6960
          },
          {
            "title": "Complete demo project",
            "suites": [],
            "tests": [
              {
                "title": "buid",
                "fullTitle": "Feature - User - Build Demo Project Support:  Complete demo project buid",
                "timedOut": false,
                "duration": 1930,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee23</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, results, project, experiment, processes, samples, files, i, processData, processName, _process9, _i11, sample, name, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee23$</span>(<span class=\"hljs-params\">_context23</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context23.prev = _context23.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">5000</span>); <span class=\"hljs-comment\">// this test can take up to 5 seconds</span><br>                            _context23.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            user = _context23.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context23.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> buildDemoProject.findOrBuildAllParts(user, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context23.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            results = valOrError.val;<br>                            project = results.project;<br>                            experiment = results.experiment;<br>                            processes = results.processes;<br>                            samples = results.samples;<br>                            files = results.files;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            assert(project.description.includes(demoProjectConf.demoProjectDescription));<br>                            assert.equal(project.owner, demoProjectTestUserId);<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            assert(experiment.description.includes(demoProjectConf.demoProjectExperimentDescription));<br>                            assert.equal(experiment.owner, demoProjectTestUserId);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process9 = processes[i];<br>                                assert.equal(_process9.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process9.name, processName);<br>                            }<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i11 = <span class=\"hljs-number\">0</span>; _i11 &lt; demoProjectConf.sampleNameData.length; _i11++) {<br>                                sample = samples[_i11];<br>                                name = demoProjectConf.sampleNameData[_i11];<br>                                assert.equal(name, sample.name);<br>                            }<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context23.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            missingFiles = _context23.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context23.stop();<br>                    }<br>                }<br>            }, _callee23, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "34aba16d-09c4-4d56-b292-17f3d1a7de92",
                "parentUUID": "c7dd15f6-e338-4a04-b460-e7c5cd84cb6c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
            "uuid": "c7dd15f6-e338-4a04-b460-e7c5cd84cb6c",
            "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
            "passes": [
              {
                "title": "buid",
                "fullTitle": "Feature - User - Build Demo Project Support:  Complete demo project buid",
                "timedOut": false,
                "duration": 1930,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee23</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, results, project, experiment, processes, samples, files, i, processData, processName, _process9, _i11, sample, name, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee23$</span>(<span class=\"hljs-params\">_context23</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context23.prev = _context23.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">5000</span>); <span class=\"hljs-comment\">// this test can take up to 5 seconds</span><br>                            _context23.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            user = _context23.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context23.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> buildDemoProject.findOrBuildAllParts(user, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context23.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            results = valOrError.val;<br>                            project = results.project;<br>                            experiment = results.experiment;<br>                            processes = results.processes;<br>                            samples = results.samples;<br>                            files = results.files;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            assert(project.description.includes(demoProjectConf.demoProjectDescription));<br>                            assert.equal(project.owner, demoProjectTestUserId);<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            assert(experiment.description.includes(demoProjectConf.demoProjectExperimentDescription));<br>                            assert.equal(experiment.owner, demoProjectTestUserId);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process9 = processes[i];<br>                                assert.equal(_process9.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process9.name, processName);<br>                            }<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i11 = <span class=\"hljs-number\">0</span>; _i11 &lt; demoProjectConf.sampleNameData.length; _i11++) {<br>                                sample = samples[_i11];<br>                                name = demoProjectConf.sampleNameData[_i11];<br>                                assert.equal(name, sample.name);<br>                            }<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context23.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            missingFiles = _context23.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context23.stop();<br>                    }<br>                }<br>            }, _callee23, <span class=\"hljs-keyword\">this</span>);",
                "isRoot": false,
                "uuid": "34aba16d-09c4-4d56-b292-17f3d1a7de92",
                "parentUUID": "c7dd15f6-e338-4a04-b460-e7c5cd84cb6c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1930
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
        "uuid": "a677375d-4e96-4964-874a-d22832f08694",
        "fullFile": "/Users/weymouth/working/MaterialsCommons/workspace/src/github.com/materials-commons/materialscommons.org/backend/tests/mcapi/Resource-level/specs/build-demo-project-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "09512dcd-d699-4221-8eec-024668f9759b",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "checks DOI server status - raw",
      "fullTitle": "DOI Request -  checks DOI server status - raw",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "76d30e77-597a-4484-b4ca-aeaa88839f1c",
      "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
      "skipped": false
    },
    {
      "title": "calls function to get DOI server status",
      "fullTitle": "DOI Request -  calls function to get DOI server status",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "f9d1d48f-2d9d-4355-9530-ce4dad5b2f60",
      "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
      "skipped": false
    },
    {
      "title": "creates a test DOI - raw",
      "fullTitle": "DOI Request -  creates a test DOI - raw",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "3632a41e-73c6-4870-adb7-dffef571e85c",
      "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
      "skipped": false
    },
    {
      "title": "mints a new DOI and puts into dataset record",
      "fullTitle": "DOI Request -  mints a new DOI and puts into dataset record",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "f5d5188b-defb-4146-a399-a7ef804511e8",
      "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
      "skipped": false
    },
    {
      "title": "deletes a dataset",
      "fullTitle": "Delete Dataset:  deletes a dataset",
      "timedOut": false,
      "duration": 4982,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, check, dataset_list, dataset, expected_count, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context2.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            check = _context2.sent;<br>                            dataset_list = check.val;<br>                            dataset = dataset_list[<span class=\"hljs-number\">0</span>];<br>                            expected_count = dataset_list.length - <span class=\"hljs-number\">1</span>;<br>                            assert.isFalse(dataset.published);<br>                            _context2.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            results = _context2.sent;<br>                            assert.isTrue(results.val);<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            check = _context2.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "21bb812d-cbe8-458a-80ee-3d98026e1802",
      "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
      "skipped": false
    },
    {
      "title": "does not delete a published dataset",
      "fullTitle": "Delete Dataset:  does not delete a published dataset",
      "timedOut": false,
      "duration": 5412,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, expected_count, results, dataset, check, dataset_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            expected_count = datasetIdList.length;<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            dataset = results.val;<br>                            assert.isOk(dataset.published);<br>                            assert.isTrue(dataset.published);<br>                            assert.equal(dataset.id, datasetId);<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            dataset = results.val;<br>                            assert.isTrue(dataset.published);<br>                            assert.isFalse(!!dataset.doi);<br>                            <span class=\"hljs-comment\">// delete database fails</span><br>                            _context3.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            results = _context3.sent;<br>                            assert.isFalse(results.val);<br>                            _context3.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            check = _context3.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                            _context3.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "acdc07eb-5390-4506-b60a-ba9637b47cd1",
      "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
      "skipped": false
    },
    {
      "title": "does not delete a dataset with an assigned DOI",
      "fullTitle": "Delete Dataset:  does not delete a dataset with an assigned DOI",
      "timedOut": false,
      "duration": 5249,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, expected_count, fakeDOI, status, results, check, dataset_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            expected_count = datasetIdList.length;<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            status = _context4.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete database fails</span><br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            results = _context4.sent;<br>                            assert.isFalse(results.val);<br>                            _context4.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            check = _context4.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                            _context4.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "a5f83e97-9ca1-4be9-90dd-fa54d30c94b9",
      "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
      "skipped": false
    },
    {
      "title": "fetch top level directory from project",
      "fullTitle": "Top level directory fetch top level directory from project",
      "timedOut": false,
      "duration": 147,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project, project_id, top_directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context2.sent;<br>                            project = ret.val;<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            project_list = _context2.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            project_id = project.id;<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            top_directory = _context2.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, found_project.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "9e29e212-d8be-4802-94c5-99b3b92356ca",
      "parentUUID": "dc9e0d01-c58a-4651-b590-d5ba4ce6e760",
      "skipped": false
    },
    {
      "title": "fetch top level directory by id",
      "fullTitle": "Top level directory fetch top level directory by id",
      "timedOut": false,
      "duration": 76,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context3.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context3.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context3.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context3.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                            directory_id = top_directory.id;<br>                            _context3.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            directory = _context3.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "2caad986-dbf8-43b6-bb99-b0e8e490b54e",
      "parentUUID": "dc9e0d01-c58a-4651-b590-d5ba4ce6e760",
      "skipped": false
    },
    {
      "title": "create directory path from top directory as /",
      "fullTitle": "Create directory create directory path from top directory as /",
      "timedOut": false,
      "duration": 182,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context4.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context4.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context4.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "d8d95ef5-a87d-4f1b-9b3a-681413b9fb68",
      "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
      "skipped": false
    },
    {
      "title": "create directory path from top directory as id",
      "fullTitle": "Create directory create directory path from top directory as id",
      "timedOut": false,
      "duration": 210,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context5.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context5.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context5.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context5.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context5.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: top_directory.id,<br>                                path: path<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context5.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "5fc49512-7f25-4053-b4fc-62093643e35d",
      "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
      "skipped": false
    },
    {
      "title": "create directory path from directory as path",
      "fullTitle": "Create directory create directory path from directory as path",
      "timedOut": false,
      "duration": 240,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context6.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context6.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context6.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context6.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context6.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context6.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            from_dir = from_dir + path;<br>                            path = <span class=\"hljs-string\">\"D1/E1\"</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            result = _context6.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "c073ab8e-8d01-4ba2-81af-630f4a90684c",
      "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
      "skipped": false
    },
    {
      "title": "Get all dirs in project and test for empty",
      "fullTitle": "Get directories Get all dirs in project and test for empty",
      "timedOut": false,
      "duration": 184,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context7.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context7.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context7.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context7.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context7.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context7.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context7.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context7.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            _context7.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            dir_list = _context7.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">4</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            _context7.t0 = assert;<br>                            _context7.next = <span class=\"hljs-number\">36</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">0</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                            _context7.t1 = _context7.sent;<br>                            _context7.t0.isFalse.call(_context7.t0, _context7.t1);<br>                            _context7.t2 = assert;<br>                            _context7.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">1</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            _context7.t3 = _context7.sent;<br>                            _context7.t2.isFalse.call(_context7.t2, _context7.t3);<br>                            _context7.t4 = assert;<br>                            _context7.next = <span class=\"hljs-number\">46</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">2</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            _context7.t5 = _context7.sent;<br>                            _context7.t4.isFalse.call(_context7.t4, _context7.t5);<br>                            _context7.t6 = assert;<br>                            _context7.next = <span class=\"hljs-number\">51</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">3</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">51</span>:<br>                            _context7.t7 = _context7.sent;<br>                            _context7.t6.isTrue.call(_context7.t6, _context7.t7);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">53</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "0fa8fdce-a079-4be6-b48b-9aa2a65554a4",
      "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
      "skipped": false
    },
    {
      "title": "Subdir exists and test for empty",
      "fullTitle": "Get directories Subdir exists and test for empty",
      "timedOut": false,
      "duration": 157,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, directory, subdir;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context8.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context8.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context8.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context8.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context8.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context8.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context8.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context8.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            directory = dir_list[<span class=\"hljs-number\">0</span>];<br>                            _context8.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.subdirExists(directory.id, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context8.sent;<br>                            subdir = result[<span class=\"hljs-number\">0</span>];<br>                            assert.equal(subdir.name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(subdir.parent, directory.id);<br>                            _context8.t0 = assert;<br>                            _context8.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            _context8.t1 = _context8.sent;<br>                            _context8.t0.isFalse.call(_context8.t0, _context8.t1);<br>                            _context8.t2 = assert;<br>                            _context8.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(subdir.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context8.t3 = _context8.sent;<br>                            _context8.t2.isTrue.call(_context8.t2, _context8.t3);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "250851bf-aba0-49d8-87e9-5ce2d6e3e543",
      "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
      "skipped": false
    },
    {
      "title": "Get sub-directories as peer_directories",
      "fullTitle": "Get directories Get sub-directories as peer_directories",
      "timedOut": false,
      "duration": 218,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path1, path2, path3, dir_args1, dir_args2, dir_args3, result, dir_list, directory, dir_with_subs, subs, expected, missing;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context9.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context9.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context9.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context9.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context9.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path1 = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            path2 = <span class=\"hljs-string\">'A1/C1'</span>;<br>                            path3 = <span class=\"hljs-string\">'A1/D1'</span>;<br>                            dir_args1 = {<br>                                from_dir: from_dir,<br>                                path: path1<br>                            };<br>                            dir_args2 = {<br>                                from_dir: from_dir,<br>                                path: path2<br>                            };<br>                            dir_args3 = {<br>                                from_dir: from_dir,<br>                                path: path3<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            _context9.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            _context9.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args3);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            result = _context9.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/D1'</span>);<br>                            directory = dir_list[<span class=\"hljs-number\">0</span>];<br>                            _context9.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.peerDirectories(directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            dir_with_subs = _context9.sent;<br>                            assert.equal(dir_with_subs.name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_with_subs.name, directory.name);<br>                            assert.equal(dir_with_subs.id, directory.id);<br>                            assert.isTrue(dir_with_subs.hasOwnProperty(<span class=\"hljs-string\">'peer_directories'</span>));<br>                            subs = dir_with_subs.peer_directories;<br>                            expected = [project_name + <span class=\"hljs-string\">\"/\"</span> + path1, project_name + <span class=\"hljs-string\">\"/\"</span> + path2, project_name + <span class=\"hljs-string\">\"/\"</span> + path3];<br>                            missing = [];<br>                            expected.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">target</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = <span class=\"hljs-literal\">false</span>;<br>                                subs.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">dir</span>) </span>{<br>                                    <span class=\"hljs-keyword\">if</span> (dir.name == target) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                });<br>                                <span class=\"hljs-keyword\">if</span> (!found) missing.push(target);<br>                            });<br>                            assert.deepEqual(missing, [], <span class=\"hljs-string\">\"Should be empty list of missing expected values\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "2cf8fcca-0a58-4615-baa0-9c33590e4612",
      "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
      "skipped": false
    },
    {
      "title": "Find in project",
      "fullTitle": "Get directories Find in project",
      "timedOut": false,
      "duration": 182,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, cross;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10$</span>(<span class=\"hljs-params\">_context10</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context10.prev = _context10.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context10.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context10.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context10.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context10.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context10.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context10.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context10.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context10.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            <span class=\"hljs-comment\">// it appears from the code that case 1 does not work!</span><br>                            <span class=\"hljs-comment\">// let dir1 = yield directories.findInProject(project_id,'','/A1/B1');</span><br>                            _context10.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.findInProject(project_id, <span class=\"hljs-string\">''</span>, dir_list[<span class=\"hljs-number\">1</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            cross = _context10.sent;<br>                            assert.isNotNull(cross);<br>                            assert.equal(cross.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(cross[<span class=\"hljs-number\">0</span>].project_id, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context10.stop();<br>                    }<br>                }<br>            }, _callee10, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "4b498ba4-8869-4194-80da-a354c89576f9",
      "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
      "skipped": false
    },
    {
      "title": "Rename leaf directory",
      "fullTitle": "Modify directory Rename leaf directory",
      "timedOut": false,
      "duration": 132,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, name, directory_id, rename_args, dir, expectedPath;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11$</span>(<span class=\"hljs-params\">_context11</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context11.prev = _context11.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context11.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context11.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context11.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context11.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context11.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context11.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context11.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context11.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            name = <span class=\"hljs-string\">'XX'</span>;<br>                            directory_id = dir_list[<span class=\"hljs-number\">0</span>].id;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: name<br>                                }<br>                            };<br>                            _context11.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            _context11.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            dir = _context11.sent;<br>                            expectedPath = project_name + <span class=\"hljs-string\">'/XX'</span>;<br>                            assert.equal(dir.path, expectedPath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context11.stop();<br>                    }<br>                }<br>            }, _callee11, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "e8893794-c7d3-49e9-83d7-22297c669cf5",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Move leaf directory",
      "fullTitle": "Modify directory Move leaf directory",
      "timedOut": false,
      "duration": 203,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path1, path2, dir_args1, dir_args2, result, dir_list, dir1_id, dir2_id, rename_args, dir3;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12$</span>(<span class=\"hljs-params\">_context12</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context12.prev = _context12.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context12.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context12.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context12.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context12.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context12.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context12.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path1 = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            path2 = <span class=\"hljs-string\">'A1/C1'</span>;<br>                            dir_args1 = {<br>                                from_dir: from_dir,<br>                                path: path1<br>                            };<br>                            dir_args2 = {<br>                                from_dir: from_dir,<br>                                path: path2<br>                            };<br>                            _context12.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            result = _context12.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            dir1_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            _context12.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context12.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/C1'</span>);<br>                            dir2_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: dir2_id<br>                                }<br>                            };<br>                            _context12.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, dir1_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            ret = _context12.sent;<br>                            dir3 = ret.val;<br>                            assert.equal(dir3.path, project_name + <span class=\"hljs-string\">'/A1/C1/B1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context12.stop();<br>                    }<br>                }<br>            }, _callee12, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "3db3487c-891f-4b1a-961b-d8589c4a2c52",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Delete leaf directory",
      "fullTitle": "Modify directory Delete leaf directory",
      "timedOut": false,
      "duration": 152,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, directory_id, dir;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13$</span>(<span class=\"hljs-params\">_context13</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context13.prev = _context13.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context13.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context13.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context13.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context13.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context13.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context13.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context13.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context13.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            directory_id = dir_list[<span class=\"hljs-number\">0</span>].id;<br>                            _context13.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            dir = _context13.sent;<br>                            assert.isNotNull(dir);<br>                            _context13.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            dir_list = _context13.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            _context13.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.remove(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context13.sent;<br>                            assert.isTrue(ret.val);<br>                            _context13.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            dir_list = _context13.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">40</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context13.stop();<br>                    }<br>                }<br>            }, _callee13, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "f736f3c9-753f-4bf3-a6ba-f0deb396e482",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Rename interior directory",
      "fullTitle": "Modify directory Rename interior directory",
      "timedOut": false,
      "duration": 425,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, dir_list, newName, directory_id, rename_args, results, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14$</span>(<span class=\"hljs-params\">_context14</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context14.prev = _context14.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context14.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context14.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context14.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context14.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context14.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context14.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1/D1/E1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C2'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C3'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            _context14.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            dir_list = _context14.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">8</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">7</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C3'</span>);<br>                            newName = <span class=\"hljs-string\">'XX'</span>;<br>                            directory_id = dir_list[<span class=\"hljs-number\">2</span>].id;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: newName<br>                                }<br>                            };<br>                            path = project_name + <span class=\"hljs-string\">\"/A1/\"</span> + newName;<br>                            _context14.next = <span class=\"hljs-number\">44</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                            results = _context14.sent;<br>                            directory = results.val;<br>                            assert.equal(directory.path, path);<br>                            _context14.next = <span class=\"hljs-number\">49</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            dir_list = _context14.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">8</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">7</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C3'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">59</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context14.stop();<br>                    }<br>                }<br>            }, _callee14, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "02ed4cf4-ba00-47c6-8ba0-22a8fc2fd0e7",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Move interior directory",
      "fullTitle": "Modify directory Move interior directory",
      "timedOut": false,
      "duration": 333,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, dir_list, directoryA1_id, directoryB1_id, directoryC1_id, directoryD1_id, directoryE1_id, directoryC2_id, directory_id, rename_args, results, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15$</span>(<span class=\"hljs-params\">_context15</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context15.prev = _context15.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context15.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context15.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context15.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context15.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context15.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context15.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1/D1/E1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C2'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            _context15.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            dir_list = _context15.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">7</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            directoryA1_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            directoryB1_id = dir_list[<span class=\"hljs-number\">2</span>].id;<br>                            directoryC1_id = dir_list[<span class=\"hljs-number\">3</span>].id;<br>                            directoryD1_id = dir_list[<span class=\"hljs-number\">4</span>].id;<br>                            directoryE1_id = dir_list[<span class=\"hljs-number\">5</span>].id;<br>                            directoryC2_id = dir_list[<span class=\"hljs-number\">6</span>].id;<br>                            directory_id = dir_list[<span class=\"hljs-number\">3</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: dir_list[<span class=\"hljs-number\">6</span>].id<br>                                }<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">43</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">43</span>:<br>                            results = _context15.sent;<br>                            directory = results.val;<br>                            assert.equal(directory.path, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1'</span>);<br>                            _context15.next = <span class=\"hljs-number\">48</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">48</span>:<br>                            dir_list = _context15.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">7</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].id, directoryA1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].id, directoryB1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].id, directoryC2_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].id, directoryC1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].id, directoryD1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].id, directoryE1_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">63</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context15.stop();<br>                    }<br>                }<br>            }, _callee15, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "4e31fbb3-7aa9-4a09-a7e9-ea56c3d95509",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Can not rename top level directory",
      "fullTitle": "Modify directory Can not rename top level directory",
      "timedOut": false,
      "duration": 80,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, name, rename_args, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16$</span>(<span class=\"hljs-params\">_context16</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context16.prev = _context16.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context16.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context16.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context16.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context16.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context16.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context16.sent;<br>                            directory_id = top_directory.id;<br>                            name = <span class=\"hljs-string\">'XX'</span>;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: name<br>                                }<br>                            };<br>                            _context16.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context16.sent;<br>                            assert(!!result.error);<br>                            _context16.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            top_directory = _context16.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context16.stop();<br>                    }<br>                }<br>            }, _callee16, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "33c9c4c2-9ada-4c34-bb5b-9b857cb56a83",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Can not move top level directory",
      "fullTitle": "Modify directory Can not move top level directory",
      "timedOut": false,
      "duration": 142,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, from_dir, target_path, target_dir_args, result, dir_list, target_id, rename_args;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17$</span>(<span class=\"hljs-params\">_context17</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context17.prev = _context17.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context17.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context17.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context17.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context17.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context17.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context17.sent;<br>                            directory_id = top_directory.id;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            target_path = <span class=\"hljs-string\">'NEW/LOCATION'</span>;<br>                            target_dir_args = {<br>                                from_dir: from_dir,<br>                                path: target_path<br>                            };<br>                            _context17.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, target_dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            result = _context17.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">\"/\"</span> + target_path);<br>                            target_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: target_id<br>                                }<br>                            };<br>                            _context17.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context17.sent;<br>                            assert.isTrue(!!result.error);<br>                            _context17.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            top_directory = _context17.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context17.stop();<br>                    }<br>                }<br>            }, _callee17, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "3a4e3e50-3e67-4824-a03b-78616afa5997",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Can not delete top level directory",
      "fullTitle": "Modify directory Can not delete top level directory",
      "timedOut": false,
      "duration": 79,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, result, project, project_id, top_directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18$</span>(<span class=\"hljs-params\">_context18</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context18.prev = _context18.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context18.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context18.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context18.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            result = _context18.sent;<br>                            project = result.val;<br>                            project_id = project.id;<br>                            _context18.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context18.sent;<br>                            _context18.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.remove(project_id, top_directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            result = _context18.sent;<br>                            assert.isTrue(!!result.error);<br>                            _context18.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            top_directory = _context18.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context18.stop();<br>                    }<br>                }<br>            }, _callee18, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "cf63cc43-f4fd-4ff5-b184-ffbec8ab4e6c",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "deletes best_measure_history",
      "fullTitle": "Delete Experiment - in parts:  deletes best_measure_history",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> experiment_id, idList, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// chain from experiment_id -&gt; property_id list through:</span><br>                            <span class=\"hljs-comment\">//   experiment2sample - samples</span><br>                            <span class=\"hljs-comment\">//   sample2propertyset - propertysets</span><br>                            <span class=\"hljs-comment\">//   propertyset2property - properties</span><br>                            <span class=\"hljs-comment\">//   best_measure_history</span><br>                            <span class=\"hljs-comment\">// to get best_measure_history items by property_id</span><br>                            _context2.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'samples'</span>)).zip().eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'sample2propertyset'</span>), { index: <span class=\"hljs-string\">'sample_id'</span> }).zip().eqJoin(<span class=\"hljs-string\">'property_set_id'</span>, r.table(<span class=\"hljs-string\">'propertysets'</span>)).zip().eqJoin(<span class=\"hljs-string\">'property_set_id'</span>, r.table(<span class=\"hljs-string\">'propertyset2property'</span>), { index: <span class=\"hljs-string\">'property_set_id'</span> }).zip().eqJoin(<span class=\"hljs-string\">'property_id'</span>, r.table(<span class=\"hljs-string\">'properties'</span>)).zip().eqJoin(<span class=\"hljs-string\">'property_id'</span>, r.table(<span class=\"hljs-string\">'best_measure_history'</span>), { index: <span class=\"hljs-string\">'property_id'</span> }).zip().getField(<span class=\"hljs-string\">'property_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            idList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'best_measure_history'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList))), { index: <span class=\"hljs-string\">'property_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ea39f80f-a426-4440-a4da-07f0d35d8a3c",
      "parentUUID": "124a6d4e-d7fc-41a0-ae71-8b6b78208220",
      "skipped": false
    },
    {
      "title": "deletes all datasets, processes, samples, tasks, and links to files",
      "fullTitle": "Delete Experiment - complex case:  deletes all datasets, processes, samples, tasks, and links to files",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// test that structures exist</span><br>                            <span class=\"hljs-comment\">// experiments.delete(experiment_id, {deleteProcesses: true});</span><br>                            <span class=\"hljs-comment\">// test that structures are deleted</span><br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "fc7f2772-61df-4bc4-ac77-a7c64e016d6a",
      "parentUUID": "e38a4ab2-ecc2-4eea-98a3-bb0d3ad5c7a9",
      "skipped": false
    },
    {
      "title": "deletes all datasets, tasks, and links to files - preserve processes, samples",
      "fullTitle": "Delete Experiment - complex case:  deletes all datasets, tasks, and links to files - preserve processes, samples",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// test that structures exist</span><br>                            <span class=\"hljs-comment\">// experiments.delete(experiment_id, {deleteProcesses: true});</span><br>                            <span class=\"hljs-comment\">// test that structures are deleted</span><br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "a02053b3-23c0-44b2-8ff8-87c0165e9bba",
      "parentUUID": "3e9e0eb3-7ac0-4bee-ba25-5ed4d5715cdf",
      "skipped": false
    },
    {
      "title": "deletes all datasets",
      "fullTitle": "Delete Experiment - in parts:  deletes all datasets",
      "timedOut": false,
      "duration": 147,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results, dataset_list, hasPublishedDatasets, i, dataset, _i, _dataset;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i &lt; dataset_list.length)) {<br>                                _context2.next = <span class=\"hljs-number\">21</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            _dataset = dataset_list[_i];<br>                            _context2.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(_dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            _i++;<br>                            _context2.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context2.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "d508056b-387c-4f07-9b47-1c7d369fb01b",
      "parentUUID": "a95b300c-68c7-4bf4-a80d-a5337cd1b66e",
      "skipped": false
    },
    {
      "title": "deletes experiment part: experiment-notes",
      "fullTitle": "Delete Experiment - basic parts:  deletes experiment part: experiment-notes",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> projectId, experimentId, idList, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-comment\">// ---- experimentnote ----</span><br>                            <span class=\"hljs-comment\">// experiment2experimentnote</span><br>                            <span class=\"hljs-comment\">// experimentnotes</span><br>                            projectId = project.id;<br>                            assert.isOk(projectId);<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimentnote'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_note_id'</span>, r.table(<span class=\"hljs-string\">'experimentnotes'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_note_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            idList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimentnotes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context2.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimentnote'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "dd354688-9891-454e-a3f6-47cb0ea26b1e",
      "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
      "skipped": false
    },
    {
      "title": "deletes experiment part: experiment-tasks",
      "fullTitle": "Delete Experiment - basic parts:  deletes experiment part: experiment-tasks",
      "timedOut": false,
      "duration": 82,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> projectId, experimentId, idList, taskId, task, processId, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            projectId = project.id;<br>                            assert.isOk(projectId);<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            <span class=\"hljs-comment\">// get taskId and processId</span><br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_task_id'</span>, r.table(<span class=\"hljs-string\">'experimenttasks'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_task_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            idList = _context3.sent;<br>                            assert.isOk(idList);<br>                            assert.equal(idList.length, <span class=\"hljs-number\">1</span>);<br>                            taskId = idList[<span class=\"hljs-number\">0</span>];<br>                            assert.isOk(taskId);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttasks'</span>).get(taskId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            task = _context3.sent;<br>                            assert.isOk(task);<br>                            assert.isOk(task.process_id);<br>                            processId = task.process_id;<br>                            <span class=\"hljs-comment\">// experiment2experimenttask</span><br>                            <span class=\"hljs-comment\">// experimenttask2process</span><br>                            <span class=\"hljs-comment\">// experimenttasks</span><br>                            <span class=\"hljs-comment\">// processes</span><br>                            _context3.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttask2process'</span>).getAll(taskId, { index: <span class=\"hljs-string\">'experiment_task_id'</span> }).eqJoin(<span class=\"hljs-string\">'process_id'</span>, r.table(<span class=\"hljs-string\">'processes'</span>)).zip().getField(<span class=\"hljs-string\">'process_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            idList = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'processes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttask2process'</span>).getAll(taskId, { index: <span class=\"hljs-string\">'experiment_task_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_task_id'</span>, r.table(<span class=\"hljs-string\">'experimenttasks'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_task_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            idList = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttasks'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "c28a5a9f-80fc-4dea-bdc1-0a5b07e37fe6",
      "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
      "skipped": false
    },
    {
      "title": "deletes links between files and experiment",
      "fullTitle": "Delete Experiment - basic parts:  deletes links between files and experiment",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> experimentId, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            _context4.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2datafile'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            delete_msg = _context4.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">16</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "24b412a2-3abd-41c0-a795-9ddcb4151dee",
      "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
      "skipped": false
    },
    {
      "title": "deletes items in notes",
      "fullTitle": "Delete Experiment - in parts:  deletes items in notes",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> id_list, i, _i6, _i7, entities, noteIdSet, _i8, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            id_list = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; process_list.length; i++) {<br>                                id_list.push(process_list[i].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i6 = <span class=\"hljs-number\">0</span>; _i6 &lt; sample_list.length; _i6++) {<br>                                id_list.push(sample_list[_i6].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i7 = <span class=\"hljs-number\">0</span>; _i7 &lt; file_list.length; _i7++) {<br>                                id_list.push(file_list[_i7].id);<br>                            }<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'note2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            entities = _context2.sent;<br>                            assert.equal(entities.length, notes_count);<br>                            noteIdSet = <span class=\"hljs-keyword\">new</span> _set2.default();<br>                            <span class=\"hljs-keyword\">for</span> (_i8 = <span class=\"hljs-number\">0</span>; _i8 &lt; entities.length; _i8++) {<br>                                noteIdSet = noteIdSet.add(entities[_i8].note_id);<br>                            }<br>                            assert.equal(noteIdSet.size, <span class=\"hljs-number\">1</span>);<br>                            _context2.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'note2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, notes_count);<br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'notes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(noteIdSet)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ac5d1828-cb38-4626-b892-d976a24a0269",
      "parentUUID": "13e14486-efa7-45e0-b959-4c2adf3897f9",
      "skipped": false
    },
    {
      "title": "deletes items in reviews",
      "fullTitle": "Delete Experiment - in parts:  deletes items in reviews",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> id_list, i, _i9, _i10, entities, reviewIdSet, _i11, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            id_list = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; process_list.length; i++) {<br>                                id_list.push(process_list[i].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i9 = <span class=\"hljs-number\">0</span>; _i9 &lt; sample_list.length; _i9++) {<br>                                id_list.push(sample_list[_i9].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i10 = <span class=\"hljs-number\">0</span>; _i10 &lt; file_list.length; _i10++) {<br>                                id_list.push(file_list[_i10].id);<br>                            }<br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'review2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            entities = _context3.sent;<br>                            assert.equal(entities.length, reviews_count);<br>                            reviewIdSet = <span class=\"hljs-keyword\">new</span> _set2.default();<br>                            <span class=\"hljs-keyword\">for</span> (_i11 = <span class=\"hljs-number\">0</span>; _i11 &lt; entities.length; _i11++) {<br>                                reviewIdSet = reviewIdSet.add(entities[_i11].review_id);<br>                            }<br>                            assert.equal(reviewIdSet.size, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'review2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, reviews_count);<br>                            _context3.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'reviews'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(reviewIdSet)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ba6e1f48-cd5a-4e05-8914-06bdf0953b56",
      "parentUUID": "13e14486-efa7-45e0-b959-4c2adf3897f9",
      "skipped": false
    },
    {
      "title": "deletes datasets and deletes all processes and samples",
      "fullTitle": "Delete Experiment - in parts:  deletes datasets and deletes all processes and samples",
      "timedOut": false,
      "duration": 954,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, rv, key, results, dataset_list, hasPublishedDatasets, i, dataset, _i, _dataset, _i2, _process, simple, proc_list, sampleList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// Note: create fake sample that is not part of a process for testing</span><br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'samples'</span>).insert({ <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'fake sample'</span>, <span class=\"hljs-string\">'otype'</span>: <span class=\"hljs-string\">'sample'</span>, <span class=\"hljs-string\">'owner'</span>: <span class=\"hljs-string\">'noone'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            rv = _context2.sent;<br>                            key = rv.generated_keys[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).insert({ sample_id: key, experiment_id: experiment_id });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i &lt; dataset_list.length)) {<br>                                _context2.next = <span class=\"hljs-number\">27</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            _dataset = dataset_list[_i];<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(_dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            _i++;<br>                            _context2.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context2.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">0</span>);<br>                            _i2 = process_list.length;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i2 &gt; <span class=\"hljs-number\">0</span>)) {<br>                                _context2.next = <span class=\"hljs-number\">41</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            <span class=\"hljs-comment\">// delete leaf-nodes first!</span><br>                            _process = process_list[_i2 - <span class=\"hljs-number\">1</span>];<br>                            _context2.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, _process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            _i2--;<br>                            _context2.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            simple = <span class=\"hljs-literal\">true</span>;<br>                            _context2.next = <span class=\"hljs-number\">44</span>;<br>                            <span class=\"hljs-keyword\">return</span> experiments.getProcessesForExperiment(experiment_id, simple);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                            results = _context2.sent;<br>                            proc_list = results.val;<br>                            assert.isOk(proc_list);<br>                            assert.equal(proc_list.length, <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-comment\">// ... but, in rare cases, there my be samples in the experiment that are in no process</span><br>                            _context2.next = <span class=\"hljs-number\">50</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'samples'</span>)).zip().getField(<span class=\"hljs-string\">'sample_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">50</span>:<br>                            sampleList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">53</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'samples'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(sampleList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">53</span>:<br>                            rv = _context2.sent;<br>                            assert.equal(rv.deleted, <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-comment\">// and the sample entries for the experiment are left in experiment2sample</span><br>                            _context2.next = <span class=\"hljs-number\">57</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">57</span>:<br>                            rv = _context2.sent;<br>                            assert.equal(rv.deleted, <span class=\"hljs-number\">8</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">59</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "95304b42-3ce6-4cd9-a106-f93fcdca7972",
      "parentUUID": "a92f98b9-a270-4f4a-bcb2-da82e042cc14",
      "skipped": false
    },
    {
      "title": "checks for published dataset",
      "fullTitle": "Delete Experiment - in parts:  checks for published dataset",
      "timedOut": false,
      "duration": 632,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results, dataset_list, dataset_id, hasPublishedDatasets, i, dataset, publishedDataset, _i, _dataset, unpublishedDataset, _i2, _dataset2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            dataset_id = dataset_list[<span class=\"hljs-number\">0</span>].id;<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _context2.next = <span class=\"hljs-number\">16</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(dataset_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            results = _context2.sent;<br>                            publishedDataset = results.val;<br>                            assert.isOk(publishedDataset);<br>                            assert.isTrue(publishedDataset.published);<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i = <span class=\"hljs-number\">0</span>; _i &lt; dataset_list.length; _i++) {<br>                                _dataset = dataset_list[_i];<br>                                <span class=\"hljs-keyword\">if</span> (_dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isTrue(hasPublishedDatasets);<br>                            _context2.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.unpublishDataset(dataset_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            results = _context2.sent;<br>                            unpublishedDataset = results.val;<br>                            assert.isOk(unpublishedDataset);<br>                            assert.isFalse(unpublishedDataset.published);<br>                            _context2.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i2 = <span class=\"hljs-number\">0</span>; _i2 &lt; dataset_list.length; _i2++) {<br>                                _dataset2 = dataset_list[_i2];<br>                                <span class=\"hljs-keyword\">if</span> (_dataset2.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "d94874e9-d34d-42f0-839d-f23e96921bb2",
      "parentUUID": "32e3e6b5-685f-484b-8f2f-bb311f886f39",
      "skipped": false
    },
    {
      "title": "does not delete an experiment with a published dataset",
      "fullTitle": "Delete Experiment:  does not delete an experiment with a published dataset",
      "timedOut": false,
      "duration": 5547,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, idList, i, datasetId, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            idList = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; datasetList.length; i++) {<br>                                idList.push(datasetList[i].id);<br>                            }<br>                            _context2.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = idList[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.published);<br>                            assert(results.val.published);<br>                            <span class=\"hljs-comment\">// delete experiment - fails</span><br>                            _context2.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context2.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "b40f52ad-125c-435b-b578-fa9e20ce3955",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "does not delete an experiment with a dataset that has an assigned DOI",
      "fullTitle": "Delete Experiment:  does not delete an experiment with a dataset that has an assigned DOI",
      "timedOut": false,
      "duration": 5198,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, idList, i, datasetId, fakeDOI, status, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            idList = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; datasetList.length; i++) {<br>                                idList.push(datasetList[i].id);<br>                            }<br>                            _context3.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = idList[<span class=\"hljs-number\">0</span>];<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context3.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            status = _context3.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete experiment - fails</span><br>                            _context3.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context3.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "4ec6892c-576a-4297-9561-c584574ba3bf",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "deletes experiment and all its parts",
      "fullTitle": "Delete Experiment:  deletes experiment and all its parts",
      "timedOut": false,
      "duration": 6619,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context4.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context4.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context4.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context4.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context4.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context4.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context4.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">true</span>, dryRun: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context4.sent;<br>                            checkResults(results);<br>                            _context4.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context4.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context4.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context4.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context4.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context4.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context4.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "121269c1-a927-40d7-beaa-bc66be58f36a",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "with deleteProcess false - deletes experiment, but not process, samples, etc.",
      "fullTitle": "Delete Experiment:  with deleteProcess false - deletes experiment, but not process, samples, etc.",
      "timedOut": false,
      "duration": 5831,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context5.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context5.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context5.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context5.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context5.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context5.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context5.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context5.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context5.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">false</span>, dryRun: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context5.sent;<br>                            checkResultsForNotDeleteProcess(results);<br>                            _context5.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context5.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context5.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context5.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context5.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context5.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context5.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "4528263c-f54f-4265-80ba-1727a0e2f19d",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "with dry run true, delete process true - shows all will be deleted",
      "fullTitle": "Delete Experiment:  with dry run true, delete process true - shows all will be deleted",
      "timedOut": false,
      "duration": 5555,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context6.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context6.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context6.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context6.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context6.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context6.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context6.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context6.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context6.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">true</span>, dryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context6.sent;<br>                            checkResults(results);<br>                            _context6.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id, { forDryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context6.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context6.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context6.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context6.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context6.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context6.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context6.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "60f5ee07-e2e4-40e2-83e8-567331ca7bfc",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "with dry run true, delete process false - shows some will be deleted",
      "fullTitle": "Delete Experiment:  with dry run true, delete process false - shows some will be deleted",
      "timedOut": false,
      "duration": 5430,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context7.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context7.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context7.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context7.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context7.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context7.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context7.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context7.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context7.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">false</span>, dryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context7.sent;<br>                            checkResultsForNotDeleteProcess(results);<br>                            _context7.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id, { forDryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context7.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context7.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context7.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context7.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context7.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context7.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context7.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "62830512-dcbc-48bf-8804-6a0d71e92290",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "individual test level",
      "fullTitle": "Function level individual test level",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "bf5b217e-5a9a-46b6-944e-0d51faf20de3",
      "parentUUID": "11b90a72-ee4f-4fc7-99d1-8155cd675aeb",
      "skipped": false
    },
    {
      "title": "Will delete a file that has the uses id set",
      "fullTitle": "Delete Will delete a file that has the uses id set",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "7ed6fada-7ad5-4c59-bd30-798fc09a6ce8",
      "parentUUID": "042222f8-f54a-4907-bab3-a269a10f82d6",
      "skipped": false
    },
    {
      "title": "Will delete a file but keep physical file when needed",
      "fullTitle": "Delete Will delete a file but keep physical file when needed",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "47c3228b-f295-4c6a-805d-651b3ea4884b",
      "parentUUID": "042222f8-f54a-4907-bab3-a269a10f82d6",
      "skipped": false
    },
    {
      "title": "get by id",
      "fullTitle": "Get File Information get by id",
      "timedOut": false,
      "duration": 77,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, fileId, fetchedFile;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">0</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context2.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            fileId = file.id;<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            fetchedFile = _context2.sent;<br>                            assert.equal(file.id, fetchedFile.id);<br>                            assert.equal(file.name, fetchedFile.name);<br>                            assert.equal(file.owner, fetchedFile.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "7d40da3e-0ba3-4416-89c0-6a52be3a6ae4",
      "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
      "skipped": false
    },
    {
      "title": "get by checksum",
      "fullTitle": "Get File Information get by checksum",
      "timedOut": false,
      "duration": 143,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, checksum, results, fetchedFileList, target;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context3.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            checksum = file.checksum;<br>                            _context3.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getAllByChecksum(checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            fetchedFileList = [].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(results));<br>                            assert.isOk(fetchedFileList);<br>                            target = <span class=\"hljs-literal\">null</span>;<br>                            fetchedFileList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">foundFile</span>) </span>{<br>                                assert.equal(foundFile.owner, userId);<br>                                <span class=\"hljs-keyword\">if</span> (foundFile.id === file.id) {<br>                                    target = foundFile;<br>                                }<br>                            });<br>                            assert.isOk(target);<br>                            assert.equal(file.id, target.id);<br>                            assert.equal(file.name, target.name);<br>                            assert.equal(file.owner, target.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "2297562c-e40c-4820-95f3-15a763376b25",
      "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
      "skipped": false
    },
    {
      "title": "get by id list",
      "fullTitle": "Get File Information get by id list",
      "timedOut": false,
      "duration": 88,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, idList, fileList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context4.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            _context4.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context4.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            idList = [file1.id, file2.id];<br>                            _context4.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getList(project.id, idList);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            fileList = _context4.sent;<br>                            assert.isOk(fileList);<br>                            assert.equal(fileList.length, <span class=\"hljs-number\">2</span>);<br>                            fileList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = idList.indexOf(file.id) &gt; -<span class=\"hljs-number\">1</span>;<br>                                assert(found, <span class=\"hljs-string\">'failed to find file '</span> + file.name + <span class=\"hljs-string\">' in query results'</span>);<br>                            });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "29433f25-1cc8-4808-a38d-a79d2752307a",
      "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
      "skipped": false
    },
    {
      "title": "get by file path in project",
      "fullTitle": "Get File Information get by file path in project",
      "timedOut": false,
      "duration": 175,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, probe, filePath, valOrError;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">4</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context5.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            _context5.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            top_directory = _context5.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            result = _context5.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            _context5.next = <span class=\"hljs-number\">25</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                            probe = _context5.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            filePath = project.name + <span class=\"hljs-string\">\"/\"</span> + path + <span class=\"hljs-string\">\"/\"</span> + file.name;<br>                            _context5.next = <span class=\"hljs-number\">32</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.byPath(project.id, filePath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">32</span>:<br>                            valOrError = _context5.sent;<br>                            assert.isOk(valOrError);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            filePath = <span class=\"hljs-string\">\"bogas\"</span> + <span class=\"hljs-string\">\"/\"</span> + path + <span class=\"hljs-string\">\"/\"</span> + file.name;<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.byPath(project.id, filePath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            valOrError = _context5.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.error);<br>                            assert.equal(valOrError.error, <span class=\"hljs-string\">'No matching file'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "66a9d9ec-0d78-4a99-95da-fa88774e6b49",
      "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
      "skipped": false
    },
    {
      "title": "will rename a file",
      "fullTitle": "File Update will rename a file",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> newName, oldName, file, updateArgs, valOrError, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            newName = <span class=\"hljs-string\">'Another name for photo.jpg'</span>;<br>                            oldName = <span class=\"hljs-string\">'L124_photo.jpg'</span>;<br>                            _context6.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            file = _context6.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            assert.equal(file.name, oldName);<br>                            updateArgs = {<br>                                name: newName<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            valOrError = _context6.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.val);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.name, newName);<br>                            assert.equal(probe.id, file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "3f3f11e8-8f2e-4f67-a618-b66835451ed6",
      "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
      "skipped": false
    },
    {
      "title": "will not let you rename a file to a name in use",
      "fullTitle": "File Update will not let you rename a file to a name in use",
      "timedOut": false,
      "duration": 89,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> newName, oldName, file, anotherFile, updateArgs, valOrError, message;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            newName = <span class=\"hljs-string\">'Another name for photo.jpg'</span>;<br>                            oldName = <span class=\"hljs-string\">'L124_photo.jpg'</span>;<br>                            _context7.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            file = _context7.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            assert.equal(file.name, oldName);<br>                            _context7.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            anotherFile = _context7.sent;<br>                            assert.isOk(anotherFile);<br>                            assert.equal(anotherFile.owner, userId);<br>                            newName = anotherFile.name;<br>                            updateArgs = {<br>                                name: newName<br>                            };<br>                            _context7.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            valOrError = _context7.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.error, <span class=\"hljs-string\">\"Expected an error return\"</span>);<br>                            message = <span class=\"hljs-string\">'Unexpected error message: '</span> + valOrError.error;<br>                            assert(valOrError.error.indexOf(<span class=\"hljs-string\">\"already exists\"</span>) &gt; -<span class=\"hljs-number\">1</span>, message);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "58838d5b-af19-43ec-a075-bf8114154df9",
      "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
      "skipped": false
    },
    {
      "title": "will change the description of a file",
      "fullTitle": "File Update will change the description of a file",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> description, file, updateArgs, valOrError, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            description = <span class=\"hljs-string\">'This is a test description - '</span> + project.name;<br>                            _context8.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            file = _context8.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            updateArgs = {<br>                                description: description<br>                            };<br>                            _context8.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            valOrError = _context8.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.val);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            assert(probe.description !== file.description);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "800b71b7-ff05-4cb3-87e1-520d4a6d4e89",
      "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
      "skipped": false
    },
    {
      "title": "will move a file",
      "fullTitle": "File Update will move a file",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context9.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            _context9.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            top_directory = _context9.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            result = _context9.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            _context9.next = <span class=\"hljs-number\">25</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                            probe = _context9.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "e170d139-3595-46b8-8f79-4193c677d217",
      "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
      "skipped": false
    },
    {
      "title": "supports different versions of the file - same directory",
      "fullTitle": "Versioning supports different versions of the file - same directory",
      "timedOut": false,
      "duration": 293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, file3, fileWithVersion, otherVersion, versions, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context2.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            <span class=\"hljs-comment\">// create faked version of file</span><br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context2.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">3</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            file3 = _context2.sent;<br>                            assert.isOk(file3);<br>                            assert.equal(file3.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file2, file1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file2.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file1.id);<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file1.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file3, file2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file3.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file2.id);<br>                            _context2.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file2.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">45</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getVersions(fileWithVersion.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                            versions = _context2.sent;<br>                            assert.isOk(versions);<br>                            assert.isOk(versions.val);<br>                            probe = versions.val;<br>                            assert.equal(probe.length, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"Some versions of the file are missing\"</span>);<br>                            assert.equal(probe[<span class=\"hljs-number\">0</span>].id, file2.id);<br>                            assert.equal(probe[<span class=\"hljs-number\">1</span>].id, file1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">52</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ef64bc95-67ee-4aea-8ada-0e23207cfe84",
      "parentUUID": "5710bd7b-a319-4143-a7a0-8bbc5a6e31d5",
      "skipped": false
    },
    {
      "title": "supports different versions of the file - different directories",
      "fullTitle": "Versioning supports different versions of the file - different directories",
      "timedOut": false,
      "duration": 399,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, file3, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, fileProbe, fileWithVersion, otherVersion, versions, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context2.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context2.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">3</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            file3 = _context2.sent;<br>                            assert.isOk(file3);<br>                            assert.equal(file3.owner, userId);<br>                            <span class=\"hljs-comment\">// file 2 moved to a different directory</span><br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            top_directory = _context2.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context2.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            result = _context2.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context2.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file2.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context2.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            fileProbe = _context2.sent;<br>                            assert.isOk(fileProbe);<br>                            assert.equal(fileProbe.owner, userId);<br>                            assert.equal(fileProbe.id, file2.id);<br>                            <span class=\"hljs-comment\">// create faked versions of file3</span><br>                            _context2.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file2, file1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file2.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file1.id);<br>                            _context2.next = <span class=\"hljs-number\">48</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">48</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file1.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">55</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file3, file2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">55</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file3.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file2.id);<br>                            _context2.next = <span class=\"hljs-number\">62</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">62</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file2.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            <span class=\"hljs-comment\">// versions are still available</span><br>                            _context2.next = <span class=\"hljs-number\">69</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getVersions(fileWithVersion.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">69</span>:<br>                            versions = _context2.sent;<br>                            assert.isOk(versions);<br>                            assert.isOk(versions.val);<br>                            probe = versions.val;<br>                            assert.equal(probe.length, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"Some versions of the file are missing\"</span>);<br>                            assert.equal(probe[<span class=\"hljs-number\">0</span>].id, file2.id);<br>                            assert.equal(probe[<span class=\"hljs-number\">1</span>].id, file1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">76</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "e50b272a-575e-4ba9-860f-9aca2113435a",
      "parentUUID": "fd12e689-51f0-4fee-ad4f-99ed5b35cf32",
      "skipped": false
    },
    {
      "title": "individual test level",
      "fullTitle": "Function level individual test level",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "b4a44e20-050d-4c0a-9199-b07a939a81be",
      "parentUUID": "15b33842-9fdb-4bd6-8db4-f2c40443ad0a",
      "skipped": false
    },
    {
      "title": "creates a process",
      "fullTitle": "Function level creates a process",
      "timedOut": false,
      "duration": 261,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Create Process Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context2.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context2.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context2.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            process = ret.val;<br>                            assert.isOk(process);<br>                            assert.equal(process.owner, user.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "793d564d-aa92-475b-9b72-3d33f47abffe",
      "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
      "skipped": false
    },
    {
      "title": "creates two processes linked by sample ",
      "fullTitle": "Function level creates two processes linked by sample ",
      "timedOut": false,
      "duration": 678,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context3.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "3c67cad4-bda4-4591-9d24-db1608ffe7b5",
      "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
      "skipped": false
    },
    {
      "title": "deletes two processes leaf first",
      "fullTitle": "Function level deletes two processes leaf first",
      "timedOut": false,
      "duration": 841,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Delete Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context4.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, measurement_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            _context4.next = <span class=\"hljs-number\">46</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, create_sample_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "23d280a7-631c-4a18-8a3c-b2a8f6bd5b36",
      "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
      "skipped": false
    },
    {
      "title": "does not allow deleting non-leaf nodes",
      "fullTitle": "Function level does not allow deleting non-leaf nodes",
      "timedOut": false,
      "duration": 656,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Delete Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context5.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, create_sample_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.error);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "4589a462-b40f-4ebe-9c8e-7b63d8a737d8",
      "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
      "skipped": false
    },
    {
      "title": "does not delete a project with any published datasets",
      "fullTitle": "Delete Project:  does not delete a project with any published datasets",
      "timedOut": false,
      "duration": 5728,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.published);<br>                            assert(results.val.published);<br>                            <span class=\"hljs-comment\">// delete project - fails</span><br>                            _context2.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "25468e1a-fcf6-4f81-ad60-5f9000d725e4",
      "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
      "skipped": false
    },
    {
      "title": "does not delete a project if any dataset in any experiment has a DOI",
      "fullTitle": "Delete Project:  does not delete a project if any dataset in any experiment has a DOI",
      "timedOut": false,
      "duration": 5222,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, fakeDOI, status, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            status = _context3.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete project - fails</span><br>                            _context3.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "61c87a66-5576-487d-a17b-40fe62ae67f5",
      "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
      "skipped": false
    },
    {
      "title": "supports a dry run mode",
      "fullTitle": "Delete Project:  supports a dry run mode",
      "timedOut": false,
      "duration": 5170,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> dryRun, project_id, results, tally;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            dryRun = <span class=\"hljs-literal\">true</span>;<br>                            assert.isOk(project);<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            results = _context4.sent;<br>                            assert.isOk(results);<br>                            tally = results.val;<br>                            assert.isOk(tally);<br>                            _context4.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkTally(tally, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context4.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> confirmDemoProjectCoverage(tally, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ec5cefa7-4241-48a6-a731-9a4a9d005a2e",
      "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
      "skipped": false
    },
    {
      "title": "deletes the indicated project",
      "fullTitle": "Delete Project:  deletes the indicated project",
      "timedOut": false,
      "duration": 7273,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> dryRun, project_id, results, tally;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>); <span class=\"hljs-comment\">// test take up to 12 seconds</span><br>                            _context5.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            dryRun = <span class=\"hljs-literal\">false</span>;<br>                            assert.isOk(project);<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            _context5.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            results = _context5.sent;<br>                            assert.isOk(results);<br>                            tally = results.val;<br>                            assert.isOk(tally);<br>                            _context5.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkTally(tally, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context5.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> confirmDemoProjectCoverage(tally, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "5f1524db-f257-4bf1-9ae5-3155875223e4",
      "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
      "skipped": false
    },
    {
      "title": "create project and get project back",
      "fullTitle": "Create project create project and get project back",
      "timedOut": false,
      "duration": 71,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context2.sent;<br>                            project = ret.val;<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.owner, user.id);<br>                            assert.equal(project.owner, userId);<br>                            assert.equal(project.users.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "f9c0d579-d772-40d7-86ae-2d551dfa51f2",
      "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
      "skipped": false
    },
    {
      "title": "create project and find project in all projects",
      "fullTitle": "Create project create project and find project in all projects",
      "timedOut": false,
      "duration": 73,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context3.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context3.sent;<br>                            project = ret.val;<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                            _context3.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.all();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            project_list = _context3.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "174bee0e-15da-4bef-be3e-49a37461837a",
      "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
      "skipped": false
    },
    {
      "title": "create project and find project by user",
      "fullTitle": "Create project create project and find project by user",
      "timedOut": false,
      "duration": 191,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            project_list = _context4.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            assert.equal(found_project.users.length, <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> field is user, here, but user_id in test above!!!</span><br>                            <span class=\"hljs-comment\">// is this the correct behaivor???</span><br>                            assert.equal(found_project.users[<span class=\"hljs-number\">0</span>].user, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "79a850ad-3bd9-43c1-8d6f-0c2348cd0d2a",
      "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
      "skipped": false
    },
    {
      "title": "create project, find by user, has full set of properties",
      "fullTitle": "Create project create project, find by user, has full set of properties",
      "timedOut": false,
      "duration": 191,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context5.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context5.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context5.sent;<br>                            project = ret.val;<br>                            _context5.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            project_list = _context5.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            assert.equal(found_project.users.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(found_project.users[<span class=\"hljs-number\">0</span>].user, userId);<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'events'</span>));<br>                            assert.equal(found_project.events.length, <span class=\"hljs-number\">0</span>);<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'processes'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'samples'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'files'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'experiments'</span>));<br>                            assert.equal(found_project.processes, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.samples, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.files, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.experiments, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "bd04b0e9-494c-4ea8-9b47-6d5ed74cbf75",
      "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
      "skipped": false
    },
    {
      "title": "create project, update name and description",
      "fullTitle": "Update project create project, update name and description",
      "timedOut": false,
      "duration": 110,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, top_directory, name, description, update_attrs, updated_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context6.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context6.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context6.sent;<br>                            project = ret.val;<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.owner, userId);<br>                            _context6.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            top_directory = _context6.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                            name = random_name();<br>                            description = <span class=\"hljs-string\">\"An alternate description\"</span>;<br>                            update_attrs = {<br>                                name: name,<br>                                description: description<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.update(project.id, update_attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            updated_project = _context6.sent;<br>                            assert.equal(updated_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(updated_project.owner, userId);<br>                            assert.equal(updated_project.name, name);<br>                            assert.equal(updated_project.description, description);<br>                            _context6.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            top_directory = _context6.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "f77e04a0-df34-4b33-8837-c27b8dbe9be0",
      "parentUUID": "f934f047-f029-47c4-9894-a58df5bfad04",
      "skipped": false
    },
    {
      "title": "individual test level",
      "fullTitle": "Function level individual test level",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "c454a24b-8ed5-4deb-bf80-5d73783ded12",
      "parentUUID": "5d3b927d-acba-4370-87e0-7c43b8597bb8",
      "skipped": false
    },
    {
      "title": "there is a user for testing",
      "fullTitle": "User with reset_password flag there is a user for testing",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "784e9322-31fd-4b8b-84c7-0868f4aedfe2",
      "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
      "skipped": false
    },
    {
      "title": "User with the reset password flag set",
      "fullTitle": "User with reset_password flag User with the reset password flag set",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, validate_uuid, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.uuid();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            validate_uuid = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.setUserPasswordResetFlag(user1Id, validate_uuid);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            result = _context3.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly added to the user\"</span>);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            user = _context3.sent;<br>                            assert.isTrue(user.reset_password, <span class=\"hljs-string\">\"The flag is set\"</span>);<br>                            assert.equal(user.validate_uuid, validate_uuid);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "7cb8f2d2-5aa9-47fa-8cb7-27326cea2d89",
      "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
      "skipped": false
    },
    {
      "title": "User reset password flag is cleared",
      "fullTitle": "User with reset_password flag User reset password flag is cleared",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.setUserPasswordResetFlag(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            result = _context4.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly added to the user\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            user = _context4.sent;<br>                            assert.isTrue(user.reset_password);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.clearUserPasswordResetFlag(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            result = _context4.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly cleared from the user\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            user = _context4.sent;<br>                            assert.isUndefined(user.reset_password, <span class=\"hljs-string\">\"The flag is cleared\"</span>);<br>                            assert.isUndefined(user.validate_uuid, <span class=\"hljs-string\">\"The flag is cleared\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "4b3adabd-0d8d-415b-b8e6-e90ddc861c00",
      "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
      "skipped": false
    },
    {
      "title": "create a sample set",
      "fullTitle": "Create Sample create a sample set",
      "timedOut": false,
      "duration": 146,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sampleName1, sampleName2, sampleNameList, sampleNameArgs, results, sampleList, sample1, sample2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            sampleName1 = <span class=\"hljs-string\">\"Sample1 For Test\"</span>;<br>                            sampleName2 = <span class=\"hljs-string\">\"Sample2 For Test\"</span>;<br>                            sampleNameList = [sampleName1, sampleName2];<br>                            sampleNameArgs = [];<br>                            sampleNameList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{<br>                                sampleNameArgs.push({ name: name });<br>                            });<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.createSamples(project.id, createSampleProcess.id, sampleNameArgs, project.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.samples);<br>                            sampleList = results.val.samples;<br>                            assert.isOk(sampleList);<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            sample1 = sampleList[<span class=\"hljs-number\">0</span>];<br>                            assert.isOk(sample1);<br>                            assert.equal(sample1.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample1.name, sampleName1);<br>                            sample2 = sampleList[<span class=\"hljs-number\">1</span>];<br>                            assert.isOk(sample2);<br>                            assert.equal(sample2.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample2.name, sampleName2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "0ffa658f-3fe3-41a6-8c4b-c93b55f80988",
      "parentUUID": "6fdf4d06-f29d-4db0-adcb-680176e87613",
      "skipped": false
    },
    {
      "title": "get samples by id",
      "fullTitle": "Get Samples get samples by id",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sample, experiments, processes, checks, c, name, direction, found, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getSample(sample1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results.val);<br>                            sample = results.val;<br>                            assert.equal(sample.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample.name, sample1.name);<br>                            experiments = sample.experiments;<br>                            assert.equal(experiments.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(experiments[<span class=\"hljs-number\">0</span>].id, experiment.id);<br>                            processes = sample.processes;<br>                            assert.equal(processes.length, <span class=\"hljs-number\">3</span>);<br>                            checks = [{ name: createSampleProcess.name, direction: <span class=\"hljs-string\">'out'</span> }, { name: transformationProcess1.name, direction: <span class=\"hljs-string\">'in'</span> }, { name: transformationProcess1.name, direction: <span class=\"hljs-string\">'out'</span> }];<br>                            <span class=\"hljs-keyword\">for</span> (c = <span class=\"hljs-number\">0</span>; c &lt; checks.length; c++) {<br>                                name = checks[c].name;<br>                                direction = checks[c].direction;<br>                                found = <span class=\"hljs-literal\">false</span>;<br>                                <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; processes.length; i++) {<br>                                    <span class=\"hljs-keyword\">if</span> (name === processes[i].name &amp;&amp; direction === processes[i].direction) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                }<br>                                assert(found, <span class=\"hljs-string\">'Missing process for sample '</span> + sample1.name + <span class=\"hljs-string\">': expected name = \\''</span> + name + <span class=\"hljs-string\">'\\' with direction \\''</span> + direction + <span class=\"hljs-string\">'\\''</span>);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "6b479c2a-35a7-4b92-b5ce-70c048fd6683",
      "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
      "skipped": false
    },
    {
      "title": "gets all samples for experiment",
      "fullTitle": "Get Samples gets all samples for experiment",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sampleList, testTable, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getAllSamplesForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results.val);<br>                            sampleList = results.val;<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            testTable = {};<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleList.length; i++) {<br>                                testTable[sampleList[i].id] = sampleList[i];<br>                            }<br>                            assert.isOk(testTable[sample1.id]);<br>                            assert.equal(testTable[sample1.id].name, sample1.name);<br>                            assert.isOk(testTable[sample2.id]);<br>                            assert.equal(testTable[sample2.id].name, sample2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "32a871db-13cd-4135-b51d-7e791fe88a37",
      "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
      "skipped": false
    },
    {
      "title": "gets all samples for project",
      "fullTitle": "Get Samples gets all samples for project",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sampleList, testTable, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getAllSamplesForProject(project.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context4.sent;<br>                            assert.isOk(results.val);<br>                            sampleList = results.val;<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            testTable = {};<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleList.length; i++) {<br>                                testTable[sampleList[i].id] = sampleList[i];<br>                            }<br>                            assert.isOk(testTable[sample1.id]);<br>                            assert.equal(testTable[sample1.id].name, sample1.name);<br>                            assert.isOk(testTable[sample2.id]);<br>                            assert.equal(testTable[sample2.id].name, sample2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "7ca6619d-cbf3-442f-b602-38eb31dca0e4",
      "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
      "skipped": false
    },
    {
      "title": "individual test level",
      "fullTitle": "Function level individual test level",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "f0cb6506-8b07-4f1e-a804-3c50bfc5c210",
      "parentUUID": "656aaefa-f1fa-4772-9651-1bef4fb0c7c7",
      "skipped": false
    },
    {
      "title": "each users exist - internal use",
      "fullTitle": "Standard Test Users each users exist - internal use",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> users, ids, i, _user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUsers();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            users = _context2.sent;<br>                            ids = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; users.length; i++) {<br>                                _user = users[i];<br>                                ids.push(_user.id);<br>                            }<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"test@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"another@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"admin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"tadmin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "8dd518eb-2ecb-4656-8e76-c3d6da9ce481",
      "parentUUID": "35b97aba-8025-4ac2-8bdc-5e9dd400a6ac",
      "skipped": false
    },
    {
      "title": "each users exist - external use",
      "fullTitle": "Standard Test Users each users exist - external use",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> users, ids, i, _user2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getAllUsersExternal();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            users = _context3.sent;<br>                            ids = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; users.length; i++) {<br>                                _user2 = users[i];<br>                                ids.push(_user2.id);<br>                            }<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"test@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"another@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"admin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"tadmin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "edfb93ff-6b53-4803-9454-8edc3abca5ff",
      "parentUUID": "35b97aba-8025-4ac2-8bdc-5e9dd400a6ac",
      "skipped": false
    },
    {
      "title": "can store values",
      "fullTitle": "User Profile can store values",
      "timedOut": false,
      "duration": 87,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> name, value, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            name = random_name(<span class=\"hljs-string\">\"test value - \"</span>);<br>                            value = name;<br>                            _context4.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.storeInUserProfile(userId, name, value);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.storeInUserProfile(userId, name, value);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.getFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.clearFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.clearFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            probe = _context4.sent;<br>                            assert.isNull(probe);<br>                            _context4.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.getFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            probe = _context4.sent;<br>                            assert.isNull(probe);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "7f4a351e-7e2e-4ac6-a2ed-f37864b54bc2",
      "parentUUID": "ec285e69-04f1-49d8-b350-6dc9e8021f62",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "User for test exists",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.apikey, demoProjectTestUserKey);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "f3ae0de2-a88e-4c94-90fb-d9749413ed25",
      "parentUUID": "5f6627d1-dd6c-4b8f-a16f-6fb848d054e7",
      "skipped": false
    },
    {
      "title": "exists in folder",
      "fullTitle": "List of files for build exists in folder",
      "timedOut": false,
      "duration": 55,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> i, checksumAndFilename, expectedChecksum, filename, path, checksum;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            assert(fs.existsSync(demoProjectConf.fullDatapath), <span class=\"hljs-string\">\"missing test datafile dir \"</span> + demoProjectConf.fullDatapath);<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context3.next = <span class=\"hljs-number\">15</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumAndFilename = helper.filesDescriptions()[i];<br>                            expectedChecksum = checksumAndFilename[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumAndFilename[<span class=\"hljs-number\">1</span>];<br>                            path = demoProjectConf.fullDatapath + <span class=\"hljs-string\">'/'</span> + filename;<br>                            assert(fs.existsSync(path), <span class=\"hljs-string\">\"missing test datafile \"</span> + demoProjectConf.fullDatapath + <span class=\"hljs-string\">\"/\"</span> + filename);<br>                            _context3.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> md5File(path);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            checksum = _context3.sent;<br>                            assert(expectedChecksum == checksum, <span class=\"hljs-string\">\"Checksums should be equal for file: \"</span> + filename + <span class=\"hljs-string\">\"; but expected \"</span> + expectedChecksum + <span class=\"hljs-string\">\" and got \"</span> + checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            i++;<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "99ed39b5-0179-4179-9839-8e7b06eadff4",
      "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
      "skipped": false
    },
    {
      "title": "can be inserted in database",
      "fullTitle": "List of files for build can be inserted in database",
      "timedOut": false,
      "duration": 1320,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, projectName, attrs, ret, project, top_directory, tempDir, fileResults, fileCount, i, checksumFilenameAndMimetype, expectedChecksum, filename, mimetype, path, checksum, stats, fileSizeInBytes, source, args, file, _i, _checksumFilenameAndMimetype, _expectedChecksum, _filename, _file;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            projectName = random_name();<br>                            attrs = {<br>                                name: projectName,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            assert.equal(projectName, project.name);<br>                            assert.equal(user.id, project.owner);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            top_directory = _context4.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                            tempDir = os.tmpdir();<br>                            fileResults = {};<br>                            fileCount = <span class=\"hljs-number\">0</span>;<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context4.next = <span class=\"hljs-number\">49</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumFilenameAndMimetype = helper.filesDescriptions()[i];<br>                            expectedChecksum = checksumFilenameAndMimetype[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumFilenameAndMimetype[<span class=\"hljs-number\">1</span>];<br>                            mimetype = checksumFilenameAndMimetype[<span class=\"hljs-number\">2</span>];<br>                            path = demoProjectConf.fullDatapath + <span class=\"hljs-string\">'/'</span> + filename;<br>                            assert(fs.existsSync(path), <span class=\"hljs-string\">\"missing test datafile \"</span> + demoProjectConf.fullDatapath + <span class=\"hljs-string\">\"/\"</span> + filename);<br>                            _context4.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> md5File(path);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            checksum = _context4.sent;<br>                            assert(expectedChecksum == checksum, <span class=\"hljs-string\">\"Checksums should be equal for file: \"</span> + filename + <span class=\"hljs-string\">\"; but expected \"</span> + expectedChecksum + <span class=\"hljs-string\">\" and got \"</span> + checksum);<br>                            stats = fs.statSync(path);<br>                            fileSizeInBytes = stats.size;<br>                            _context4.next = <span class=\"hljs-number\">36</span>;<br>                            <span class=\"hljs-keyword\">return</span> copyOne(path, tempDir);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                            source = _context4.sent;<br>                            path = source.path;<br>                            args = {<br>                                name: filename,<br>                                checksum: checksum,<br>                                mediatype: fileUtils.mediaTypeDescriptionsFromMime(mimetype),<br>                                filesize: fileSizeInBytes,<br>                                filepath: path<br>                            };<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.ingestSingleLocalFile(project.id, top_directory.id, user.id, args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            file = _context4.sent;<br>                            should.exist(file);<br>                            assert.equal(file.name, filename);<br>                            assert.equal(file.checksum, checksum);<br>                            fileResults[file.checksum] = file;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            i++;<br>                            _context4.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            <span class=\"hljs-keyword\">for</span> (_i = <span class=\"hljs-number\">0</span>; _i &lt; helper.filesDescriptions().length; _i++) {<br>                                _checksumFilenameAndMimetype = helper.filesDescriptions()[_i];<br>                                _expectedChecksum = _checksumFilenameAndMimetype[<span class=\"hljs-number\">0</span>];<br>                                _filename = _checksumFilenameAndMimetype[<span class=\"hljs-number\">1</span>];<br>                                _file = fileResults[_expectedChecksum];<br>                                should.exist(_file, <span class=\"hljs-string\">\"file with filname = \"</span> + _filename + <span class=\"hljs-string\">\" in not in the results\"</span>);<br>                                assert.equal(_file.name, _filename);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">50</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "5dd335aa-b879-402a-b12b-a31132724959",
      "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
      "skipped": false
    },
    {
      "title": "is in the database",
      "fullTitle": "List of files for build is in the database",
      "timedOut": false,
      "duration": 119,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> i, checksumAndFilename, checksum, filename, fileList, file, _i2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            assert(fs.existsSync(demoProjectConf.fullDatapath), <span class=\"hljs-string\">\"missing test datafile dir \"</span> + demoProjectConf.fullDatapath);<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context5.next = <span class=\"hljs-number\">19</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumAndFilename = helper.filesDescriptions()[i];<br>                            checksum = checksumAndFilename[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumAndFilename[<span class=\"hljs-number\">1</span>];<br>                            _context5.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getAllByChecksum(checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            fileList = _context5.sent;<br>                            file = <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i2 = <span class=\"hljs-number\">0</span>; _i2 &lt; fileList.length; _i2++) {<br>                                <span class=\"hljs-keyword\">if</span> (!fileList[_i2].usesid) file = fileList[_i2];<br>                            }<br>                            assert(file, <span class=\"hljs-string\">\"Missing original file for \"</span> + filename);<br>                            _context5.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            file = _context5.sent;<br>                            assert(file.name == filename, <span class=\"hljs-string\">\"Filename for file by checksum for filename = \"</span> + filename + <span class=\"hljs-string\">\"; with checksum = \"</span> + checksum + <span class=\"hljs-string\">\"; expected \"</span> + filename + <span class=\"hljs-string\">\" but found \"</span> + file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            i++;<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "c3bd331d-a0be-40b3-be35-e7f07a7cb375",
      "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
      "skipped": false
    },
    {
      "title": "checkes for missing files in folder",
      "fullTitle": "Build Demo Project helper supporting functions checkes for missing files in folder",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInFolder(demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            missingFiles = _context6.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "78700e6a-5025-456f-be3e-189dbd60b2cb",
      "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
      "skipped": false
    },
    {
      "title": "adds all files to top dir of a test Demo Project",
      "fullTitle": "Build Demo Project helper supporting functions adds all files to top dir of a test Demo Project",
      "timedOut": false,
      "duration": 1375,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, projectName, attrs, ret, project, files, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context7.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context7.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            projectName = random_name();<br>                            attrs = {<br>                                name: projectName,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context7.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context7.sent;<br>                            project = ret.val;<br>                            assert.equal(projectName, project.name);<br>                            assert.equal(user.id, project.owner);<br>                            _context7.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            _context7.next = <span class=\"hljs-number\">16</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            files = _context7.sent;<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context7.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            missingFiles = _context7.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "acc62884-c219-46fe-8a08-bb651ad05524",
      "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
      "skipped": false
    },
    {
      "title": "create a table of all templates",
      "fullTitle": "Build Demo Project helper supporting functions create a table of all templates",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> table;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context8.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.makeTemplateTable();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            table = _context8.sent;<br>                            assert.isOk(table, <span class=\"hljs-string\">\"table is undefined\"</span>);<br>                            assert(!_.isEmpty(table), <span class=\"hljs-string\">\"table is empty\"</span>);<br>                            assert.isOk(table[demoProjectConf.createSamplesTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.createSamplesTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.sectioningTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.sectioningTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.ebsdTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.ebsdTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.epmaTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.epmaTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "32468e24-feeb-496c-86e9-859ddddfe222",
      "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
      "skipped": false
    },
    {
      "title": "demo project test user exists",
      "fullTitle": "Build Demo Project helper main functions demo project test user exists",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context9.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            assert.equal(user.name, demoProjectTestUserId);<br>                            assert.equal(user.apikey, demoProjectTestUserKey);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "b90a83ad-dbd6-475b-a5fd-c8e9dd56e955",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the Demo Project",
      "fullTitle": "Build Demo Project helper main functions find or create the Demo Project",
      "timedOut": false,
      "duration": 75,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10$</span>(<span class=\"hljs-params\">_context10</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context10.prev = _context10.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context10.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context10.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            <span class=\"hljs-comment\">// Note create project returns the project if it already exists, by name</span><br>                            <span class=\"hljs-comment\">// It does not create a duplicate!</span><br>                            _context10.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context10.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.isNotNull(project, <span class=\"hljs-string\">\"project is not null\"</span>);<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            assert(project.description.includes(demoProjectConf.demoProjectDescription)); <span class=\"hljs-comment\">// may have been turned into html!!</span><br>                            assert.equal(project.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context10.stop();<br>                    }<br>                }<br>            }, _callee10, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "f3a38fac-47a7-477a-a994-b3ddac6ab770",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the Demo Experiment",
      "fullTitle": "Build Demo Project helper main functions find or create the Demo Experiment",
      "timedOut": false,
      "duration": 82,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11$</span>(<span class=\"hljs-params\">_context11</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context11.prev = _context11.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context11.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context11.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context11.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context11.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context11.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            valOrError = _context11.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.isNotNull(experiment, <span class=\"hljs-string\">\"experiment is not null\"</span>);<br>                            assert.equal(experiment.otype, <span class=\"hljs-string\">\"experiment\"</span>);<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            assert(experiment.description.includes(demoProjectConf.demoProjectExperimentDescription)); <span class=\"hljs-comment\">// may have been turned into html!!</span><br>                            assert.equal(experiment.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context11.stop();<br>                    }<br>                }<br>            }, _callee11, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "5bb8fb39-da04-4dda-8caa-afbbe348657e",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create a Demo Process",
      "fullTitle": "Build Demo Project helper main functions find or create a Demo Process",
      "timedOut": false,
      "duration": 198,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processData, processName, templateId, process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12$</span>(<span class=\"hljs-params\">_context12</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context12.prev = _context12.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context12.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context12.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context12.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context12.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            processData = demoProjectConf.processesData[<span class=\"hljs-number\">0</span>];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context12.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            assert.equal(process.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                            assert.equal(process.name, processName);<br>                            assert.equal(process.template_id, templateId);<br>                            assert.equal(process.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context12.stop();<br>                    }<br>                }<br>            }, _callee12, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "1265fab0-d8ce-45ad-bdb3-300e01a8ba94",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create all Demo Processes",
      "fullTitle": "Build Demo Project helper main functions find or create all Demo Processes",
      "timedOut": false,
      "duration": 889,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, templateId, _process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13$</span>(<span class=\"hljs-params\">_context13</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context13.prev = _context13.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context13.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context13.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context13.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context13.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context13.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                templateId = processData.templateId;<br>                                _process = processes[i];<br>                                assert.equal(_process.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process.name, processName);<br>                                assert.equal(_process.template_id, templateId);<br>                                assert.equal(_process.owner, demoProjectTestUserId);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context13.stop();<br>                    }<br>                }<br>            }, _callee13, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "474bef28-2b9f-4723-ac00-3a56d987036f",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the output samples for a given Process",
      "fullTitle": "Build Demo Project helper main functions find or create the output samples for a given Process",
      "timedOut": false,
      "duration": 416,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, mapEntry, processData, processName, templateId, process, sampleIndexList, sampleNames, i, samples, _i3, sample, name;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14$</span>(<span class=\"hljs-params\">_context14</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context14.prev = _context14.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context14.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context14.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context14.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context14.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            mapEntry = demoProjectConf.outputSampleIndexMap[<span class=\"hljs-number\">2</span>];<br>                            processData = demoProjectConf.processesData[mapEntry.processIndex];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context14.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleNames = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleIndexList.length; i++) {<br>                                sampleNames.push(demoProjectConf.sampleNameData[sampleIndexList[i]]);<br>                            }<br>                            _context14.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindProcessOutputSamples(project, experiment, process, sampleNames);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindProcessOutputSamples: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, sampleNames.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i3 = <span class=\"hljs-number\">0</span>; _i3 &lt; sampleNames.length; _i3++) {<br>                                sample = samples[_i3];<br>                                name = sampleNames[_i3];<br>                                assert.equal(name, sample.name);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context14.stop();<br>                    }<br>                }<br>            }, _callee14, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "7f4ec51c-ab38-4f81-8ff8-ffb4477a318d",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the output samples for all Process",
      "fullTitle": "Build Demo Project helper main functions find or create the output samples for all Process",
      "timedOut": false,
      "duration": 402,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process2, samples, _i4, sample, name;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15$</span>(<span class=\"hljs-params\">_context15</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context15.prev = _context15.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context15.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context15.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context15.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context15.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context15.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process2 = processes[i];<br>                                assert.equal(_process2.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process2.name, processName);<br>                            }<br>                            _context15.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i4 = <span class=\"hljs-number\">0</span>; _i4 &lt; demoProjectConf.sampleNameData.length; _i4++) {<br>                                sample = samples[_i4];<br>                                name = demoProjectConf.sampleNameData[_i4];<br>                                assert.equal(name, sample.name);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">32</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context15.stop();<br>                    }<br>                }<br>            }, _callee15, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "c82b234e-0009-4e27-86a6-d080a99abda9",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the input samples for a given Process",
      "fullTitle": "Build Demo Project helper main functions find or create the input samples for a given Process",
      "timedOut": false,
      "duration": 330,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process3, samples, mapEntry, process, sampleList, sampleIndexList, inputSampleList, missingSamples;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16$</span>(<span class=\"hljs-params\">_context16</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context16.prev = _context16.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context16.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context16.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context16.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context16.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context16.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process3 = processes[i];<br>                                assert.equal(_process3.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process3.name, processName);<br>                            }<br>                            _context16.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            mapEntry = demoProjectConf.inputSampleIndexMap[<span class=\"hljs-number\">0</span>];<br>                            process = processes[mapEntry.processIndex];<br>                            sampleList = [];<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleIndexList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{<br>                                sampleList.push(samples[sampleIndexList[index]]);<br>                            });<br>                            _context16.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindInputSamplesForProcess(project, experiment, process, sampleList);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSampleForProcess: \"</span> + valOrError.error);<br>                            inputSampleList = valOrError.val;<br>                            assert.isOk(inputSampleList);<br>                            assert.lengthOf(inputSampleList, sampleIndexList.length);<br>                            missingSamples = [];<br>                            sampleList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">sample</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = <span class=\"hljs-literal\">false</span>;<br>                                inputSampleList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">inputSample</span>) </span>{<br>                                    <span class=\"hljs-keyword\">if</span> (sample.id == inputSample.id) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                });<br>                                <span class=\"hljs-keyword\">if</span> (!found) {<br>                                    misingSamples.push(sample);<br>                                }<br>                            });<br>                            assert.lengthOf(missingSamples, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"Samples missing from input_samplesa of perocess\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context16.stop();<br>                    }<br>                }<br>            }, _callee16, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "fc627aa8-c635-4604-8b04-26173c30b274",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the input samples for all Processes",
      "fullTitle": "Build Demo Project helper main functions find or create the input samples for all Processes",
      "timedOut": false,
      "duration": 461,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process4, samples, inputSampleListList, _i5, mapEntry, _processName, indexList, inputSampleList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17$</span>(<span class=\"hljs-params\">_context17</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context17.prev = _context17.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context17.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context17.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context17.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context17.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context17.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process4 = processes[i];<br>                                assert.equal(_process4.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process4.name, processName);<br>                            }<br>                            _context17.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            _context17.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindInputSamplesForAllProcesses(project, experiment, processes, samples, demoProjectConf.inputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindInputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            inputSampleListList = valOrError.val;<br>                            assert.isOk(inputSampleListList);<br>                            assert.lengthOf(inputSampleListList, demoProjectConf.inputSampleIndexMap.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i5 = <span class=\"hljs-number\">0</span>; _i5 &lt; inputSampleListList.length; _i5++) {<br>                                mapEntry = demoProjectConf.inputSampleIndexMap[_i5];<br>                                _processName = processes[mapEntry.processIndex].name;<br>                                indexList = mapEntry.sampleIndexList;<br>                                inputSampleList = inputSampleListList[_i5];<br>                                assert.lengthOf(inputSampleList, indexList.length, <span class=\"hljs-string\">\"Missing samples for process with name: \"</span> + _processName);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context17.stop();<br>                    }<br>                }<br>            }, _callee17, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ee86bea1-5a39-46ab-a399-84b1e0f38b34",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "add the setup values for a given Process",
      "fullTitle": "Build Demo Project helper main functions add the setup values for a given Process",
      "timedOut": false,
      "duration": 583,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process5, _i6, _processData, _processName2, _process6, processIndex, process, templateId, templateTable, template, templatePropertyList, templetPropertyTable, processSetupPropertyList, processSetupTable, valuesForSetup, args, updatedProcess, updatedProperties, _i7, probe, updatedPropertyTable;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18$</span>(<span class=\"hljs-params\">_context18</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context18.prev = _context18.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context18.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context18.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context18.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context18.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context18.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process5 = processes[i];<br>                                assert.equal(_process5.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process5.name, processName);<br>                            }<br>                            <span class=\"hljs-comment\">// Note: refresh process list. If they were created for the first time on the above call, then the</span><br>                            <span class=\"hljs-comment\">// body of the returned process is not sufficently decorated to support inserting properties;</span><br>                            <span class=\"hljs-comment\">// however, on refresh it is. Needs to be investigated.</span><br>                            _context18.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i6 = <span class=\"hljs-number\">0</span>; _i6 &lt; demoProjectConf.processesData.length; _i6++) {<br>                                _processData = demoProjectConf.processesData[_i6];<br>                                _processName2 = _processData.name;<br>                                _process6 = processes[_i6];<br>                                assert.equal(_process6.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process6.name, _processName2);<br>                            }<br>                            processIndex = <span class=\"hljs-number\">0</span>;<br>                            process = processes[processIndex];<br>                            templateId = process[<span class=\"hljs-string\">'template_id'</span>];<br>                            _context18.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.makeTemplateTable();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            templateTable = _context18.sent;<br>                            template = templateTable[templateId];<br>                            templatePropertyList = template.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            templetPropertyTable = {};<br>                            templatePropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                templetPropertyTable[property.attribute] = property;<br>                            });<br>                            processSetupPropertyList = process.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            processSetupTable = {};<br>                            processSetupPropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                processSetupTable[property.attribute] = property;<br>                            });<br>                            assert.lengthOf(templatePropertyList, processSetupPropertyList.length, <span class=\"hljs-string\">\"Lengths of property-list in process and template should match\"</span>);<br>                            processSetupPropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">check</span>) </span>{<br>                                assert.ok(templetPropertyTable[check.attribute], <span class=\"hljs-string\">\"unexpected property attribute in process: \"</span> + check.attribute);<br>                                assert.equal(templetPropertyTable[check.attribute].otype, check.otype, <span class=\"hljs-string\">\"Type mismatch for property with attribute: \"</span> + check.attribute);<br>                            });<br>                            valuesForSetup = demoProjectConf.processesData[processIndex].properties;<br>                            args = [];<br>                            valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> property = processSetupTable[setupValue.attribute];<br>                                <span class=\"hljs-keyword\">if</span> (property) {<br>                                    property.setup_attribute = <span class=\"hljs-string\">\"instrument\"</span>;<br>                                    property.value = setupValue.value;<br>                                    <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                        property.unit = setupValue.unit;<br>                                    }<br>                                    args.push(property);<br>                                } <span class=\"hljs-keyword\">else</span> {<br>                                    assert.fail(<span class=\"hljs-string\">\"Template is missing expected attribute: \"</span> + setupValue.attribute);<br>                                }<br>                            });<br>                            _context18.next = <span class=\"hljs-number\">52</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcessSetupProperties(project, experiment, process, args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">52</span>:<br>                            valOrError = _context18.sent;<br>                            <span class=\"hljs-keyword\">if</span> (valOrError.error) {<br>                                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"           Error expanded from setup properties: \"</span>, (<span class=\"hljs-number\">0</span>, _stringify2.default)(valOrError.error));<br>                            }<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoSetupProperties: \"</span> + valOrError.error);<br>                            updatedProcess = valOrError.val;<br>                            assert.equal(process.id, updatedProcess.id, <span class=\"hljs-string\">'Updated process for \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                            updatedProperties = updatedProcess.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            _context18.next = <span class=\"hljs-number\">60</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">60</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i7 = <span class=\"hljs-number\">0</span>; _i7 &lt; demoProjectConf.processesData.length; _i7++) {<br>                                probe = processes[_i7];<br>                                <span class=\"hljs-keyword\">if</span> (probe.id == process.id) {<br>                                    updatedProcess = probe;<br>                                    updatedProperties = probe.setup[<span class=\"hljs-number\">0</span>].properties;<br>                                }<br>                            }<br>                            assert.equal(process.id, updatedProcess.id, <span class=\"hljs-string\">'Updated process for \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                            updatedPropertyTable = {};<br>                            updatedProperties.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                updatedPropertyTable[property.attribute] = property;<br>                            });<br>                            valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> property = updatedPropertyTable[setupValue.attribute];<br>                                <span class=\"hljs-keyword\">if</span> (property) {<br>                                    <span class=\"hljs-keyword\">if</span> (property.value.name) {<br>                                        assert.ok(property.value.value);<br>                                        assert.ok(setupValue.value.name);<br>                                        assert.ok(setupValue.value.value);<br>                                        assert.equal(property.value.name, setupValue.value.name);<br>                                        assert.equal(property.value.value, setupValue.value.value);<br>                                    } <span class=\"hljs-keyword\">else</span> {<br>                                        assert.equal(property.value, setupValue.value, <span class=\"hljs-string\">\"Value for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                    }<br>                                    <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                        assert.equal(property.unit, setupValue.unit, <span class=\"hljs-string\">\"Unit for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                    }<br>                                } <span class=\"hljs-keyword\">else</span> {<br>                                    assert.fail(<span class=\"hljs-string\">\"Process \"</span> + process.name + <span class=\"hljs-string\">\" is missing expected setup value attribute: \"</span> + setupValue.attribute);<br>                                }<br>                            });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">70</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context18.stop();<br>                    }<br>                }<br>            }, _callee18, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "fe5889b6-d453-41f1-ad0b-3be1a671bbd3",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "add the setup values for all Processes",
      "fullTitle": "Build Demo Project helper main functions add the setup values for all Processes",
      "timedOut": false,
      "duration": 912,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee19</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process7, _i8, _processData2, _processName3, _process8, processIndex, updatedProcess, updatedProperties, valuesForSetup;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee19$</span>(<span class=\"hljs-params\">_context19</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context19.prev = _context19.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context19.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context19.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context19.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context19.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context19.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process7 = processes[i];<br>                                assert.equal(_process7.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process7.name, processName);<br>                            }<br>                            <span class=\"hljs-comment\">// Note: refresh process list. If they were created for the first time on the above call, then the</span><br>                            <span class=\"hljs-comment\">// body of the returned process is not sufficently decorated to support inserting properties;</span><br>                            <span class=\"hljs-comment\">// however, on refresh it is. Needs to be investigated.</span><br>                            _context19.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i8 = <span class=\"hljs-number\">0</span>; _i8 &lt; demoProjectConf.processesData.length; _i8++) {<br>                                _processData2 = demoProjectConf.processesData[_i8];<br>                                _processName3 = _processData2.name;<br>                                _process8 = processes[_i8];<br>                                assert.equal(_process8.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process8.name, _processName3);<br>                            }<br>                            _context19.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindSetupPropertiesForAllDemoProcesses(project, experiment, processes);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindSetupPropertiesForAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (processIndex = <span class=\"hljs-number\">0</span>; processIndex &lt; processes.length; processIndex++) {<br>                                updatedProcess = processes[processIndex];<br>                                updatedProperties = updatedProcess.setup[<span class=\"hljs-number\">0</span>].properties;<br>                                valuesForSetup = demoProjectConf.processesData[processIndex].properties;<br>                                <span class=\"hljs-keyword\">if</span> (valuesForSetup &amp;&amp; valuesForSetup.length &lt; <span class=\"hljs-number\">0</span>) {<br>                                    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>                                        <span class=\"hljs-keyword\">var</span> updatedPropertyTable = {};<br>                                        updatedProperties.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                            updatedPropertyTable[property.attribute] = property;<br>                                        });<br>                                        valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                            <span class=\"hljs-keyword\">var</span> property = updatedPropertyTable[setupValue.attribute];<br>                                            <span class=\"hljs-keyword\">if</span> (property) {<br>                                                assert.equal(property.value, setupValue.value, <span class=\"hljs-string\">\"Value for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                                <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"unit - \"</span> + setupValue.attribute + <span class=\"hljs-string\">': '</span> + property.unit);<br>                                                    assert.equal(property.unit, setupValue.unit, <span class=\"hljs-string\">\"Unit for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                                }<br>                                            } <span class=\"hljs-keyword\">else</span> {<br>                                                assert.fail(<span class=\"hljs-string\">\"Process \"</span> + process.name + <span class=\"hljs-string\">\" is missing expected setup value attribute: \"</span> + setupValue.attribute);<br>                                            }<br>                                        });<br>                                    })();<br>                                }<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context19.stop();<br>                    }<br>                }<br>            }, _callee19, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ebe300a5-15af-41ea-b51f-bfe718cc85a5",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "add the measurement values for the only Process with a measurement",
      "fullTitle": "Build Demo Project helper main functions add the measurement values for the only Process with a measurement",
      "timedOut": false,
      "duration": 375,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee20</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, mapEntry, processName, templateId, process, sampleIndexList, sampleNames, i, samples, _i9, _sample, name, processData, measurement, sample, updatedProcess, updatedmeasurement, _i10;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee20$</span>(<span class=\"hljs-params\">_context20</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context20.prev = _context20.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context20.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context20.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context20.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context20.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context20.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            mapEntry = demoProjectConf.outputSampleIndexMap[<span class=\"hljs-number\">0</span>];<br>                            processData = demoProjectConf.processesData[mapEntry.processIndex];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context20.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleNames = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleIndexList.length; i++) {<br>                                sampleNames.push(demoProjectConf.sampleNameData[sampleIndexList[i]]);<br>                            }<br>                            _context20.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindProcessOutputSamples(project, experiment, process, sampleNames);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindProcessOutputSamples: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, sampleNames.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i9 = <span class=\"hljs-number\">0</span>; _i9 &lt; sampleNames.length; _i9++) {<br>                                _sample = samples[_i9];<br>                                name = sampleNames[_i9];<br>                                assert.equal(name, _sample.name);<br>                            }<br>                            _context20.next = <span class=\"hljs-number\">42</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">42</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            processData = demoProjectConf.processesData[<span class=\"hljs-number\">0</span>];<br>                            measurement = processData.measurements[<span class=\"hljs-number\">0</span>];<br>                            _context20.next = <span class=\"hljs-number\">49</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.updateMeasurementForProcessSamples(process, measurement);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindMeasurement: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            sample = samples[<span class=\"hljs-number\">0</span>];<br>                            updatedProcess = <span class=\"hljs-literal\">null</span>;<br>                            sample.processes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">probe</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (probe.id == process.id) {<br>                                    updatedProcess = probe;<br>                                }<br>                            });<br>                            updatedmeasurement = updatedProcess.measurements[<span class=\"hljs-number\">0</span>];<br>                            assert.equal(measurement.attribute, updatedmeasurement.attribute);<br>                            assert.equal(measurement.name, updatedmeasurement.name);<br>                            assert.equal(measurement.otype, updatedmeasurement.otype);<br>                            assert.equal(measurement.unit, updatedmeasurement.unit);<br>                            assert.lengthOf(updatedmeasurement.value, measurement.value.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i10 = <span class=\"hljs-number\">0</span>; _i10 &lt; measurement.value.length; _i10++) {<br>                                assert.equal(updatedmeasurement.value[_i10].element, measurement.value[_i10].element);<br>                                assert.equal(updatedmeasurement.value[_i10].value, measurement.value[_i10].value);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">62</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context20.stop();<br>                    }<br>                }<br>            }, _callee20, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "a3c9db64-8200-4103-9f13-584a53b7ff0c",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find and attache the demo-project files to project",
      "fullTitle": "Build Demo Project helper main functions find and attache the demo-project files to project",
      "timedOut": false,
      "duration": 1350,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee21</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, files, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee21$</span>(<span class=\"hljs-params\">_context21</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context21.prev = _context21.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context21.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context21.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context21.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context21.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context21.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            _context21.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            files = _context21.sent;<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context21.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            missingFiles = _context21.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context21.stop();<br>                    }<br>                }<br>            }, _callee21, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "53c12741-17e6-4c55-965a-7ada8b42243b",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "add the demo-project files to the experiment",
      "fullTitle": "Build Demo Project helper main functions add the demo-project files to the experiment",
      "timedOut": false,
      "duration": 886,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee22</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, files, i, checksum, file, processes, updatedProcesses, _loop, processIndex;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee22$</span>(<span class=\"hljs-params\">_context22</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context22.prev = _context22.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context22.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context22.sent;<br>                            _context22.next = <span class=\"hljs-number\">5</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context22.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            files = _context22.sent;<br>                            assert.lengthOf(files, demoProjectConf.checksumsFilesAndMimiTypes.length, <span class=\"hljs-string\">\"Files set is complete\"</span>);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.checksumsFilesAndMimiTypes.length; i++) {<br>                                checksum = demoProjectConf.checksumsFilesAndMimiTypes[i][<span class=\"hljs-number\">0</span>];<br>                                file = files[i];<br>                                assert.equal(checksum, file.checksum, <span class=\"hljs-string\">'Checksum for file: \\''</span> + file.name + <span class=\"hljs-string\">'\\''</span>);<br>                            }<br>                            _context22.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToExperimentProcesses(project, experiment, processes, files);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from addAllFilesToExperimentProcesses: \"</span> + valOrError.error);<br>                            updatedProcesses = valOrError.val;<br>                            assert.lengthOf(updatedProcesses, processes.length, <span class=\"hljs-string\">\"Processes with files added\"</span>);<br>                            _loop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_loop</span>(<span class=\"hljs-params\">processIndex</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> process = updatedProcesses[processIndex];<br>                                <span class=\"hljs-keyword\">var</span> fileIndexes = demoProjectConf.processFileIndexList[processIndex];<br>                                <span class=\"hljs-keyword\">var</span> expectedFiles = [];<br>                                fileIndexes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{<br>                                    expectedFiles.push(files[index]);<br>                                });<br>                                <span class=\"hljs-keyword\">var</span> processFileTable = {};<br>                                <span class=\"hljs-keyword\">var</span> processFiles = process.files;<br>                                processFiles.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>{<br>                                    processFileTable[file.checksum] = file;<br>                                });<br>                                expectedFiles.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">expectedFile</span>) </span>{<br>                                    <span class=\"hljs-keyword\">var</span> matchingFile = processFileTable[expectedFile.checksum];<br>                                    assert.ok(matchingFile, <span class=\"hljs-string\">'Expecting file \\''</span> + expectedFile.name + <span class=\"hljs-string\">'\\' in process \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                                    assert.equal(expectedFile.id, matchingFile.id);<br>                                });<br>                            };<br>                            <span class=\"hljs-keyword\">for</span> (processIndex = <span class=\"hljs-number\">0</span>; processIndex &lt; demoProjectConf.processFileIndexList.length; processIndex++) {<br>                                _loop(processIndex);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context22.stop();<br>                    }<br>                }<br>            }, _callee22, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "558d24de-9322-496e-bcbe-4d4c35838679",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "buid",
      "fullTitle": "Complete demo project buid",
      "timedOut": false,
      "duration": 1930,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee23</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, results, project, experiment, processes, samples, files, i, processData, processName, _process9, _i11, sample, name, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee23$</span>(<span class=\"hljs-params\">_context23</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context23.prev = _context23.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">5000</span>); <span class=\"hljs-comment\">// this test can take up to 5 seconds</span><br>                            _context23.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            user = _context23.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context23.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> buildDemoProject.findOrBuildAllParts(user, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context23.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            results = valOrError.val;<br>                            project = results.project;<br>                            experiment = results.experiment;<br>                            processes = results.processes;<br>                            samples = results.samples;<br>                            files = results.files;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            assert(project.description.includes(demoProjectConf.demoProjectDescription));<br>                            assert.equal(project.owner, demoProjectTestUserId);<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            assert(experiment.description.includes(demoProjectConf.demoProjectExperimentDescription));<br>                            assert.equal(experiment.owner, demoProjectTestUserId);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process9 = processes[i];<br>                                assert.equal(_process9.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process9.name, processName);<br>                            }<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i11 = <span class=\"hljs-number\">0</span>; _i11 &lt; demoProjectConf.sampleNameData.length; _i11++) {<br>                                sample = samples[_i11];<br>                                name = demoProjectConf.sampleNameData[_i11];<br>                                assert.equal(name, sample.name);<br>                            }<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context23.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            missingFiles = _context23.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context23.stop();<br>                    }<br>                }<br>            }, _callee23, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "c5c8c852-2ea0-48b2-bb95-7e067eeb68b9",
      "parentUUID": "c7dd15f6-e338-4a04-b460-e7c5cd84cb6c",
      "skipped": false
    }
  ],
  "allPending": [
    {
      "title": "checks DOI server status - raw",
      "fullTitle": "DOI Request -  checks DOI server status - raw",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "ccb8afc1-2a18-4155-93d9-324898529cb9",
      "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
      "skipped": false
    },
    {
      "title": "calls function to get DOI server status",
      "fullTitle": "DOI Request -  calls function to get DOI server status",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "46167db3-bde2-4d55-9ca5-5bce4a07382a",
      "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
      "skipped": false
    },
    {
      "title": "creates a test DOI - raw",
      "fullTitle": "DOI Request -  creates a test DOI - raw",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "3a2b4a56-7df1-450e-baff-5b716608ba64",
      "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
      "skipped": false
    },
    {
      "title": "mints a new DOI and puts into dataset record",
      "fullTitle": "DOI Request -  mints a new DOI and puts into dataset record",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "b3748386-b34a-4859-84c7-0a19642e0282",
      "parentUUID": "c307aea1-cf8b-43f2-97cc-477d123d3000",
      "skipped": false
    },
    {
      "title": "individual test level",
      "fullTitle": "Function level individual test level",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "01c7446d-17ea-43e3-b5b9-365433f879a9",
      "parentUUID": "11b90a72-ee4f-4fc7-99d1-8155cd675aeb",
      "skipped": false
    },
    {
      "title": "Will delete a file that has the uses id set",
      "fullTitle": "Delete Will delete a file that has the uses id set",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "e7a8d38c-0673-4bf7-9767-6486788f24b5",
      "parentUUID": "042222f8-f54a-4907-bab3-a269a10f82d6",
      "skipped": false
    },
    {
      "title": "Will delete a file but keep physical file when needed",
      "fullTitle": "Delete Will delete a file but keep physical file when needed",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "ef6eb82b-615f-4e89-8671-44165c406f80",
      "parentUUID": "042222f8-f54a-4907-bab3-a269a10f82d6",
      "skipped": false
    },
    {
      "title": "individual test level",
      "fullTitle": "Function level individual test level",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "bdd2296a-fee3-469a-ae26-808fd1882167",
      "parentUUID": "15b33842-9fdb-4bd6-8db4-f2c40443ad0a",
      "skipped": false
    },
    {
      "title": "individual test level",
      "fullTitle": "Function level individual test level",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "ae0f93b2-4009-4a3b-8b9c-5c6b2e48a19e",
      "parentUUID": "5d3b927d-acba-4370-87e0-7c43b8597bb8",
      "skipped": false
    },
    {
      "title": "individual test level",
      "fullTitle": "Function level individual test level",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "isRoot": false,
      "uuid": "46286235-7cf7-4358-9a4d-cafeaecbb009",
      "parentUUID": "656aaefa-f1fa-4772-9651-1bef4fb0c7c7",
      "skipped": false
    }
  ],
  "allPasses": [
    {
      "title": "deletes a dataset",
      "fullTitle": "Delete Dataset:  deletes a dataset",
      "timedOut": false,
      "duration": 4982,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, check, dataset_list, dataset, expected_count, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context2.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            check = _context2.sent;<br>                            dataset_list = check.val;<br>                            dataset = dataset_list[<span class=\"hljs-number\">0</span>];<br>                            expected_count = dataset_list.length - <span class=\"hljs-number\">1</span>;<br>                            assert.isFalse(dataset.published);<br>                            _context2.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            results = _context2.sent;<br>                            assert.isTrue(results.val);<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            check = _context2.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "7fa4a882-3e67-47ab-ae9d-2fa9e246398a",
      "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
      "skipped": false
    },
    {
      "title": "does not delete a published dataset",
      "fullTitle": "Delete Dataset:  does not delete a published dataset",
      "timedOut": false,
      "duration": 5412,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, expected_count, results, dataset, check, dataset_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            expected_count = datasetIdList.length;<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            dataset = results.val;<br>                            assert.isOk(dataset.published);<br>                            assert.isTrue(dataset.published);<br>                            assert.equal(dataset.id, datasetId);<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            dataset = results.val;<br>                            assert.isTrue(dataset.published);<br>                            assert.isFalse(!!dataset.doi);<br>                            <span class=\"hljs-comment\">// delete database fails</span><br>                            _context3.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            results = _context3.sent;<br>                            assert.isFalse(results.val);<br>                            _context3.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            check = _context3.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                            _context3.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "e3df170a-fd5d-4986-9367-483bf5ec3534",
      "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
      "skipped": false
    },
    {
      "title": "does not delete a dataset with an assigned DOI",
      "fullTitle": "Delete Dataset:  does not delete a dataset with an assigned DOI",
      "timedOut": false,
      "duration": 5249,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, expected_count, fakeDOI, status, results, check, dataset_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            expected_count = datasetIdList.length;<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            status = _context4.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete database fails</span><br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            results = _context4.sent;<br>                            assert.isFalse(results.val);<br>                            _context4.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            check = _context4.sent;<br>                            dataset_list = check.val;<br>                            assert.equal(dataset_list.length, expected_count);<br>                            _context4.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "b3b26390-c706-4ecc-b36b-b02634f7555a",
      "parentUUID": "bc287706-d226-4af6-9ea1-bd57965812d7",
      "skipped": false
    },
    {
      "title": "fetch top level directory from project",
      "fullTitle": "Top level directory fetch top level directory from project",
      "timedOut": false,
      "duration": 147,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project, project_id, top_directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context2.sent;<br>                            project = ret.val;<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            project_list = _context2.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            project_id = project.id;<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            top_directory = _context2.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, found_project.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "6e0809d4-1c45-4f10-aeb0-24cce70a4c4a",
      "parentUUID": "dc9e0d01-c58a-4651-b590-d5ba4ce6e760",
      "skipped": false
    },
    {
      "title": "fetch top level directory by id",
      "fullTitle": "Top level directory fetch top level directory by id",
      "timedOut": false,
      "duration": 76,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context3.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context3.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context3.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context3.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                            directory_id = top_directory.id;<br>                            _context3.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            directory = _context3.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "273a5099-bf61-4382-81b1-3ebb2a580c0d",
      "parentUUID": "dc9e0d01-c58a-4651-b590-d5ba4ce6e760",
      "skipped": false
    },
    {
      "title": "create directory path from top directory as /",
      "fullTitle": "Create directory create directory path from top directory as /",
      "timedOut": false,
      "duration": 182,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context4.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context4.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context4.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "c98f5b3d-78c8-4544-b787-e2388efd8d63",
      "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
      "skipped": false
    },
    {
      "title": "create directory path from top directory as id",
      "fullTitle": "Create directory create directory path from top directory as id",
      "timedOut": false,
      "duration": 210,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context5.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context5.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context5.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context5.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context5.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: top_directory.id,<br>                                path: path<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context5.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "64018f43-220d-4fe2-b037-ee0e751e1632",
      "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
      "skipped": false
    },
    {
      "title": "create directory path from directory as path",
      "fullTitle": "Create directory create directory path from directory as path",
      "timedOut": false,
      "duration": 240,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context6.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context6.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context6.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context6.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context6.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context6.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            from_dir = from_dir + path;<br>                            path = <span class=\"hljs-string\">\"D1/E1\"</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            result = _context6.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "f524b24a-ec2c-47c7-af4b-2019fab7ad35",
      "parentUUID": "807900d9-31d7-4202-bbdd-a4bd9fbb02ce",
      "skipped": false
    },
    {
      "title": "Get all dirs in project and test for empty",
      "fullTitle": "Get directories Get all dirs in project and test for empty",
      "timedOut": false,
      "duration": 184,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context7.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context7.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context7.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context7.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context7.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context7.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context7.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context7.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            _context7.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            dir_list = _context7.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">4</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            _context7.t0 = assert;<br>                            _context7.next = <span class=\"hljs-number\">36</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">0</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                            _context7.t1 = _context7.sent;<br>                            _context7.t0.isFalse.call(_context7.t0, _context7.t1);<br>                            _context7.t2 = assert;<br>                            _context7.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">1</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            _context7.t3 = _context7.sent;<br>                            _context7.t2.isFalse.call(_context7.t2, _context7.t3);<br>                            _context7.t4 = assert;<br>                            _context7.next = <span class=\"hljs-number\">46</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">2</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            _context7.t5 = _context7.sent;<br>                            _context7.t4.isFalse.call(_context7.t4, _context7.t5);<br>                            _context7.t6 = assert;<br>                            _context7.next = <span class=\"hljs-number\">51</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(dir_list[<span class=\"hljs-number\">3</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">51</span>:<br>                            _context7.t7 = _context7.sent;<br>                            _context7.t6.isTrue.call(_context7.t6, _context7.t7);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">53</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "7a277b46-5e50-4c55-a880-b4b6a0fdfc24",
      "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
      "skipped": false
    },
    {
      "title": "Subdir exists and test for empty",
      "fullTitle": "Get directories Subdir exists and test for empty",
      "timedOut": false,
      "duration": 157,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, directory, subdir;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context8.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context8.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context8.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context8.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context8.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context8.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context8.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context8.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            directory = dir_list[<span class=\"hljs-number\">0</span>];<br>                            _context8.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.subdirExists(directory.id, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context8.sent;<br>                            subdir = result[<span class=\"hljs-number\">0</span>];<br>                            assert.equal(subdir.name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(subdir.parent, directory.id);<br>                            _context8.t0 = assert;<br>                            _context8.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            _context8.t1 = _context8.sent;<br>                            _context8.t0.isFalse.call(_context8.t0, _context8.t1);<br>                            _context8.t2 = assert;<br>                            _context8.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.isEmpty(subdir.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context8.t3 = _context8.sent;<br>                            _context8.t2.isTrue.call(_context8.t2, _context8.t3);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "28c3e89b-ff61-478d-bf16-7c25f05a5d5e",
      "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
      "skipped": false
    },
    {
      "title": "Get sub-directories as peer_directories",
      "fullTitle": "Get directories Get sub-directories as peer_directories",
      "timedOut": false,
      "duration": 218,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path1, path2, path3, dir_args1, dir_args2, dir_args3, result, dir_list, directory, dir_with_subs, subs, expected, missing;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context9.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context9.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context9.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context9.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context9.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path1 = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            path2 = <span class=\"hljs-string\">'A1/C1'</span>;<br>                            path3 = <span class=\"hljs-string\">'A1/D1'</span>;<br>                            dir_args1 = {<br>                                from_dir: from_dir,<br>                                path: path1<br>                            };<br>                            dir_args2 = {<br>                                from_dir: from_dir,<br>                                path: path2<br>                            };<br>                            dir_args3 = {<br>                                from_dir: from_dir,<br>                                path: path3<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            _context9.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            _context9.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args3);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            result = _context9.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/D1'</span>);<br>                            directory = dir_list[<span class=\"hljs-number\">0</span>];<br>                            _context9.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.peerDirectories(directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            dir_with_subs = _context9.sent;<br>                            assert.equal(dir_with_subs.name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_with_subs.name, directory.name);<br>                            assert.equal(dir_with_subs.id, directory.id);<br>                            assert.isTrue(dir_with_subs.hasOwnProperty(<span class=\"hljs-string\">'peer_directories'</span>));<br>                            subs = dir_with_subs.peer_directories;<br>                            expected = [project_name + <span class=\"hljs-string\">\"/\"</span> + path1, project_name + <span class=\"hljs-string\">\"/\"</span> + path2, project_name + <span class=\"hljs-string\">\"/\"</span> + path3];<br>                            missing = [];<br>                            expected.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">target</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = <span class=\"hljs-literal\">false</span>;<br>                                subs.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">dir</span>) </span>{<br>                                    <span class=\"hljs-keyword\">if</span> (dir.name == target) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                });<br>                                <span class=\"hljs-keyword\">if</span> (!found) missing.push(target);<br>                            });<br>                            assert.deepEqual(missing, [], <span class=\"hljs-string\">\"Should be empty list of missing expected values\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ec80c419-70df-4532-894e-80bf6cb88a59",
      "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
      "skipped": false
    },
    {
      "title": "Find in project",
      "fullTitle": "Get directories Find in project",
      "timedOut": false,
      "duration": 182,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, cross;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10$</span>(<span class=\"hljs-params\">_context10</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context10.prev = _context10.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context10.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context10.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context10.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context10.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context10.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context10.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context10.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context10.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">3</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            <span class=\"hljs-comment\">// it appears from the code that case 1 does not work!</span><br>                            <span class=\"hljs-comment\">// let dir1 = yield directories.findInProject(project_id,'','/A1/B1');</span><br>                            _context10.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.findInProject(project_id, <span class=\"hljs-string\">''</span>, dir_list[<span class=\"hljs-number\">1</span>].id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            cross = _context10.sent;<br>                            assert.isNotNull(cross);<br>                            assert.equal(cross.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(cross[<span class=\"hljs-number\">0</span>].project_id, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context10.stop();<br>                    }<br>                }<br>            }, _callee10, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "e6b56803-290b-475d-b88f-dd07f3c5c95e",
      "parentUUID": "10e715ee-b8d6-48fa-86eb-346efe502754",
      "skipped": false
    },
    {
      "title": "Rename leaf directory",
      "fullTitle": "Modify directory Rename leaf directory",
      "timedOut": false,
      "duration": 132,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, name, directory_id, rename_args, dir, expectedPath;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11$</span>(<span class=\"hljs-params\">_context11</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context11.prev = _context11.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context11.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context11.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context11.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context11.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context11.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context11.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context11.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context11.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            name = <span class=\"hljs-string\">'XX'</span>;<br>                            directory_id = dir_list[<span class=\"hljs-number\">0</span>].id;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: name<br>                                }<br>                            };<br>                            _context11.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            _context11.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            dir = _context11.sent;<br>                            expectedPath = project_name + <span class=\"hljs-string\">'/XX'</span>;<br>                            assert.equal(dir.path, expectedPath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context11.stop();<br>                    }<br>                }<br>            }, _callee11, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "4aeebe58-29a8-45fc-9f52-626959a2daca",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Move leaf directory",
      "fullTitle": "Modify directory Move leaf directory",
      "timedOut": false,
      "duration": 203,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path1, path2, dir_args1, dir_args2, result, dir_list, dir1_id, dir2_id, rename_args, dir3;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12$</span>(<span class=\"hljs-params\">_context12</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context12.prev = _context12.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context12.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context12.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context12.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context12.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context12.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context12.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path1 = <span class=\"hljs-string\">'A1/B1'</span>;<br>                            path2 = <span class=\"hljs-string\">'A1/C1'</span>;<br>                            dir_args1 = {<br>                                from_dir: from_dir,<br>                                path: path1<br>                            };<br>                            dir_args2 = {<br>                                from_dir: from_dir,<br>                                path: path2<br>                            };<br>                            _context12.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            result = _context12.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            dir1_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            _context12.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context12.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1/C1'</span>);<br>                            dir2_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: dir2_id<br>                                }<br>                            };<br>                            _context12.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, dir1_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            ret = _context12.sent;<br>                            dir3 = ret.val;<br>                            assert.equal(dir3.path, project_name + <span class=\"hljs-string\">'/A1/C1/B1'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context12.stop();<br>                    }<br>                }<br>            }, _callee12, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "0ddd1e87-23ea-4fcd-81d8-ce6beb626b00",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Delete leaf directory",
      "fullTitle": "Modify directory Delete leaf directory",
      "timedOut": false,
      "duration": 152,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, result, dir_list, directory_id, dir;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13$</span>(<span class=\"hljs-params\">_context13</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context13.prev = _context13.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context13.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context13.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context13.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context13.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context13.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context13.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context13.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context13.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            directory_id = dir_list[<span class=\"hljs-number\">0</span>].id;<br>                            _context13.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            dir = _context13.sent;<br>                            assert.isNotNull(dir);<br>                            _context13.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            dir_list = _context13.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            _context13.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.remove(project_id, directory_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context13.sent;<br>                            assert.isTrue(ret.val);<br>                            _context13.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            dir_list = _context13.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">40</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context13.stop();<br>                    }<br>                }<br>            }, _callee13, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "df5443c6-194b-4678-87b3-544c8f24b90d",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Rename interior directory",
      "fullTitle": "Modify directory Rename interior directory",
      "timedOut": false,
      "duration": 425,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, dir_list, newName, directory_id, rename_args, results, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14$</span>(<span class=\"hljs-params\">_context14</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context14.prev = _context14.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context14.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context14.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context14.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context14.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context14.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context14.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1/D1/E1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C2'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C3'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context14.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            _context14.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            dir_list = _context14.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">8</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">7</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C3'</span>);<br>                            newName = <span class=\"hljs-string\">'XX'</span>;<br>                            directory_id = dir_list[<span class=\"hljs-number\">2</span>].id;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: newName<br>                                }<br>                            };<br>                            path = project_name + <span class=\"hljs-string\">\"/A1/\"</span> + newName;<br>                            _context14.next = <span class=\"hljs-number\">44</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                            results = _context14.sent;<br>                            directory = results.val;<br>                            assert.equal(directory.path, path);<br>                            _context14.next = <span class=\"hljs-number\">49</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            dir_list = _context14.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">8</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">7</span>].name, project_name + <span class=\"hljs-string\">'/A1/XX/C3'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">59</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context14.stop();<br>                    }<br>                }<br>            }, _callee14, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "b925e310-7b66-43ea-b3ac-74162c2da5fa",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Move interior directory",
      "fullTitle": "Modify directory Move interior directory",
      "timedOut": false,
      "duration": 333,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, from_dir, path, dir_args, dir_list, directoryA1_id, directoryB1_id, directoryC1_id, directoryD1_id, directoryE1_id, directoryC2_id, directory_id, rename_args, results, directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15$</span>(<span class=\"hljs-params\">_context15</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context15.prev = _context15.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context15.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context15.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context15.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context15.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context15.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context15.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'A1/B1/C1/D1/E1'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            path = <span class=\"hljs-string\">'A1/B1/C2'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            _context15.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            dir_list = _context15.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">7</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            directoryA1_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            directoryB1_id = dir_list[<span class=\"hljs-number\">2</span>].id;<br>                            directoryC1_id = dir_list[<span class=\"hljs-number\">3</span>].id;<br>                            directoryD1_id = dir_list[<span class=\"hljs-number\">4</span>].id;<br>                            directoryE1_id = dir_list[<span class=\"hljs-number\">5</span>].id;<br>                            directoryC2_id = dir_list[<span class=\"hljs-number\">6</span>].id;<br>                            directory_id = dir_list[<span class=\"hljs-number\">3</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: dir_list[<span class=\"hljs-number\">6</span>].id<br>                                }<br>                            };<br>                            _context15.next = <span class=\"hljs-number\">43</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">43</span>:<br>                            results = _context15.sent;<br>                            directory = results.val;<br>                            assert.equal(directory.path, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1'</span>);<br>                            _context15.next = <span class=\"hljs-number\">48</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.getAll(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">48</span>:<br>                            dir_list = _context15.sent;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">7</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project_name);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">'/A1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1/D1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].name, project_name + <span class=\"hljs-string\">'/A1/B1/C2/C1/D1/E1'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].id, directoryA1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">2</span>].id, directoryB1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">3</span>].id, directoryC2_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">4</span>].id, directoryC1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">5</span>].id, directoryD1_id);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">6</span>].id, directoryE1_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">63</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context15.stop();<br>                    }<br>                }<br>            }, _callee15, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "77bb1d78-e4b5-4632-bc45-cfc0a8c084e3",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Can not rename top level directory",
      "fullTitle": "Modify directory Can not rename top level directory",
      "timedOut": false,
      "duration": 80,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, name, rename_args, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16$</span>(<span class=\"hljs-params\">_context16</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context16.prev = _context16.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context16.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context16.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context16.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context16.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context16.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context16.sent;<br>                            directory_id = top_directory.id;<br>                            name = <span class=\"hljs-string\">'XX'</span>;<br>                            rename_args = {<br>                                rename: {<br>                                    new_name: name<br>                                }<br>                            };<br>                            _context16.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            result = _context16.sent;<br>                            assert(!!result.error);<br>                            _context16.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            top_directory = _context16.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context16.stop();<br>                    }<br>                }<br>            }, _callee16, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "74e66325-0aeb-4bd6-9c40-80ea8b093772",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Can not move top level directory",
      "fullTitle": "Modify directory Can not move top level directory",
      "timedOut": false,
      "duration": 142,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_id, top_directory, directory_id, from_dir, target_path, target_dir_args, result, dir_list, target_id, rename_args;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17$</span>(<span class=\"hljs-params\">_context17</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context17.prev = _context17.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context17.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context17.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context17.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            ret = _context17.sent;<br>                            project = ret.val;<br>                            project_id = project.id;<br>                            _context17.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context17.sent;<br>                            directory_id = top_directory.id;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            target_path = <span class=\"hljs-string\">'NEW/LOCATION'</span>;<br>                            target_dir_args = {<br>                                from_dir: from_dir,<br>                                path: target_path<br>                            };<br>                            _context17.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project_id, project_name, target_dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            result = _context17.sent;<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project_name + <span class=\"hljs-string\">\"/\"</span> + target_path);<br>                            target_id = dir_list[<span class=\"hljs-number\">1</span>].id;<br>                            rename_args = {<br>                                move: {<br>                                    new_directory_id: target_id<br>                                }<br>                            };<br>                            _context17.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.update(project_id, directory_id, rename_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            result = _context17.sent;<br>                            assert.isTrue(!!result.error);<br>                            _context17.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            top_directory = _context17.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context17.stop();<br>                    }<br>                }<br>            }, _callee17, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "716c255a-30cf-4dc0-8064-d83ad877c2b1",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "Can not delete top level directory",
      "fullTitle": "Modify directory Can not delete top level directory",
      "timedOut": false,
      "duration": 79,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, result, project, project_id, top_directory;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18$</span>(<span class=\"hljs-params\">_context18</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context18.prev = _context18.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context18.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context18.sent;<br>                            project_name = random_name();<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context18.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            result = _context18.sent;<br>                            project = result.val;<br>                            project_id = project.id;<br>                            _context18.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            top_directory = _context18.sent;<br>                            _context18.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.remove(project_id, top_directory.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            result = _context18.sent;<br>                            assert.isTrue(!!result.error);<br>                            _context18.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project_id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            top_directory = _context18.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context18.stop();<br>                    }<br>                }<br>            }, _callee18, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "dfb3a2c1-7127-427d-95ec-7ceeec9be022",
      "parentUUID": "58030eb7-6c04-4886-b86b-7bfda8378e44",
      "skipped": false
    },
    {
      "title": "deletes best_measure_history",
      "fullTitle": "Delete Experiment - in parts:  deletes best_measure_history",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> experiment_id, idList, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// chain from experiment_id -&gt; property_id list through:</span><br>                            <span class=\"hljs-comment\">//   experiment2sample - samples</span><br>                            <span class=\"hljs-comment\">//   sample2propertyset - propertysets</span><br>                            <span class=\"hljs-comment\">//   propertyset2property - properties</span><br>                            <span class=\"hljs-comment\">//   best_measure_history</span><br>                            <span class=\"hljs-comment\">// to get best_measure_history items by property_id</span><br>                            _context2.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'samples'</span>)).zip().eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'sample2propertyset'</span>), { index: <span class=\"hljs-string\">'sample_id'</span> }).zip().eqJoin(<span class=\"hljs-string\">'property_set_id'</span>, r.table(<span class=\"hljs-string\">'propertysets'</span>)).zip().eqJoin(<span class=\"hljs-string\">'property_set_id'</span>, r.table(<span class=\"hljs-string\">'propertyset2property'</span>), { index: <span class=\"hljs-string\">'property_set_id'</span> }).zip().eqJoin(<span class=\"hljs-string\">'property_id'</span>, r.table(<span class=\"hljs-string\">'properties'</span>)).zip().eqJoin(<span class=\"hljs-string\">'property_id'</span>, r.table(<span class=\"hljs-string\">'best_measure_history'</span>), { index: <span class=\"hljs-string\">'property_id'</span> }).zip().getField(<span class=\"hljs-string\">'property_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            idList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'best_measure_history'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList))), { index: <span class=\"hljs-string\">'property_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ab31a774-cfb2-4638-9774-be53beb91f7b",
      "parentUUID": "124a6d4e-d7fc-41a0-ae71-8b6b78208220",
      "skipped": false
    },
    {
      "title": "deletes all datasets, processes, samples, tasks, and links to files",
      "fullTitle": "Delete Experiment - complex case:  deletes all datasets, processes, samples, tasks, and links to files",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// test that structures exist</span><br>                            <span class=\"hljs-comment\">// experiments.delete(experiment_id, {deleteProcesses: true});</span><br>                            <span class=\"hljs-comment\">// test that structures are deleted</span><br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "a3e066b3-b798-40de-b160-75dd1ee6a345",
      "parentUUID": "e38a4ab2-ecc2-4eea-98a3-bb0d3ad5c7a9",
      "skipped": false
    },
    {
      "title": "deletes all datasets, tasks, and links to files - preserve processes, samples",
      "fullTitle": "Delete Experiment - complex case:  deletes all datasets, tasks, and links to files - preserve processes, samples",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// test that structures exist</span><br>                            <span class=\"hljs-comment\">// experiments.delete(experiment_id, {deleteProcesses: true});</span><br>                            <span class=\"hljs-comment\">// test that structures are deleted</span><br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "a00303df-c564-4c2d-a35f-a6cda6d24c8d",
      "parentUUID": "3e9e0eb3-7ac0-4bee-ba25-5ed4d5715cdf",
      "skipped": false
    },
    {
      "title": "deletes all datasets",
      "fullTitle": "Delete Experiment - in parts:  deletes all datasets",
      "timedOut": false,
      "duration": 147,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results, dataset_list, hasPublishedDatasets, i, dataset, _i, _dataset;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i &lt; dataset_list.length)) {<br>                                _context2.next = <span class=\"hljs-number\">21</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            _dataset = dataset_list[_i];<br>                            _context2.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(_dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            _i++;<br>                            _context2.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context2.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "57ed4a37-a2ec-4187-bdb8-105fbdbb872f",
      "parentUUID": "a95b300c-68c7-4bf4-a80d-a5337cd1b66e",
      "skipped": false
    },
    {
      "title": "deletes experiment part: experiment-notes",
      "fullTitle": "Delete Experiment - basic parts:  deletes experiment part: experiment-notes",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> projectId, experimentId, idList, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-comment\">// ---- experimentnote ----</span><br>                            <span class=\"hljs-comment\">// experiment2experimentnote</span><br>                            <span class=\"hljs-comment\">// experimentnotes</span><br>                            projectId = project.id;<br>                            assert.isOk(projectId);<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimentnote'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_note_id'</span>, r.table(<span class=\"hljs-string\">'experimentnotes'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_note_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            idList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimentnotes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context2.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimentnote'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "846bcf7e-058d-4e9f-a4d1-bf655c0e1cb1",
      "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
      "skipped": false
    },
    {
      "title": "deletes experiment part: experiment-tasks",
      "fullTitle": "Delete Experiment - basic parts:  deletes experiment part: experiment-tasks",
      "timedOut": false,
      "duration": 82,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> projectId, experimentId, idList, taskId, task, processId, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            projectId = project.id;<br>                            assert.isOk(projectId);<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            <span class=\"hljs-comment\">// get taskId and processId</span><br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_task_id'</span>, r.table(<span class=\"hljs-string\">'experimenttasks'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_task_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            idList = _context3.sent;<br>                            assert.isOk(idList);<br>                            assert.equal(idList.length, <span class=\"hljs-number\">1</span>);<br>                            taskId = idList[<span class=\"hljs-number\">0</span>];<br>                            assert.isOk(taskId);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttasks'</span>).get(taskId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            task = _context3.sent;<br>                            assert.isOk(task);<br>                            assert.isOk(task.process_id);<br>                            processId = task.process_id;<br>                            <span class=\"hljs-comment\">// experiment2experimenttask</span><br>                            <span class=\"hljs-comment\">// experimenttask2process</span><br>                            <span class=\"hljs-comment\">// experimenttasks</span><br>                            <span class=\"hljs-comment\">// processes</span><br>                            _context3.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttask2process'</span>).getAll(taskId, { index: <span class=\"hljs-string\">'experiment_task_id'</span> }).eqJoin(<span class=\"hljs-string\">'process_id'</span>, r.table(<span class=\"hljs-string\">'processes'</span>)).zip().getField(<span class=\"hljs-string\">'process_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            idList = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'processes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttask2process'</span>).getAll(taskId, { index: <span class=\"hljs-string\">'experiment_task_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'experiment_task_id'</span>, r.table(<span class=\"hljs-string\">'experimenttasks'</span>)).zip().getField(<span class=\"hljs-string\">'experiment_task_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            idList = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experimenttasks'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(idList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2experimenttask'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "9d6c2f88-383e-4960-b2fd-67dbf8fbdfe0",
      "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
      "skipped": false
    },
    {
      "title": "deletes links between files and experiment",
      "fullTitle": "Delete Experiment - basic parts:  deletes links between files and experiment",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> experimentId, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            experimentId = experiment.id;<br>                            assert.isOk(experimentId);<br>                            _context4.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2datafile'</span>).getAll(experimentId, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            delete_msg = _context4.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">16</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "be722bed-406d-4ddf-81b0-c3a3c1c4100d",
      "parentUUID": "8bc21985-7e12-43c2-8815-6b736b3a9fd4",
      "skipped": false
    },
    {
      "title": "deletes items in notes",
      "fullTitle": "Delete Experiment - in parts:  deletes items in notes",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> id_list, i, _i6, _i7, entities, noteIdSet, _i8, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            id_list = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; process_list.length; i++) {<br>                                id_list.push(process_list[i].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i6 = <span class=\"hljs-number\">0</span>; _i6 &lt; sample_list.length; _i6++) {<br>                                id_list.push(sample_list[_i6].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i7 = <span class=\"hljs-number\">0</span>; _i7 &lt; file_list.length; _i7++) {<br>                                id_list.push(file_list[_i7].id);<br>                            }<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'note2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            entities = _context2.sent;<br>                            assert.equal(entities.length, notes_count);<br>                            noteIdSet = <span class=\"hljs-keyword\">new</span> _set2.default();<br>                            <span class=\"hljs-keyword\">for</span> (_i8 = <span class=\"hljs-number\">0</span>; _i8 &lt; entities.length; _i8++) {<br>                                noteIdSet = noteIdSet.add(entities[_i8].note_id);<br>                            }<br>                            assert.equal(noteIdSet.size, <span class=\"hljs-number\">1</span>);<br>                            _context2.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'note2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, notes_count);<br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'notes'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(noteIdSet)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            delete_msg = _context2.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "8f252e0d-912d-4293-9f1d-e10e8e26e184",
      "parentUUID": "13e14486-efa7-45e0-b959-4c2adf3897f9",
      "skipped": false
    },
    {
      "title": "deletes items in reviews",
      "fullTitle": "Delete Experiment - in parts:  deletes items in reviews",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> id_list, i, _i9, _i10, entities, reviewIdSet, _i11, delete_msg;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            id_list = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; process_list.length; i++) {<br>                                id_list.push(process_list[i].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i9 = <span class=\"hljs-number\">0</span>; _i9 &lt; sample_list.length; _i9++) {<br>                                id_list.push(sample_list[_i9].id);<br>                            }<br>                            <span class=\"hljs-keyword\">for</span> (_i10 = <span class=\"hljs-number\">0</span>; _i10 &lt; file_list.length; _i10++) {<br>                                id_list.push(file_list[_i10].id);<br>                            }<br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'review2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            entities = _context3.sent;<br>                            assert.equal(entities.length, reviews_count);<br>                            reviewIdSet = <span class=\"hljs-keyword\">new</span> _set2.default();<br>                            <span class=\"hljs-keyword\">for</span> (_i11 = <span class=\"hljs-number\">0</span>; _i11 &lt; entities.length; _i11++) {<br>                                reviewIdSet = reviewIdSet.add(entities[_i11].review_id);<br>                            }<br>                            assert.equal(reviewIdSet.size, <span class=\"hljs-number\">1</span>);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'review2item'</span>).getAll(r.args(id_list), { index: <span class=\"hljs-string\">'item_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, reviews_count);<br>                            _context3.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'reviews'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(reviewIdSet)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            delete_msg = _context3.sent;<br>                            assert.equal(delete_msg.deleted, <span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "65e32366-a72c-4243-aaa2-686bfdb9a9c7",
      "parentUUID": "13e14486-efa7-45e0-b959-4c2adf3897f9",
      "skipped": false
    },
    {
      "title": "deletes datasets and deletes all processes and samples",
      "fullTitle": "Delete Experiment - in parts:  deletes datasets and deletes all processes and samples",
      "timedOut": false,
      "duration": 954,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, rv, key, results, dataset_list, hasPublishedDatasets, i, dataset, _i, _dataset, _i2, _process, simple, proc_list, sampleList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            <span class=\"hljs-comment\">// Note: create fake sample that is not part of a process for testing</span><br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'samples'</span>).insert({ <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'fake sample'</span>, <span class=\"hljs-string\">'otype'</span>: <span class=\"hljs-string\">'sample'</span>, <span class=\"hljs-string\">'owner'</span>: <span class=\"hljs-string\">'noone'</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            rv = _context2.sent;<br>                            key = rv.generated_keys[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).insert({ sample_id: key, experiment_id: experiment_id });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i &lt; dataset_list.length)) {<br>                                _context2.next = <span class=\"hljs-number\">27</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            _dataset = dataset_list[_i];<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.deleteDataset(_dataset.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            _i++;<br>                            _context2.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context2.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">0</span>);<br>                            _i2 = process_list.length;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(_i2 &gt; <span class=\"hljs-number\">0</span>)) {<br>                                _context2.next = <span class=\"hljs-number\">41</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            <span class=\"hljs-comment\">// delete leaf-nodes first!</span><br>                            _process = process_list[_i2 - <span class=\"hljs-number\">1</span>];<br>                            _context2.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, _process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            _i2--;<br>                            _context2.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            simple = <span class=\"hljs-literal\">true</span>;<br>                            _context2.next = <span class=\"hljs-number\">44</span>;<br>                            <span class=\"hljs-keyword\">return</span> experiments.getProcessesForExperiment(experiment_id, simple);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                            results = _context2.sent;<br>                            proc_list = results.val;<br>                            assert.isOk(proc_list);<br>                            assert.equal(proc_list.length, <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-comment\">// ... but, in rare cases, there my be samples in the experiment that are in no process</span><br>                            _context2.next = <span class=\"hljs-number\">50</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).eqJoin(<span class=\"hljs-string\">'sample_id'</span>, r.table(<span class=\"hljs-string\">'samples'</span>)).zip().getField(<span class=\"hljs-string\">'sample_id'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">50</span>:<br>                            sampleList = _context2.sent;<br>                            _context2.next = <span class=\"hljs-number\">53</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'samples'</span>).getAll(r.args([].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(sampleList)))).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">53</span>:<br>                            rv = _context2.sent;<br>                            assert.equal(rv.deleted, <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-comment\">// and the sample entries for the experiment are left in experiment2sample</span><br>                            _context2.next = <span class=\"hljs-number\">57</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'experiment2sample'</span>).getAll(experiment_id, { index: <span class=\"hljs-string\">'experiment_id'</span> }).delete();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">57</span>:<br>                            rv = _context2.sent;<br>                            assert.equal(rv.deleted, <span class=\"hljs-number\">8</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">59</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "aa825f3f-df34-4571-bcad-26ee28dad8c8",
      "parentUUID": "a92f98b9-a270-4f4a-bcb2-da82e042cc14",
      "skipped": false
    },
    {
      "title": "checks for published dataset",
      "fullTitle": "Delete Experiment - in parts:  checks for published dataset",
      "timedOut": false,
      "duration": 632,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results, dataset_list, dataset_id, hasPublishedDatasets, i, dataset, publishedDataset, _i, _dataset, unpublishedDataset, _i2, _dataset2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            dataset_id = dataset_list[<span class=\"hljs-number\">0</span>].id;<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; dataset_list.length; i++) {<br>                                dataset = dataset_list[i];<br>                                <span class=\"hljs-keyword\">if</span> (dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                            _context2.next = <span class=\"hljs-number\">16</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(dataset_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            results = _context2.sent;<br>                            publishedDataset = results.val;<br>                            assert.isOk(publishedDataset);<br>                            assert.isTrue(publishedDataset.published);<br>                            _context2.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i = <span class=\"hljs-number\">0</span>; _i &lt; dataset_list.length; _i++) {<br>                                _dataset = dataset_list[_i];<br>                                <span class=\"hljs-keyword\">if</span> (_dataset.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isTrue(hasPublishedDatasets);<br>                            _context2.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.unpublishDataset(dataset_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            results = _context2.sent;<br>                            unpublishedDataset = results.val;<br>                            assert.isOk(unpublishedDataset);<br>                            assert.isFalse(unpublishedDataset.published);<br>                            _context2.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.getDatasetsForExperiment(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            results = _context2.sent;<br>                            dataset_list = results.val;<br>                            assert.isOk(dataset_list);<br>                            assert.equal(dataset_list.length, <span class=\"hljs-number\">2</span>);<br>                            hasPublishedDatasets = <span class=\"hljs-literal\">false</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i2 = <span class=\"hljs-number\">0</span>; _i2 &lt; dataset_list.length; _i2++) {<br>                                _dataset2 = dataset_list[_i2];<br>                                <span class=\"hljs-keyword\">if</span> (_dataset2.published) {<br>                                    hasPublishedDatasets = <span class=\"hljs-literal\">true</span>;<br>                                }<br>                            }<br>                            assert.isFalse(hasPublishedDatasets);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "748b985e-71ce-4aa9-97b1-0091d146b40a",
      "parentUUID": "32e3e6b5-685f-484b-8f2f-bb311f886f39",
      "skipped": false
    },
    {
      "title": "does not delete an experiment with a published dataset",
      "fullTitle": "Delete Experiment:  does not delete an experiment with a published dataset",
      "timedOut": false,
      "duration": 5547,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, idList, i, datasetId, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            idList = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; datasetList.length; i++) {<br>                                idList.push(datasetList[i].id);<br>                            }<br>                            _context2.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = idList[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.published);<br>                            assert(results.val.published);<br>                            <span class=\"hljs-comment\">// delete experiment - fails</span><br>                            _context2.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context2.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "8d194a85-bd9e-4074-b293-5e444ff1fcee",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "does not delete an experiment with a dataset that has an assigned DOI",
      "fullTitle": "Delete Experiment:  does not delete an experiment with a dataset that has an assigned DOI",
      "timedOut": false,
      "duration": 5198,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, idList, i, datasetId, fakeDOI, status, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            idList = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; datasetList.length; i++) {<br>                                idList.push(datasetList[i].id);<br>                            }<br>                            _context3.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = idList[<span class=\"hljs-number\">0</span>];<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context3.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            status = _context3.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete experiment - fails</span><br>                            _context3.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context3.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "afd0b6a4-447c-4551-85d7-c25c17067901",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "deletes experiment and all its parts",
      "fullTitle": "Delete Experiment:  deletes experiment and all its parts",
      "timedOut": false,
      "duration": 6619,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context4.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context4.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context4.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context4.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context4.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context4.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context4.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">true</span>, dryRun: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context4.sent;<br>                            checkResults(results);<br>                            _context4.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context4.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context4.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context4.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context4.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context4.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context4.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "17a582d7-7197-42a1-865e-851f8e172c3b",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "with deleteProcess false - deletes experiment, but not process, samples, etc.",
      "fullTitle": "Delete Experiment:  with deleteProcess false - deletes experiment, but not process, samples, etc.",
      "timedOut": false,
      "duration": 5831,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context5.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context5.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context5.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context5.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context5.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context5.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context5.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context5.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context5.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">false</span>, dryRun: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context5.sent;<br>                            checkResultsForNotDeleteProcess(results);<br>                            _context5.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context5.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context5.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context5.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context5.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context5.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context5.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">false</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "75cf4ef3-8de7-471f-8803-0cff12addf3c",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "with dry run true, delete process true - shows all will be deleted",
      "fullTitle": "Delete Experiment:  with dry run true, delete process true - shows all will be deleted",
      "timedOut": false,
      "duration": 5555,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context6.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context6.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context6.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context6.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context6.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context6.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context6.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context6.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context6.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">true</span>, dryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context6.sent;<br>                            checkResults(results);<br>                            _context6.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id, { forDryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context6.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context6.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context6.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context6.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context6.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context6.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context6.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "d08df27a-fbd4-4ae0-990f-4e488dbbc59e",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "with dry run true, delete process false - shows some will be deleted",
      "fullTitle": "Delete Experiment:  with dry run true, delete process false - shows some will be deleted",
      "timedOut": false,
      "duration": 5430,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context7.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> setup();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context7.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            _context7.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            _context7.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            _context7.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context7.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            _context7.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            _context7.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            _context7.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDelete.deleteExperiment(project_id, experiment_id, { deleteProcesses: <span class=\"hljs-literal\">false</span>, dryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            results = _context7.sent;<br>                            checkResultsForNotDeleteProcess(results);<br>                            _context7.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkLinks(experiment_id, { forDryRun: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            _context7.next = <span class=\"hljs-number\">29</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                            _context7.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> testBestMearureHistroy({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            _context7.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> testProcessesSamples({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context7.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentNotes({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            _context7.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> testExperimentTasks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            _context7.next = <span class=\"hljs-number\">39</span>;<br>                            <span class=\"hljs-keyword\">return</span> testFileLinks({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                            _context7.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> testNotesAndReviews({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "af17b40a-32ca-48ae-ad85-60e5dfb3f839",
      "parentUUID": "fa043b6a-2cbc-4deb-81c3-bf7ed219785f",
      "skipped": false
    },
    {
      "title": "get by id",
      "fullTitle": "Get File Information get by id",
      "timedOut": false,
      "duration": 77,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, fileId, fetchedFile;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">0</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context2.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            fileId = file.id;<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            fetchedFile = _context2.sent;<br>                            assert.equal(file.id, fetchedFile.id);<br>                            assert.equal(file.name, fetchedFile.name);<br>                            assert.equal(file.owner, fetchedFile.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "75386912-c7b5-4d0e-8408-8326a10ca8c3",
      "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
      "skipped": false
    },
    {
      "title": "get by checksum",
      "fullTitle": "Get File Information get by checksum",
      "timedOut": false,
      "duration": 143,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, checksum, results, fetchedFileList, target;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context3.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            checksum = file.checksum;<br>                            _context3.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getAllByChecksum(checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            fetchedFileList = [].concat((<span class=\"hljs-number\">0</span>, _toConsumableArray3.default)(results));<br>                            assert.isOk(fetchedFileList);<br>                            target = <span class=\"hljs-literal\">null</span>;<br>                            fetchedFileList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">foundFile</span>) </span>{<br>                                assert.equal(foundFile.owner, userId);<br>                                <span class=\"hljs-keyword\">if</span> (foundFile.id === file.id) {<br>                                    target = foundFile;<br>                                }<br>                            });<br>                            assert.isOk(target);<br>                            assert.equal(file.id, target.id);<br>                            assert.equal(file.name, target.name);<br>                            assert.equal(file.owner, target.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "e196b501-d6bb-41bf-8f59-330e1dfe192c",
      "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
      "skipped": false
    },
    {
      "title": "get by id list",
      "fullTitle": "Get File Information get by id list",
      "timedOut": false,
      "duration": 88,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, idList, fileList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context4.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            _context4.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context4.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            idList = [file1.id, file2.id];<br>                            _context4.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getList(project.id, idList);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            fileList = _context4.sent;<br>                            assert.isOk(fileList);<br>                            assert.equal(fileList.length, <span class=\"hljs-number\">2</span>);<br>                            fileList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = idList.indexOf(file.id) &gt; -<span class=\"hljs-number\">1</span>;<br>                                assert(found, <span class=\"hljs-string\">'failed to find file '</span> + file.name + <span class=\"hljs-string\">' in query results'</span>);<br>                            });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "0dc422a2-e8a0-4fa4-8148-ce4191c2d3d1",
      "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
      "skipped": false
    },
    {
      "title": "get by file path in project",
      "fullTitle": "Get File Information get by file path in project",
      "timedOut": false,
      "duration": 175,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, probe, filePath, valOrError;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">4</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context5.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            _context5.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            top_directory = _context5.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            result = _context5.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context5.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            _context5.next = <span class=\"hljs-number\">25</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                            probe = _context5.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            filePath = project.name + <span class=\"hljs-string\">\"/\"</span> + path + <span class=\"hljs-string\">\"/\"</span> + file.name;<br>                            _context5.next = <span class=\"hljs-number\">32</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.byPath(project.id, filePath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">32</span>:<br>                            valOrError = _context5.sent;<br>                            assert.isOk(valOrError);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            filePath = <span class=\"hljs-string\">\"bogas\"</span> + <span class=\"hljs-string\">\"/\"</span> + path + <span class=\"hljs-string\">\"/\"</span> + file.name;<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.byPath(project.id, filePath);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            valOrError = _context5.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.error);<br>                            assert.equal(valOrError.error, <span class=\"hljs-string\">'No matching file'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "6d534006-0fc7-47cc-8a62-78b5590dd2ae",
      "parentUUID": "b8dbce0c-a541-43ed-9b64-fd4758286841",
      "skipped": false
    },
    {
      "title": "will rename a file",
      "fullTitle": "File Update will rename a file",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> newName, oldName, file, updateArgs, valOrError, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            newName = <span class=\"hljs-string\">'Another name for photo.jpg'</span>;<br>                            oldName = <span class=\"hljs-string\">'L124_photo.jpg'</span>;<br>                            _context6.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            file = _context6.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            assert.equal(file.name, oldName);<br>                            updateArgs = {<br>                                name: newName<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">11</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:<br>                            valOrError = _context6.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.val);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.name, newName);<br>                            assert.equal(probe.id, file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "8b17149f-f068-40e3-8188-dfd429f2508d",
      "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
      "skipped": false
    },
    {
      "title": "will not let you rename a file to a name in use",
      "fullTitle": "File Update will not let you rename a file to a name in use",
      "timedOut": false,
      "duration": 89,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> newName, oldName, file, anotherFile, updateArgs, valOrError, message;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            newName = <span class=\"hljs-string\">'Another name for photo.jpg'</span>;<br>                            oldName = <span class=\"hljs-string\">'L124_photo.jpg'</span>;<br>                            _context7.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            file = _context7.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            assert.equal(file.name, oldName);<br>                            _context7.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            anotherFile = _context7.sent;<br>                            assert.isOk(anotherFile);<br>                            assert.equal(anotherFile.owner, userId);<br>                            newName = anotherFile.name;<br>                            updateArgs = {<br>                                name: newName<br>                            };<br>                            _context7.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            valOrError = _context7.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.error, <span class=\"hljs-string\">\"Expected an error return\"</span>);<br>                            message = <span class=\"hljs-string\">'Unexpected error message: '</span> + valOrError.error;<br>                            assert(valOrError.error.indexOf(<span class=\"hljs-string\">\"already exists\"</span>) &gt; -<span class=\"hljs-number\">1</span>, message);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "c9d340dc-9eab-436d-ac95-797f0fe431bc",
      "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
      "skipped": false
    },
    {
      "title": "will change the description of a file",
      "fullTitle": "File Update will change the description of a file",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> description, file, updateArgs, valOrError, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            description = <span class=\"hljs-string\">'This is a test description - '</span> + project.name;<br>                            _context8.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            file = _context8.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            updateArgs = {<br>                                description: description<br>                            };<br>                            _context8.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            valOrError = _context8.sent;<br>                            assert.isOk(valOrError);<br>                            assert.isOk(valOrError.val);<br>                            probe = valOrError.val;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                            assert(probe.description !== file.description);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ab15b653-2b3d-4ffe-a282-3b67fcbb6078",
      "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
      "skipped": false
    },
    {
      "title": "will move a file",
      "fullTitle": "File Update will move a file",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file = _context9.sent;<br>                            assert.isOk(file);<br>                            assert.equal(file.owner, userId);<br>                            _context9.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            top_directory = _context9.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            result = _context9.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context9.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            _context9.next = <span class=\"hljs-number\">25</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span>:<br>                            probe = _context9.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe.owner, userId);<br>                            assert.equal(probe.id, file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">29</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "c741a9f2-483f-4434-9539-7c1387990015",
      "parentUUID": "c8e0ffdc-4082-4d32-bc14-78b72055a484",
      "skipped": false
    },
    {
      "title": "supports different versions of the file - same directory",
      "fullTitle": "Versioning supports different versions of the file - same directory",
      "timedOut": false,
      "duration": 293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, file3, fileWithVersion, otherVersion, versions, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context2.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            <span class=\"hljs-comment\">// create faked version of file</span><br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context2.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">3</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            file3 = _context2.sent;<br>                            assert.isOk(file3);<br>                            assert.equal(file3.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file2, file1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file2.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file1.id);<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file1.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">31</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file3, file2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file3.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file2.id);<br>                            _context2.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file2.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">45</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getVersions(fileWithVersion.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">45</span>:<br>                            versions = _context2.sent;<br>                            assert.isOk(versions);<br>                            assert.isOk(versions.val);<br>                            probe = versions.val;<br>                            assert.equal(probe.length, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"Some versions of the file are missing\"</span>);<br>                            assert.equal(probe[<span class=\"hljs-number\">0</span>].id, file2.id);<br>                            assert.equal(probe[<span class=\"hljs-number\">1</span>].id, file1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">52</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "de7fcfcb-9253-468f-a674-e9d081e4cb6d",
      "parentUUID": "5710bd7b-a319-4143-a7a0-8bbc5a6e31d5",
      "skipped": false
    },
    {
      "title": "supports different versions of the file - different directories",
      "fullTitle": "Versioning supports different versions of the file - different directories",
      "timedOut": false,
      "duration": 399,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> file1, file2, file3, top_directory, from_dir, path, dir_args, result, dir_list, targetDir, updateArgs, fileProbe, fileWithVersion, otherVersion, versions, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">1</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            file1 = _context2.sent;<br>                            assert.isOk(file1);<br>                            assert.equal(file1.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">2</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            file2 = _context2.sent;<br>                            assert.isOk(file2);<br>                            assert.equal(file2.owner, userId);<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createFileFromDemoFileSet(project, <span class=\"hljs-number\">3</span>, user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            file3 = _context2.sent;<br>                            assert.isOk(file3);<br>                            assert.equal(file3.owner, userId);<br>                            <span class=\"hljs-comment\">// file 2 moved to a different directory</span><br>                            _context2.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            top_directory = _context2.sent;<br>                            from_dir = <span class=\"hljs-string\">'/'</span>;<br>                            path = <span class=\"hljs-string\">'SubDir/AnotherDir'</span>;<br>                            dir_args = {<br>                                from_dir: from_dir,<br>                                path: path<br>                            };<br>                            _context2.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.create(project.id, project.name, dir_args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            result = _context2.sent;<br>                            assert.isTrue(result.hasOwnProperty(<span class=\"hljs-string\">'val'</span>));<br>                            dir_list = result.val;<br>                            assert.equal(dir_list.length, <span class=\"hljs-number\">2</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">0</span>].name, project.name + <span class=\"hljs-string\">'/SubDir'</span>);<br>                            assert.equal(dir_list[<span class=\"hljs-number\">1</span>].name, project.name + <span class=\"hljs-string\">'/SubDir/AnotherDir'</span>);<br>                            targetDir = dir_list[<span class=\"hljs-number\">1</span>];<br>                            updateArgs = {<br>                                move: {<br>                                    new_directory_id: targetDir.id,<br>                                    old_directory_id: top_directory.id<br>                                }<br>                            };<br>                            _context2.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.update(file2.id, project.id, user, updateArgs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            _context2.next = <span class=\"hljs-number\">35</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.fileInDirectoryByName(targetDir.id, file2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">35</span>:<br>                            fileProbe = _context2.sent;<br>                            assert.isOk(fileProbe);<br>                            assert.equal(fileProbe.owner, userId);<br>                            assert.equal(fileProbe.id, file2.id);<br>                            <span class=\"hljs-comment\">// create faked versions of file3</span><br>                            _context2.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file2, file1);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file2.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file1.id);<br>                            _context2.next = <span class=\"hljs-number\">48</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">48</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file1.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            _context2.next = <span class=\"hljs-number\">55</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.pushVersion(file3, file2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">55</span>:<br>                            fileWithVersion = _context2.sent;<br>                            assert.isOk(fileWithVersion);<br>                            assert.equal(fileWithVersion.id, file3.id);<br>                            assert.isOk(fileWithVersion.parent);<br>                            assert.equal(fileWithVersion.parent, file2.id);<br>                            _context2.next = <span class=\"hljs-number\">62</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(fileWithVersion.parent);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">62</span>:<br>                            otherVersion = _context2.sent;<br>                            assert.isOk(otherVersion);<br>                            assert.equal(otherVersion.id, file2.id);<br>                            assert.isFalse(otherVersion.current);<br>                            assert.isTrue(fileWithVersion.current);<br>                            <span class=\"hljs-comment\">// versions are still available</span><br>                            _context2.next = <span class=\"hljs-number\">69</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getVersions(fileWithVersion.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">69</span>:<br>                            versions = _context2.sent;<br>                            assert.isOk(versions);<br>                            assert.isOk(versions.val);<br>                            probe = versions.val;<br>                            assert.equal(probe.length, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"Some versions of the file are missing\"</span>);<br>                            assert.equal(probe[<span class=\"hljs-number\">0</span>].id, file2.id);<br>                            assert.equal(probe[<span class=\"hljs-number\">1</span>].id, file1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">76</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "089a5eac-2479-4765-ae53-e4eb22315f3a",
      "parentUUID": "fd12e689-51f0-4fee-ad4f-99ed5b35cf32",
      "skipped": false
    },
    {
      "title": "creates a process",
      "fullTitle": "Function level creates a process",
      "timedOut": false,
      "duration": 261,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Create Process Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context2.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context2.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context2.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            process = ret.val;<br>                            assert.isOk(process);<br>                            assert.equal(process.owner, user.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "093774c8-6161-480b-aeb3-381d3dcce7f8",
      "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
      "skipped": false
    },
    {
      "title": "creates two processes linked by sample ",
      "fullTitle": "Function level creates two processes linked by sample ",
      "timedOut": false,
      "duration": 678,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context3.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context3.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context3.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "65666ef5-2211-4408-9921-ee632a72b438",
      "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
      "skipped": false
    },
    {
      "title": "deletes two processes leaf first",
      "fullTitle": "Function level deletes two processes leaf first",
      "timedOut": false,
      "duration": 841,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Delete Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context4.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context4.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, measurement_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            _context4.next = <span class=\"hljs-number\">46</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, create_sample_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            ret = _context4.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "f139785d-961a-49d3-9fe8-e5d2d0a29fbe",
      "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
      "skipped": false
    },
    {
      "title": "does not allow deleting non-leaf nodes",
      "fullTitle": "Function level does not allow deleting non-leaf nodes",
      "timedOut": false,
      "duration": 656,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> ret, experiment, create_sample_process, sample, measurement_process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createExperiment(project, <span class=\"hljs-string\">\"Two Processes Delete Experiment\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            experiment = ret.val;<br>                            assert.isOk(experiment);<br>                            assert.equal(experiment.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_Create Samples'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            create_sample_process = ret.val;<br>                            assert.isOk(create_sample_process);<br>                            assert.equal(create_sample_process.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createSamples(project, experiment, create_sample_process, [<span class=\"hljs-string\">'Test Sample'</span>]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.isOk(ret.val.samples);<br>                            assert.equal(ret.val.samples.length, <span class=\"hljs-number\">1</span>);<br>                            sample = ret.val.samples[<span class=\"hljs-number\">0</span>];<br>                            _context5.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.createProcess(project, experiment, <span class=\"hljs-string\">\"Test Create Sample Process\"</span>, <span class=\"hljs-string\">'global_SEM'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            measurement_process = ret.val;<br>                            assert.isOk(measurement_process);<br>                            assert.equal(measurement_process.owner, user.id);<br>                            _context5.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> testHelpers.addSamplesToProcess(project, experiment, measurement_process, [sample]);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.val);<br>                            assert.equal(ret.val.owner, user.id);<br>                            assert.equal(ret.val.id, measurement_process.id);<br>                            _context5.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> processes.deleteProcess(project.id, create_sample_process.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            ret = _context5.sent;<br>                            assert.isOk(ret);<br>                            assert.isOk(ret.error);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">44</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "6da07fa5-0abf-4c0a-b06a-52a6eb9a812c",
      "parentUUID": "64a0d1f1-b03c-4b3f-959e-30f3ed614c20",
      "skipped": false
    },
    {
      "title": "does not delete a project with any published datasets",
      "fullTitle": "Delete Project:  does not delete a project with any published datasets",
      "timedOut": false,
      "duration": 5728,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context2.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context2.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// publish one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            _context2.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> experimentDatasets.publishDataset(datasetId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.published);<br>                            assert(results.val.published);<br>                            <span class=\"hljs-comment\">// delete project - fails</span><br>                            _context2.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context2.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "4f210ab4-8836-461d-a4bc-0fdc812e7977",
      "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
      "skipped": false
    },
    {
      "title": "does not delete a project if any dataset in any experiment has a DOI",
      "fullTitle": "Delete Project:  does not delete a project if any dataset in any experiment has a DOI",
      "timedOut": false,
      "duration": 5222,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> project_id, experiment_id, datasetId, fakeDOI, status, results;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context3.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            experiment_id = experiment.id;<br>                            assert.isOk(experiment_id);<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            <span class=\"hljs-comment\">// fake a doi on one of the datasets</span><br>                            datasetId = datasetIdList[<span class=\"hljs-number\">0</span>];<br>                            fakeDOI = <span class=\"hljs-string\">\"fakeDOI\"</span>;<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.table(<span class=\"hljs-string\">'datasets'</span>).get(datasetId).update({ doi: fakeDOI });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            status = _context3.sent;<br>                            <span class=\"hljs-keyword\">if</span> (status.replaced != <span class=\"hljs-number\">1</span>) {<br>                                assert.fail(<span class=\"hljs-string\">'Update of DOI in dataset, '</span> + datasetId + <span class=\"hljs-string\">', failed.'</span>);<br>                            }<br>                            <span class=\"hljs-comment\">// delete project - fails</span><br>                            _context3.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results);<br>                            assert.isOk(results.error);<br>                            _context3.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> testDatasets({ assertExists: <span class=\"hljs-literal\">true</span> });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "fc98852f-2670-4e3c-a075-e734eb633e23",
      "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
      "skipped": false
    },
    {
      "title": "supports a dry run mode",
      "fullTitle": "Delete Project:  supports a dry run mode",
      "timedOut": false,
      "duration": 5170,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> dryRun, project_id, results, tally;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">8000</span>); <span class=\"hljs-comment\">// test take up to 8 seconds</span><br>                            _context4.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            dryRun = <span class=\"hljs-literal\">true</span>;<br>                            assert.isOk(project);<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            results = _context4.sent;<br>                            assert.isOk(results);<br>                            tally = results.val;<br>                            assert.isOk(tally);<br>                            _context4.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkTally(tally, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context4.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> confirmDemoProjectCoverage(tally, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "fff86865-3c4a-40c9-9249-cb8155d6e8a6",
      "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
      "skipped": false
    },
    {
      "title": "deletes the indicated project",
      "fullTitle": "Delete Project:  deletes the indicated project",
      "timedOut": false,
      "duration": 7273,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> dryRun, project_id, results, tally;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>); <span class=\"hljs-comment\">// test take up to 12 seconds</span><br>                            _context5.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> createRenamedDemoProject();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            dryRun = <span class=\"hljs-literal\">false</span>;<br>                            assert.isOk(project);<br>                            project_id = project.id;<br>                            assert.isOk(project_id);<br>                            _context5.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> projectDelete.deleteProject(project_id, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            results = _context5.sent;<br>                            assert.isOk(results);<br>                            tally = results.val;<br>                            assert.isOk(tally);<br>                            _context5.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> checkTally(tally, project_id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context5.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> confirmDemoProjectCoverage(tally, { dryRun: dryRun });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "2c428118-d324-463f-af24-f41e57202a17",
      "parentUUID": "3bbde55c-8589-4d70-b76a-9af27ac59460",
      "skipped": false
    },
    {
      "title": "create project and get project back",
      "fullTitle": "Create project create project and get project back",
      "timedOut": false,
      "duration": 71,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context2.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context2.sent;<br>                            project = ret.val;<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.owner, user.id);<br>                            assert.equal(project.owner, userId);<br>                            assert.equal(project.users.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "a510535f-be19-4369-94e3-ab1084c5873d",
      "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
      "skipped": false
    },
    {
      "title": "create project and find project in all projects",
      "fullTitle": "Create project create project and find project in all projects",
      "timedOut": false,
      "duration": 73,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context3.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context3.sent;<br>                            project = ret.val;<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                            _context3.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.all();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            project_list = _context3.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "684016b9-292a-400d-a773-2310c65eb8d5",
      "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
      "skipped": false
    },
    {
      "title": "create project and find project by user",
      "fullTitle": "Create project create project and find project by user",
      "timedOut": false,
      "duration": 191,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.users[<span class=\"hljs-number\">0</span>].user_id, userId);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            project_list = _context4.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            assert.equal(found_project.users.length, <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> field is user, here, but user_id in test above!!!</span><br>                            <span class=\"hljs-comment\">// is this the correct behaivor???</span><br>                            assert.equal(found_project.users[<span class=\"hljs-number\">0</span>].user, userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "1bf2fb48-898a-4ec8-8736-9abb082c5386",
      "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
      "skipped": false
    },
    {
      "title": "create project, find by user, has full set of properties",
      "fullTitle": "Create project create project, find by user, has full set of properties",
      "timedOut": false,
      "duration": 191,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, project_list, found_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context5.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context5.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context5.sent;<br>                            project = ret.val;<br>                            _context5.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.forUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            project_list = _context5.sent;<br>                            found_project = <span class=\"hljs-literal\">null</span>;<br>                            project_list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (p.name == project_name) {<br>                                    found_project = p;<br>                                }<br>                            });<br>                            assert.isNotNull(found_project);<br>                            assert.equal(found_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(found_project.owner, user.id);<br>                            assert.equal(found_project.owner, userId);<br>                            assert.equal(found_project.users.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(found_project.users[<span class=\"hljs-number\">0</span>].user, userId);<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'events'</span>));<br>                            assert.equal(found_project.events.length, <span class=\"hljs-number\">0</span>);<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'processes'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'samples'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'files'</span>));<br>                            assert.isTrue(found_project.hasOwnProperty(<span class=\"hljs-string\">'experiments'</span>));<br>                            assert.equal(found_project.processes, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.samples, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.files, <span class=\"hljs-number\">0</span>);<br>                            assert.equal(found_project.experiments, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">31</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "2c11c9be-fb3a-435d-a301-a6a0c8f9c8da",
      "parentUUID": "54761fec-7206-469f-88f7-7c11efed28af",
      "skipped": false
    },
    {
      "title": "create project, update name and description",
      "fullTitle": "Update project create project, update name and description",
      "timedOut": false,
      "duration": 110,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, project_name, attrs, ret, project, top_directory, name, description, update_attrs, updated_project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(userId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context6.sent;<br>                            project_name = random_name();<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            attrs = {<br>                                name: project_name,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context6.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context6.sent;<br>                            project = ret.val;<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, project_name);<br>                            assert.equal(project.owner, userId);<br>                            _context6.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            top_directory = _context6.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project_name);<br>                            name = random_name();<br>                            description = <span class=\"hljs-string\">\"An alternate description\"</span>;<br>                            update_attrs = {<br>                                name: name,<br>                                description: description<br>                            };<br>                            _context6.next = <span class=\"hljs-number\">23</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.update(project.id, update_attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span>:<br>                            updated_project = _context6.sent;<br>                            assert.equal(updated_project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(updated_project.owner, userId);<br>                            assert.equal(updated_project.name, name);<br>                            assert.equal(updated_project.description, description);<br>                            _context6.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            top_directory = _context6.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "634c9fbc-92c6-46ac-b2ac-90200cd0bd8e",
      "parentUUID": "f934f047-f029-47c4-9894-a58df5bfad04",
      "skipped": false
    },
    {
      "title": "there is a user for testing",
      "fullTitle": "User with reset_password flag there is a user for testing",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "d506807f-1d42-49c5-81bd-379965bc193a",
      "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
      "skipped": false
    },
    {
      "title": "User with the reset password flag set",
      "fullTitle": "User with reset_password flag User with the reset password flag set",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, validate_uuid, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context3.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                            _context3.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> r.uuid();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            validate_uuid = _context3.sent;<br>                            _context3.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.setUserPasswordResetFlag(user1Id, validate_uuid);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            result = _context3.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly added to the user\"</span>);<br>                            _context3.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            user = _context3.sent;<br>                            assert.isTrue(user.reset_password, <span class=\"hljs-string\">\"The flag is set\"</span>);<br>                            assert.equal(user.validate_uuid, validate_uuid);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "26d2b93a-4d0a-4335-b05f-c2b31056001b",
      "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
      "skipped": false
    },
    {
      "title": "User reset password flag is cleared",
      "fullTitle": "User with reset_password flag User reset password flag is cleared",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, result;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user is not null\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.setUserPasswordResetFlag(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            result = _context4.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly added to the user\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            user = _context4.sent;<br>                            assert.isTrue(user.reset_password);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.clearUserPasswordResetFlag(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            result = _context4.sent;<br>                            assert.equal(result.replaced, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"The flag was correctly cleared from the user\"</span>);<br>                            _context4.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(user1Id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            user = _context4.sent;<br>                            assert.isUndefined(user.reset_password, <span class=\"hljs-string\">\"The flag is cleared\"</span>);<br>                            assert.isUndefined(user.validate_uuid, <span class=\"hljs-string\">\"The flag is cleared\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "2950d930-3406-4144-a197-035c982afcd7",
      "parentUUID": "7f661cf5-3c43-4d52-836c-b2db4069d1e9",
      "skipped": false
    },
    {
      "title": "create a sample set",
      "fullTitle": "Create Sample create a sample set",
      "timedOut": false,
      "duration": 146,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sampleName1, sampleName2, sampleNameList, sampleNameArgs, results, sampleList, sample1, sample2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            sampleName1 = <span class=\"hljs-string\">\"Sample1 For Test\"</span>;<br>                            sampleName2 = <span class=\"hljs-string\">\"Sample2 For Test\"</span>;<br>                            sampleNameList = [sampleName1, sampleName2];<br>                            sampleNameArgs = [];<br>                            sampleNameList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{<br>                                sampleNameArgs.push({ name: name });<br>                            });<br>                            _context2.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.createSamples(project.id, createSampleProcess.id, sampleNameArgs, project.owner);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results.val);<br>                            assert.isOk(results.val.samples);<br>                            sampleList = results.val.samples;<br>                            assert.isOk(sampleList);<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            sample1 = sampleList[<span class=\"hljs-number\">0</span>];<br>                            assert.isOk(sample1);<br>                            assert.equal(sample1.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample1.name, sampleName1);<br>                            sample2 = sampleList[<span class=\"hljs-number\">1</span>];<br>                            assert.isOk(sample2);<br>                            assert.equal(sample2.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample2.name, sampleName2);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "5b2738df-0d5f-42b3-ba86-db99df85985c",
      "parentUUID": "6fdf4d06-f29d-4db0-adcb-680176e87613",
      "skipped": false
    },
    {
      "title": "get samples by id",
      "fullTitle": "Get Samples get samples by id",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sample, experiments, processes, checks, c, name, direction, found, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getSample(sample1.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context2.sent;<br>                            assert.isOk(results.val);<br>                            sample = results.val;<br>                            assert.equal(sample.otype, <span class=\"hljs-string\">'sample'</span>);<br>                            assert.equal(sample.name, sample1.name);<br>                            experiments = sample.experiments;<br>                            assert.equal(experiments.length, <span class=\"hljs-number\">1</span>);<br>                            assert.equal(experiments[<span class=\"hljs-number\">0</span>].id, experiment.id);<br>                            processes = sample.processes;<br>                            assert.equal(processes.length, <span class=\"hljs-number\">3</span>);<br>                            checks = [{ name: createSampleProcess.name, direction: <span class=\"hljs-string\">'out'</span> }, { name: transformationProcess1.name, direction: <span class=\"hljs-string\">'in'</span> }, { name: transformationProcess1.name, direction: <span class=\"hljs-string\">'out'</span> }];<br>                            <span class=\"hljs-keyword\">for</span> (c = <span class=\"hljs-number\">0</span>; c &lt; checks.length; c++) {<br>                                name = checks[c].name;<br>                                direction = checks[c].direction;<br>                                found = <span class=\"hljs-literal\">false</span>;<br>                                <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; processes.length; i++) {<br>                                    <span class=\"hljs-keyword\">if</span> (name === processes[i].name &amp;&amp; direction === processes[i].direction) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                }<br>                                assert(found, <span class=\"hljs-string\">'Missing process for sample '</span> + sample1.name + <span class=\"hljs-string\">': expected name = \\''</span> + name + <span class=\"hljs-string\">'\\' with direction \\''</span> + direction + <span class=\"hljs-string\">'\\''</span>);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "a717fc5e-7d35-4166-bc7b-27930f6399fc",
      "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
      "skipped": false
    },
    {
      "title": "gets all samples for experiment",
      "fullTitle": "Get Samples gets all samples for experiment",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sampleList, testTable, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getAllSamplesForExperiment(experiment.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context3.sent;<br>                            assert.isOk(results.val);<br>                            sampleList = results.val;<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            testTable = {};<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleList.length; i++) {<br>                                testTable[sampleList[i].id] = sampleList[i];<br>                            }<br>                            assert.isOk(testTable[sample1.id]);<br>                            assert.equal(testTable[sample1.id].name, sample1.name);<br>                            assert.isOk(testTable[sample2.id]);<br>                            assert.equal(testTable[sample2.id].name, sample2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "64091ee3-8429-462c-9b7c-bc6cb07c1f3d",
      "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
      "skipped": false
    },
    {
      "title": "gets all samples for project",
      "fullTitle": "Get Samples gets all samples for project",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> results, sampleList, testTable, i;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> samples.getAllSamplesForProject(project.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            results = _context4.sent;<br>                            assert.isOk(results.val);<br>                            sampleList = results.val;<br>                            assert.equal(sampleList.length, <span class=\"hljs-number\">2</span>);<br>                            testTable = {};<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleList.length; i++) {<br>                                testTable[sampleList[i].id] = sampleList[i];<br>                            }<br>                            assert.isOk(testTable[sample1.id]);<br>                            assert.equal(testTable[sample1.id].name, sample1.name);<br>                            assert.isOk(testTable[sample2.id]);<br>                            assert.equal(testTable[sample2.id].name, sample2.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "1249d77c-0567-48c7-afed-ae3311fd290c",
      "parentUUID": "278aead4-1aaa-44d3-b2a2-2681ecf1a661",
      "skipped": false
    },
    {
      "title": "each users exist - internal use",
      "fullTitle": "Standard Test Users each users exist - internal use",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> users, ids, i, _user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUsers();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            users = _context2.sent;<br>                            ids = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; users.length; i++) {<br>                                _user = users[i];<br>                                ids.push(_user.id);<br>                            }<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"test@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"another@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"admin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"tadmin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "cf55a80b-6cb3-420e-b7d5-558e76a392c1",
      "parentUUID": "35b97aba-8025-4ac2-8bdc-5e9dd400a6ac",
      "skipped": false
    },
    {
      "title": "each users exist - external use",
      "fullTitle": "Standard Test Users each users exist - external use",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> users, ids, i, _user2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getAllUsersExternal();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            users = _context3.sent;<br>                            ids = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; users.length; i++) {<br>                                _user2 = users[i];<br>                                ids.push(_user2.id);<br>                            }<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"test@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"another@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"admin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                            assert(ids.indexOf(<span class=\"hljs-string\">\"tadmin@test.mc\"</span>) &gt; -<span class=\"hljs-number\">1</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "3b1fc700-4f53-4364-a3a6-43c18bdd21f3",
      "parentUUID": "35b97aba-8025-4ac2-8bdc-5e9dd400a6ac",
      "skipped": false
    },
    {
      "title": "can store values",
      "fullTitle": "User Profile can store values",
      "timedOut": false,
      "duration": 87,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> name, value, probe;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            name = random_name(<span class=\"hljs-string\">\"test value - \"</span>);<br>                            value = name;<br>                            _context4.next = <span class=\"hljs-number\">4</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.storeInUserProfile(userId, name, value);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">9</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.storeInUserProfile(userId, name, value);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.getFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">19</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.clearFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                            probe = _context4.sent;<br>                            assert.isOk(probe);<br>                            assert.equal(probe, name);<br>                            _context4.next = <span class=\"hljs-number\">24</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.clearFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                            probe = _context4.sent;<br>                            assert.isNull(probe);<br>                            _context4.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelProfile.getFromUserProfile(userId, name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            probe = _context4.sent;<br>                            assert.isNull(probe);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "84b9f546-fd6d-4aee-82fb-6c433dbd835d",
      "parentUUID": "ec285e69-04f1-49d8-b350-6dc9e8021f62",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "User for test exists",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee2$</span>(<span class=\"hljs-params\">_context2</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context2.prev = _context2.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context2.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context2.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.apikey, demoProjectTestUserKey);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context2.stop();<br>                    }<br>                }<br>            }, _callee2, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "f9ca3c66-45e3-4334-a2e5-54d74be8f79f",
      "parentUUID": "5f6627d1-dd6c-4b8f-a16f-6fb848d054e7",
      "skipped": false
    },
    {
      "title": "exists in folder",
      "fullTitle": "List of files for build exists in folder",
      "timedOut": false,
      "duration": 55,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> i, checksumAndFilename, expectedChecksum, filename, path, checksum;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee3$</span>(<span class=\"hljs-params\">_context3</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context3.prev = _context3.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            assert(fs.existsSync(demoProjectConf.fullDatapath), <span class=\"hljs-string\">\"missing test datafile dir \"</span> + demoProjectConf.fullDatapath);<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context3.next = <span class=\"hljs-number\">15</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumAndFilename = helper.filesDescriptions()[i];<br>                            expectedChecksum = checksumAndFilename[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumAndFilename[<span class=\"hljs-number\">1</span>];<br>                            path = demoProjectConf.fullDatapath + <span class=\"hljs-string\">'/'</span> + filename;<br>                            assert(fs.existsSync(path), <span class=\"hljs-string\">\"missing test datafile \"</span> + demoProjectConf.fullDatapath + <span class=\"hljs-string\">\"/\"</span> + filename);<br>                            _context3.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> md5File(path);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            checksum = _context3.sent;<br>                            assert(expectedChecksum == checksum, <span class=\"hljs-string\">\"Checksums should be equal for file: \"</span> + filename + <span class=\"hljs-string\">\"; but expected \"</span> + expectedChecksum + <span class=\"hljs-string\">\" and got \"</span> + checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            i++;<br>                            _context3.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context3.stop();<br>                    }<br>                }<br>            }, _callee3, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "854aa1fe-fce4-4a78-864f-5697bec02f8e",
      "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
      "skipped": false
    },
    {
      "title": "can be inserted in database",
      "fullTitle": "List of files for build can be inserted in database",
      "timedOut": false,
      "duration": 1320,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, projectName, attrs, ret, project, top_directory, tempDir, fileResults, fileCount, i, checksumFilenameAndMimetype, expectedChecksum, filename, mimetype, path, checksum, stats, fileSizeInBytes, source, args, file, _i, _checksumFilenameAndMimetype, _expectedChecksum, _filename, _file;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee4$</span>(<span class=\"hljs-params\">_context4</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context4.prev = _context4.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context4.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context4.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            projectName = random_name();<br>                            attrs = {<br>                                name: projectName,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context4.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context4.sent;<br>                            project = ret.val;<br>                            assert.equal(projectName, project.name);<br>                            assert.equal(user.id, project.owner);<br>                            _context4.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.get(project.id, <span class=\"hljs-string\">'top'</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            top_directory = _context4.sent;<br>                            assert.equal(top_directory.otype, <span class=\"hljs-string\">\"directory\"</span>);<br>                            assert.equal(top_directory.name, project.name);<br>                            tempDir = os.tmpdir();<br>                            fileResults = {};<br>                            fileCount = <span class=\"hljs-number\">0</span>;<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context4.next = <span class=\"hljs-number\">49</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumFilenameAndMimetype = helper.filesDescriptions()[i];<br>                            expectedChecksum = checksumFilenameAndMimetype[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumFilenameAndMimetype[<span class=\"hljs-number\">1</span>];<br>                            mimetype = checksumFilenameAndMimetype[<span class=\"hljs-number\">2</span>];<br>                            path = demoProjectConf.fullDatapath + <span class=\"hljs-string\">'/'</span> + filename;<br>                            assert(fs.existsSync(path), <span class=\"hljs-string\">\"missing test datafile \"</span> + demoProjectConf.fullDatapath + <span class=\"hljs-string\">\"/\"</span> + filename);<br>                            _context4.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> md5File(path);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            checksum = _context4.sent;<br>                            assert(expectedChecksum == checksum, <span class=\"hljs-string\">\"Checksums should be equal for file: \"</span> + filename + <span class=\"hljs-string\">\"; but expected \"</span> + expectedChecksum + <span class=\"hljs-string\">\" and got \"</span> + checksum);<br>                            stats = fs.statSync(path);<br>                            fileSizeInBytes = stats.size;<br>                            _context4.next = <span class=\"hljs-number\">36</span>;<br>                            <span class=\"hljs-keyword\">return</span> copyOne(path, tempDir);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                            source = _context4.sent;<br>                            path = source.path;<br>                            args = {<br>                                name: filename,<br>                                checksum: checksum,<br>                                mediatype: fileUtils.mediaTypeDescriptionsFromMime(mimetype),<br>                                filesize: fileSizeInBytes,<br>                                filepath: path<br>                            };<br>                            _context4.next = <span class=\"hljs-number\">41</span>;<br>                            <span class=\"hljs-keyword\">return</span> directories.ingestSingleLocalFile(project.id, top_directory.id, user.id, args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">41</span>:<br>                            file = _context4.sent;<br>                            should.exist(file);<br>                            assert.equal(file.name, filename);<br>                            assert.equal(file.checksum, checksum);<br>                            fileResults[file.checksum] = file;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                            i++;<br>                            _context4.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            <span class=\"hljs-keyword\">for</span> (_i = <span class=\"hljs-number\">0</span>; _i &lt; helper.filesDescriptions().length; _i++) {<br>                                _checksumFilenameAndMimetype = helper.filesDescriptions()[_i];<br>                                _expectedChecksum = _checksumFilenameAndMimetype[<span class=\"hljs-number\">0</span>];<br>                                _filename = _checksumFilenameAndMimetype[<span class=\"hljs-number\">1</span>];<br>                                _file = fileResults[_expectedChecksum];<br>                                should.exist(_file, <span class=\"hljs-string\">\"file with filname = \"</span> + _filename + <span class=\"hljs-string\">\" in not in the results\"</span>);<br>                                assert.equal(_file.name, _filename);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">50</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context4.stop();<br>                    }<br>                }<br>            }, _callee4, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "a851fd2b-93c1-4b4c-adae-c99226af2998",
      "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
      "skipped": false
    },
    {
      "title": "is in the database",
      "fullTitle": "List of files for build is in the database",
      "timedOut": false,
      "duration": 119,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> i, checksumAndFilename, checksum, filename, fileList, file, _i2;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee5$</span>(<span class=\"hljs-params\">_context5</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context5.prev = _context5.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            assert(fs.existsSync(demoProjectConf.fullDatapath), <span class=\"hljs-string\">\"missing test datafile dir \"</span> + demoProjectConf.fullDatapath);<br>                            i = <span class=\"hljs-number\">0</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            <span class=\"hljs-keyword\">if</span> (!(i &lt; helper.filesDescriptions().length)) {<br>                                _context5.next = <span class=\"hljs-number\">19</span>;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            }<br>                            checksumAndFilename = helper.filesDescriptions()[i];<br>                            checksum = checksumAndFilename[<span class=\"hljs-number\">0</span>];<br>                            filename = checksumAndFilename[<span class=\"hljs-number\">1</span>];<br>                            _context5.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.getAllByChecksum(checksum);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            fileList = _context5.sent;<br>                            file = <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">for</span> (_i2 = <span class=\"hljs-number\">0</span>; _i2 &lt; fileList.length; _i2++) {<br>                                <span class=\"hljs-keyword\">if</span> (!fileList[_i2].usesid) file = fileList[_i2];<br>                            }<br>                            assert(file, <span class=\"hljs-string\">\"Missing original file for \"</span> + filename);<br>                            _context5.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> files.get(file.id);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            file = _context5.sent;<br>                            assert(file.name == filename, <span class=\"hljs-string\">\"Filename for file by checksum for filename = \"</span> + filename + <span class=\"hljs-string\">\"; with checksum = \"</span> + checksum + <span class=\"hljs-string\">\"; expected \"</span> + filename + <span class=\"hljs-string\">\" but found \"</span> + file.name);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            i++;<br>                            _context5.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context5.stop();<br>                    }<br>                }<br>            }, _callee5, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "52b52cca-d0dd-4e7b-830f-7a8b058845db",
      "parentUUID": "f356d1fa-05bb-48fd-a2da-9c107caa8c64",
      "skipped": false
    },
    {
      "title": "checkes for missing files in folder",
      "fullTitle": "Build Demo Project helper supporting functions checkes for missing files in folder",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee6$</span>(<span class=\"hljs-params\">_context6</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context6.prev = _context6.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context6.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInFolder(demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            missingFiles = _context6.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context6.stop();<br>                    }<br>                }<br>            }, _callee6, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "ac87ef3f-095f-4884-9a44-1be3e1b68b31",
      "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
      "skipped": false
    },
    {
      "title": "adds all files to top dir of a test Demo Project",
      "fullTitle": "Build Demo Project helper supporting functions adds all files to top dir of a test Demo Project",
      "timedOut": false,
      "duration": 1375,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, projectName, attrs, ret, project, files, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee7$</span>(<span class=\"hljs-params\">_context7</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context7.prev = _context7.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context7.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context7.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            projectName = random_name();<br>                            attrs = {<br>                                name: projectName,<br>                                description: <span class=\"hljs-string\">\"This is a test project for automated testing.\"</span><br>                            };<br>                            _context7.next = <span class=\"hljs-number\">8</span>;<br>                            <span class=\"hljs-keyword\">return</span> projects.createProject(user, attrs);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:<br>                            ret = _context7.sent;<br>                            project = ret.val;<br>                            assert.equal(projectName, project.name);<br>                            assert.equal(user.id, project.owner);<br>                            _context7.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            _context7.next = <span class=\"hljs-number\">16</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">16</span>:<br>                            files = _context7.sent;<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context7.next = <span class=\"hljs-number\">20</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                            missingFiles = _context7.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context7.stop();<br>                    }<br>                }<br>            }, _callee7, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "21839fec-14a6-4e48-bba8-f710585892ef",
      "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
      "skipped": false
    },
    {
      "title": "create a table of all templates",
      "fullTitle": "Build Demo Project helper supporting functions create a table of all templates",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> table;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee8$</span>(<span class=\"hljs-params\">_context8</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context8.prev = _context8.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context8.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.makeTemplateTable();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            table = _context8.sent;<br>                            assert.isOk(table, <span class=\"hljs-string\">\"table is undefined\"</span>);<br>                            assert(!_.isEmpty(table), <span class=\"hljs-string\">\"table is empty\"</span>);<br>                            assert.isOk(table[demoProjectConf.createSamplesTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.createSamplesTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.sectioningTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.sectioningTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.ebsdTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.ebsdTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                            assert.isOk(table[demoProjectConf.epmaTemplateId], <span class=\"hljs-string\">'table has a value for \\''</span> + demoProjectConf.epmaTemplateId + <span class=\"hljs-string\">'\\''</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context8.stop();<br>                    }<br>                }<br>            }, _callee8, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "e7354839-af2c-4e8c-8a65-d20f1d942785",
      "parentUUID": "68d9b79d-496b-4689-97c1-0a2e922b6cb9",
      "skipped": false
    },
    {
      "title": "demo project test user exists",
      "fullTitle": "Build Demo Project helper main functions demo project test user exists",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee9$</span>(<span class=\"hljs-params\">_context9</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context9.prev = _context9.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context9.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context9.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            assert.equal(user.name, demoProjectTestUserId);<br>                            assert.equal(user.apikey, demoProjectTestUserKey);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context9.stop();<br>                    }<br>                }<br>            }, _callee9, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "e9b9e8b0-7cfd-443e-bfbe-0e6fbe7f009d",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the Demo Project",
      "fullTitle": "Build Demo Project helper main functions find or create the Demo Project",
      "timedOut": false,
      "duration": 75,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee10$</span>(<span class=\"hljs-params\">_context10</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context10.prev = _context10.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context10.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context10.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            <span class=\"hljs-comment\">// Note create project returns the project if it already exists, by name</span><br>                            <span class=\"hljs-comment\">// It does not create a duplicate!</span><br>                            _context10.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context10.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.isNotNull(project, <span class=\"hljs-string\">\"project is not null\"</span>);<br>                            assert.equal(project.otype, <span class=\"hljs-string\">\"project\"</span>);<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            assert(project.description.includes(demoProjectConf.demoProjectDescription)); <span class=\"hljs-comment\">// may have been turned into html!!</span><br>                            assert.equal(project.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context10.stop();<br>                    }<br>                }<br>            }, _callee10, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "d3c2937f-4df5-4a31-9d3b-f4075c2056e6",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the Demo Experiment",
      "fullTitle": "Build Demo Project helper main functions find or create the Demo Experiment",
      "timedOut": false,
      "duration": 82,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee11$</span>(<span class=\"hljs-params\">_context11</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context11.prev = _context11.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context11.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context11.sent;<br>                            assert.isNotNull(user, <span class=\"hljs-string\">\"test user exists\"</span>);<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context11.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context11.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context11.next = <span class=\"hljs-number\">13</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span>:<br>                            valOrError = _context11.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.isNotNull(experiment, <span class=\"hljs-string\">\"experiment is not null\"</span>);<br>                            assert.equal(experiment.otype, <span class=\"hljs-string\">\"experiment\"</span>);<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            assert(experiment.description.includes(demoProjectConf.demoProjectExperimentDescription)); <span class=\"hljs-comment\">// may have been turned into html!!</span><br>                            assert.equal(experiment.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context11.stop();<br>                    }<br>                }<br>            }, _callee11, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "758d8f75-4549-4d18-ab1f-9fe0e3359793",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create a Demo Process",
      "fullTitle": "Build Demo Project helper main functions find or create a Demo Process",
      "timedOut": false,
      "duration": 198,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processData, processName, templateId, process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee12$</span>(<span class=\"hljs-params\">_context12</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context12.prev = _context12.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context12.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context12.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context12.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context12.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            processData = demoProjectConf.processesData[<span class=\"hljs-number\">0</span>];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context12.next = <span class=\"hljs-number\">21</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span>:<br>                            valOrError = _context12.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            assert.equal(process.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                            assert.equal(process.name, processName);<br>                            assert.equal(process.template_id, templateId);<br>                            assert.equal(process.owner, demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context12.stop();<br>                    }<br>                }<br>            }, _callee12, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "743255ac-6854-460b-857d-f3c873e5eefd",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create all Demo Processes",
      "fullTitle": "Build Demo Project helper main functions find or create all Demo Processes",
      "timedOut": false,
      "duration": 889,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, templateId, _process;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee13$</span>(<span class=\"hljs-params\">_context13</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context13.prev = _context13.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context13.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context13.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context13.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context13.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context13.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context13.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                templateId = processData.templateId;<br>                                _process = processes[i];<br>                                assert.equal(_process.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process.name, processName);<br>                                assert.equal(_process.template_id, templateId);<br>                                assert.equal(_process.owner, demoProjectTestUserId);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context13.stop();<br>                    }<br>                }<br>            }, _callee13, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "d379f802-35b4-4391-a307-4584bb3f0de9",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the output samples for a given Process",
      "fullTitle": "Build Demo Project helper main functions find or create the output samples for a given Process",
      "timedOut": false,
      "duration": 416,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, mapEntry, processData, processName, templateId, process, sampleIndexList, sampleNames, i, samples, _i3, sample, name;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee14$</span>(<span class=\"hljs-params\">_context14</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context14.prev = _context14.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context14.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context14.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context14.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context14.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            mapEntry = demoProjectConf.outputSampleIndexMap[<span class=\"hljs-number\">2</span>];<br>                            processData = demoProjectConf.processesData[mapEntry.processIndex];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context14.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleNames = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleIndexList.length; i++) {<br>                                sampleNames.push(demoProjectConf.sampleNameData[sampleIndexList[i]]);<br>                            }<br>                            _context14.next = <span class=\"hljs-number\">30</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindProcessOutputSamples(project, experiment, process, sampleNames);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                            valOrError = _context14.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindProcessOutputSamples: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, sampleNames.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i3 = <span class=\"hljs-number\">0</span>; _i3 &lt; sampleNames.length; _i3++) {<br>                                sample = samples[_i3];<br>                                name = sampleNames[_i3];<br>                                assert.equal(name, sample.name);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">36</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context14.stop();<br>                    }<br>                }<br>            }, _callee14, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "39019186-84ec-4d1a-98d1-1f628a3f6bdc",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the output samples for all Process",
      "fullTitle": "Build Demo Project helper main functions find or create the output samples for all Process",
      "timedOut": false,
      "duration": 402,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process2, samples, _i4, sample, name;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee15$</span>(<span class=\"hljs-params\">_context15</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context15.prev = _context15.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context15.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context15.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context15.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context15.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context15.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process2 = processes[i];<br>                                assert.equal(_process2.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process2.name, processName);<br>                            }<br>                            _context15.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context15.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i4 = <span class=\"hljs-number\">0</span>; _i4 &lt; demoProjectConf.sampleNameData.length; _i4++) {<br>                                sample = samples[_i4];<br>                                name = demoProjectConf.sampleNameData[_i4];<br>                                assert.equal(name, sample.name);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">32</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context15.stop();<br>                    }<br>                }<br>            }, _callee15, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "e65f57db-435e-4552-87a5-c0354e490723",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the input samples for a given Process",
      "fullTitle": "Build Demo Project helper main functions find or create the input samples for a given Process",
      "timedOut": false,
      "duration": 330,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process3, samples, mapEntry, process, sampleList, sampleIndexList, inputSampleList, missingSamples;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee16$</span>(<span class=\"hljs-params\">_context16</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context16.prev = _context16.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context16.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context16.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context16.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context16.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context16.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process3 = processes[i];<br>                                assert.equal(_process3.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process3.name, processName);<br>                            }<br>                            _context16.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            mapEntry = demoProjectConf.inputSampleIndexMap[<span class=\"hljs-number\">0</span>];<br>                            process = processes[mapEntry.processIndex];<br>                            sampleList = [];<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleIndexList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{<br>                                sampleList.push(samples[sampleIndexList[index]]);<br>                            });<br>                            _context16.next = <span class=\"hljs-number\">38</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindInputSamplesForProcess(project, experiment, process, sampleList);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">38</span>:<br>                            valOrError = _context16.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSampleForProcess: \"</span> + valOrError.error);<br>                            inputSampleList = valOrError.val;<br>                            assert.isOk(inputSampleList);<br>                            assert.lengthOf(inputSampleList, sampleIndexList.length);<br>                            missingSamples = [];<br>                            sampleList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">sample</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> found = <span class=\"hljs-literal\">false</span>;<br>                                inputSampleList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">inputSample</span>) </span>{<br>                                    <span class=\"hljs-keyword\">if</span> (sample.id == inputSample.id) {<br>                                        found = <span class=\"hljs-literal\">true</span>;<br>                                    }<br>                                });<br>                                <span class=\"hljs-keyword\">if</span> (!found) {<br>                                    misingSamples.push(sample);<br>                                }<br>                            });<br>                            assert.lengthOf(missingSamples, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"Samples missing from input_samplesa of perocess\"</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">46</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context16.stop();<br>                    }<br>                }<br>            }, _callee16, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "d93d5fc0-1c57-447b-9037-8ceec2623b2c",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find or create the input samples for all Processes",
      "fullTitle": "Build Demo Project helper main functions find or create the input samples for all Processes",
      "timedOut": false,
      "duration": 461,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process4, samples, inputSampleListList, _i5, mapEntry, _processName, indexList, inputSampleList;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee17$</span>(<span class=\"hljs-params\">_context17</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context17.prev = _context17.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context17.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context17.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context17.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context17.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context17.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process4 = processes[i];<br>                                assert.equal(_process4.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process4.name, processName);<br>                            }<br>                            _context17.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindOutputSamplesForAllProcesses(project, experiment, processes, demoProjectConf.sampleNameData, demoProjectConf.outputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindOutputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            _context17.next = <span class=\"hljs-number\">33</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindInputSamplesForAllProcesses(project, experiment, processes, samples, demoProjectConf.inputSampleIndexMap);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                            valOrError = _context17.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindInputSamplesForAllProcesses: \"</span> + valOrError.error);<br>                            inputSampleListList = valOrError.val;<br>                            assert.isOk(inputSampleListList);<br>                            assert.lengthOf(inputSampleListList, demoProjectConf.inputSampleIndexMap.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i5 = <span class=\"hljs-number\">0</span>; _i5 &lt; inputSampleListList.length; _i5++) {<br>                                mapEntry = demoProjectConf.inputSampleIndexMap[_i5];<br>                                _processName = processes[mapEntry.processIndex].name;<br>                                indexList = mapEntry.sampleIndexList;<br>                                inputSampleList = inputSampleListList[_i5];<br>                                assert.lengthOf(inputSampleList, indexList.length, <span class=\"hljs-string\">\"Missing samples for process with name: \"</span> + _processName);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context17.stop();<br>                    }<br>                }<br>            }, _callee17, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "da3a9882-0c1a-406a-8ee2-aa0c5f8bf364",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "add the setup values for a given Process",
      "fullTitle": "Build Demo Project helper main functions add the setup values for a given Process",
      "timedOut": false,
      "duration": 583,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process5, _i6, _processData, _processName2, _process6, processIndex, process, templateId, templateTable, template, templatePropertyList, templetPropertyTable, processSetupPropertyList, processSetupTable, valuesForSetup, args, updatedProcess, updatedProperties, _i7, probe, updatedPropertyTable;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee18$</span>(<span class=\"hljs-params\">_context18</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context18.prev = _context18.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context18.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context18.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context18.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context18.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context18.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process5 = processes[i];<br>                                assert.equal(_process5.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process5.name, processName);<br>                            }<br>                            <span class=\"hljs-comment\">// Note: refresh process list. If they were created for the first time on the above call, then the</span><br>                            <span class=\"hljs-comment\">// body of the returned process is not sufficently decorated to support inserting properties;</span><br>                            <span class=\"hljs-comment\">// however, on refresh it is. Needs to be investigated.</span><br>                            _context18.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i6 = <span class=\"hljs-number\">0</span>; _i6 &lt; demoProjectConf.processesData.length; _i6++) {<br>                                _processData = demoProjectConf.processesData[_i6];<br>                                _processName2 = _processData.name;<br>                                _process6 = processes[_i6];<br>                                assert.equal(_process6.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process6.name, _processName2);<br>                            }<br>                            processIndex = <span class=\"hljs-number\">0</span>;<br>                            process = processes[processIndex];<br>                            templateId = process[<span class=\"hljs-string\">'template_id'</span>];<br>                            _context18.next = <span class=\"hljs-number\">37</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.makeTemplateTable();<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">37</span>:<br>                            templateTable = _context18.sent;<br>                            template = templateTable[templateId];<br>                            templatePropertyList = template.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            templetPropertyTable = {};<br>                            templatePropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                templetPropertyTable[property.attribute] = property;<br>                            });<br>                            processSetupPropertyList = process.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            processSetupTable = {};<br>                            processSetupPropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                processSetupTable[property.attribute] = property;<br>                            });<br>                            assert.lengthOf(templatePropertyList, processSetupPropertyList.length, <span class=\"hljs-string\">\"Lengths of property-list in process and template should match\"</span>);<br>                            processSetupPropertyList.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">check</span>) </span>{<br>                                assert.ok(templetPropertyTable[check.attribute], <span class=\"hljs-string\">\"unexpected property attribute in process: \"</span> + check.attribute);<br>                                assert.equal(templetPropertyTable[check.attribute].otype, check.otype, <span class=\"hljs-string\">\"Type mismatch for property with attribute: \"</span> + check.attribute);<br>                            });<br>                            valuesForSetup = demoProjectConf.processesData[processIndex].properties;<br>                            args = [];<br>                            valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> property = processSetupTable[setupValue.attribute];<br>                                <span class=\"hljs-keyword\">if</span> (property) {<br>                                    property.setup_attribute = <span class=\"hljs-string\">\"instrument\"</span>;<br>                                    property.value = setupValue.value;<br>                                    <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                        property.unit = setupValue.unit;<br>                                    }<br>                                    args.push(property);<br>                                } <span class=\"hljs-keyword\">else</span> {<br>                                    assert.fail(<span class=\"hljs-string\">\"Template is missing expected attribute: \"</span> + setupValue.attribute);<br>                                }<br>                            });<br>                            _context18.next = <span class=\"hljs-number\">52</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcessSetupProperties(project, experiment, process, args);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">52</span>:<br>                            valOrError = _context18.sent;<br>                            <span class=\"hljs-keyword\">if</span> (valOrError.error) {<br>                                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"           Error expanded from setup properties: \"</span>, (<span class=\"hljs-number\">0</span>, _stringify2.default)(valOrError.error));<br>                            }<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoSetupProperties: \"</span> + valOrError.error);<br>                            updatedProcess = valOrError.val;<br>                            assert.equal(process.id, updatedProcess.id, <span class=\"hljs-string\">'Updated process for \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                            updatedProperties = updatedProcess.setup[<span class=\"hljs-number\">0</span>].properties;<br>                            _context18.next = <span class=\"hljs-number\">60</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">60</span>:<br>                            valOrError = _context18.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i7 = <span class=\"hljs-number\">0</span>; _i7 &lt; demoProjectConf.processesData.length; _i7++) {<br>                                probe = processes[_i7];<br>                                <span class=\"hljs-keyword\">if</span> (probe.id == process.id) {<br>                                    updatedProcess = probe;<br>                                    updatedProperties = probe.setup[<span class=\"hljs-number\">0</span>].properties;<br>                                }<br>                            }<br>                            assert.equal(process.id, updatedProcess.id, <span class=\"hljs-string\">'Updated process for \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                            updatedPropertyTable = {};<br>                            updatedProperties.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                updatedPropertyTable[property.attribute] = property;<br>                            });<br>                            valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> property = updatedPropertyTable[setupValue.attribute];<br>                                <span class=\"hljs-keyword\">if</span> (property) {<br>                                    <span class=\"hljs-keyword\">if</span> (property.value.name) {<br>                                        assert.ok(property.value.value);<br>                                        assert.ok(setupValue.value.name);<br>                                        assert.ok(setupValue.value.value);<br>                                        assert.equal(property.value.name, setupValue.value.name);<br>                                        assert.equal(property.value.value, setupValue.value.value);<br>                                    } <span class=\"hljs-keyword\">else</span> {<br>                                        assert.equal(property.value, setupValue.value, <span class=\"hljs-string\">\"Value for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                    }<br>                                    <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                        assert.equal(property.unit, setupValue.unit, <span class=\"hljs-string\">\"Unit for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                    }<br>                                } <span class=\"hljs-keyword\">else</span> {<br>                                    assert.fail(<span class=\"hljs-string\">\"Process \"</span> + process.name + <span class=\"hljs-string\">\" is missing expected setup value attribute: \"</span> + setupValue.attribute);<br>                                }<br>                            });<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">70</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context18.stop();<br>                    }<br>                }<br>            }, _callee18, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "40999e22-11d7-430d-987c-69561e5842ae",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "add the setup values for all Processes",
      "fullTitle": "Build Demo Project helper main functions add the setup values for all Processes",
      "timedOut": false,
      "duration": 912,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee19</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, processes, i, processData, processName, _process7, _i8, _processData2, _processName3, _process8, processIndex, updatedProcess, updatedProperties, valuesForSetup;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee19$</span>(<span class=\"hljs-params\">_context19</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context19.prev = _context19.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context19.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context19.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context19.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context19.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context19.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process7 = processes[i];<br>                                assert.equal(_process7.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process7.name, processName);<br>                            }<br>                            <span class=\"hljs-comment\">// Note: refresh process list. If they were created for the first time on the above call, then the</span><br>                            <span class=\"hljs-comment\">// body of the returned process is not sufficently decorated to support inserting properties;</span><br>                            <span class=\"hljs-comment\">// however, on refresh it is. Needs to be investigated.</span><br>                            _context19.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.ok(processes);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i8 = <span class=\"hljs-number\">0</span>; _i8 &lt; demoProjectConf.processesData.length; _i8++) {<br>                                _processData2 = demoProjectConf.processesData[_i8];<br>                                _processName3 = _processData2.name;<br>                                _process8 = processes[_i8];<br>                                assert.equal(_process8.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process8.name, _processName3);<br>                            }<br>                            _context19.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindSetupPropertiesForAllDemoProcesses(project, experiment, processes);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            valOrError = _context19.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindSetupPropertiesForAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (processIndex = <span class=\"hljs-number\">0</span>; processIndex &lt; processes.length; processIndex++) {<br>                                updatedProcess = processes[processIndex];<br>                                updatedProperties = updatedProcess.setup[<span class=\"hljs-number\">0</span>].properties;<br>                                valuesForSetup = demoProjectConf.processesData[processIndex].properties;<br>                                <span class=\"hljs-keyword\">if</span> (valuesForSetup &amp;&amp; valuesForSetup.length &lt; <span class=\"hljs-number\">0</span>) {<br>                                    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>                                        <span class=\"hljs-keyword\">var</span> updatedPropertyTable = {};<br>                                        updatedProperties.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">property</span>) </span>{<br>                                            updatedPropertyTable[property.attribute] = property;<br>                                        });<br>                                        valuesForSetup.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">setupValue</span>) </span>{<br>                                            <span class=\"hljs-keyword\">var</span> property = updatedPropertyTable[setupValue.attribute];<br>                                            <span class=\"hljs-keyword\">if</span> (property) {<br>                                                assert.equal(property.value, setupValue.value, <span class=\"hljs-string\">\"Value for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                                <span class=\"hljs-keyword\">if</span> (setupValue.unit) {<br>                                                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"unit - \"</span> + setupValue.attribute + <span class=\"hljs-string\">': '</span> + property.unit);<br>                                                    assert.equal(property.unit, setupValue.unit, <span class=\"hljs-string\">\"Unit for process \"</span> + process.name + <span class=\"hljs-string\">\" property with attribute\"</span> + setupValue.attribute);<br>                                                }<br>                                            } <span class=\"hljs-keyword\">else</span> {<br>                                                assert.fail(<span class=\"hljs-string\">\"Process \"</span> + process.name + <span class=\"hljs-string\">\" is missing expected setup value attribute: \"</span> + setupValue.attribute);<br>                                            }<br>                                        });<br>                                    })();<br>                                }<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">39</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context19.stop();<br>                    }<br>                }<br>            }, _callee19, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "3d19e410-2950-4260-851b-e27991edab8c",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "add the measurement values for the only Process with a measurement",
      "fullTitle": "Build Demo Project helper main functions add the measurement values for the only Process with a measurement",
      "timedOut": false,
      "duration": 375,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee20</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, mapEntry, processName, templateId, process, sampleIndexList, sampleNames, i, samples, _i9, _sample, name, processData, measurement, sample, updatedProcess, updatedmeasurement, _i10;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee20$</span>(<span class=\"hljs-params\">_context20</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context20.prev = _context20.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context20.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context20.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context20.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context20.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            _context20.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            mapEntry = demoProjectConf.outputSampleIndexMap[<span class=\"hljs-number\">0</span>];<br>                            processData = demoProjectConf.processesData[mapEntry.processIndex];<br>                            processName = processData.name;<br>                            templateId = processData.templateId;<br>                            _context20.next = <span class=\"hljs-number\">26</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            sampleIndexList = mapEntry.sampleIndexList;<br>                            sampleNames = [];<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sampleIndexList.length; i++) {<br>                                sampleNames.push(demoProjectConf.sampleNameData[sampleIndexList[i]]);<br>                            }<br>                            _context20.next = <span class=\"hljs-number\">34</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindProcessOutputSamples(project, experiment, process, sampleNames);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">34</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindProcessOutputSamples: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            assert.isOk(samples);<br>                            assert.lengthOf(samples, sampleNames.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i9 = <span class=\"hljs-number\">0</span>; _i9 &lt; sampleNames.length; _i9++) {<br>                                _sample = samples[_i9];<br>                                name = sampleNames[_i9];<br>                                assert.equal(name, _sample.name);<br>                            }<br>                            _context20.next = <span class=\"hljs-number\">42</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProcess(project, experiment, processName, templateId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">42</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProcess: \"</span> + valOrError.error);<br>                            process = valOrError.val;<br>                            processData = demoProjectConf.processesData[<span class=\"hljs-number\">0</span>];<br>                            measurement = processData.measurements[<span class=\"hljs-number\">0</span>];<br>                            _context20.next = <span class=\"hljs-number\">49</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.updateMeasurementForProcessSamples(process, measurement);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">49</span>:<br>                            valOrError = _context20.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindMeasurement: \"</span> + valOrError.error);<br>                            samples = valOrError.val;<br>                            sample = samples[<span class=\"hljs-number\">0</span>];<br>                            updatedProcess = <span class=\"hljs-literal\">null</span>;<br>                            sample.processes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">probe</span>) </span>{<br>                                <span class=\"hljs-keyword\">if</span> (probe.id == process.id) {<br>                                    updatedProcess = probe;<br>                                }<br>                            });<br>                            updatedmeasurement = updatedProcess.measurements[<span class=\"hljs-number\">0</span>];<br>                            assert.equal(measurement.attribute, updatedmeasurement.attribute);<br>                            assert.equal(measurement.name, updatedmeasurement.name);<br>                            assert.equal(measurement.otype, updatedmeasurement.otype);<br>                            assert.equal(measurement.unit, updatedmeasurement.unit);<br>                            assert.lengthOf(updatedmeasurement.value, measurement.value.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i10 = <span class=\"hljs-number\">0</span>; _i10 &lt; measurement.value.length; _i10++) {<br>                                assert.equal(updatedmeasurement.value[_i10].element, measurement.value[_i10].element);<br>                                assert.equal(updatedmeasurement.value[_i10].value, measurement.value[_i10].value);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">62</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context20.stop();<br>                    }<br>                }<br>            }, _callee20, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "f71c9df2-93f7-4a76-b33c-ca498eeb337a",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "find and attache the demo-project files to project",
      "fullTitle": "Build Demo Project helper main functions find and attache the demo-project files to project",
      "timedOut": false,
      "duration": 1350,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee21</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, files, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee21$</span>(<span class=\"hljs-params\">_context21</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context21.prev = _context21.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context21.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context21.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context21.next = <span class=\"hljs-number\">6</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:<br>                            valOrError = _context21.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            _context21.next = <span class=\"hljs-number\">12</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:<br>                            _context21.next = <span class=\"hljs-number\">14</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span>:<br>                            files = _context21.sent;<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context21.next = <span class=\"hljs-number\">18</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span>:<br>                            missingFiles = _context21.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context21.stop();<br>                    }<br>                }<br>            }, _callee21, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "4fbb393b-e970-4138-bf70-c1f307ab8213",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "add the demo-project files to the experiment",
      "fullTitle": "Build Demo Project helper main functions add the demo-project files to the experiment",
      "timedOut": false,
      "duration": 886,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee22</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, project, experiment, files, i, checksum, file, processes, updatedProcesses, _loop, processIndex;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee22$</span>(<span class=\"hljs-params\">_context22</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context22.prev = _context22.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            _context22.next = <span class=\"hljs-number\">2</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                            user = _context22.sent;<br>                            _context22.next = <span class=\"hljs-number\">5</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectForUser(user);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            project = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">10</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindDemoProjectExperiment(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindDemoProjectExperiment: \"</span> + valOrError.error);<br>                            experiment = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">15</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToProject(user, project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span>:<br>                            _context22.next = <span class=\"hljs-number\">17</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesForProject(project);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span>:<br>                            files = _context22.sent;<br>                            assert.lengthOf(files, demoProjectConf.checksumsFilesAndMimiTypes.length, <span class=\"hljs-string\">\"Files set is complete\"</span>);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.checksumsFilesAndMimiTypes.length; i++) {<br>                                checksum = demoProjectConf.checksumsFilesAndMimiTypes[i][<span class=\"hljs-number\">0</span>];<br>                                file = files[i];<br>                                assert.equal(checksum, file.checksum, <span class=\"hljs-string\">'Checksum for file: \\''</span> + file.name + <span class=\"hljs-string\">'\\''</span>);<br>                            }<br>                            _context22.next = <span class=\"hljs-number\">22</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.createOrFindAllDemoProcesses(project, experiment);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createOrFindAllDemoProcesses: \"</span> + valOrError.error);<br>                            processes = valOrError.val;<br>                            _context22.next = <span class=\"hljs-number\">27</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.addAllFilesToExperimentProcesses(project, experiment, processes, files);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">27</span>:<br>                            valOrError = _context22.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from addAllFilesToExperimentProcesses: \"</span> + valOrError.error);<br>                            updatedProcesses = valOrError.val;<br>                            assert.lengthOf(updatedProcesses, processes.length, <span class=\"hljs-string\">\"Processes with files added\"</span>);<br>                            _loop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_loop</span>(<span class=\"hljs-params\">processIndex</span>) </span>{<br>                                <span class=\"hljs-keyword\">var</span> process = updatedProcesses[processIndex];<br>                                <span class=\"hljs-keyword\">var</span> fileIndexes = demoProjectConf.processFileIndexList[processIndex];<br>                                <span class=\"hljs-keyword\">var</span> expectedFiles = [];<br>                                fileIndexes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{<br>                                    expectedFiles.push(files[index]);<br>                                });<br>                                <span class=\"hljs-keyword\">var</span> processFileTable = {};<br>                                <span class=\"hljs-keyword\">var</span> processFiles = process.files;<br>                                processFiles.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>{<br>                                    processFileTable[file.checksum] = file;<br>                                });<br>                                expectedFiles.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">expectedFile</span>) </span>{<br>                                    <span class=\"hljs-keyword\">var</span> matchingFile = processFileTable[expectedFile.checksum];<br>                                    assert.ok(matchingFile, <span class=\"hljs-string\">'Expecting file \\''</span> + expectedFile.name + <span class=\"hljs-string\">'\\' in process \\''</span> + process.name + <span class=\"hljs-string\">'\\''</span>);<br>                                    assert.equal(expectedFile.id, matchingFile.id);<br>                                });<br>                            };<br>                            <span class=\"hljs-keyword\">for</span> (processIndex = <span class=\"hljs-number\">0</span>; processIndex &lt; demoProjectConf.processFileIndexList.length; processIndex++) {<br>                                _loop(processIndex);<br>                            }<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">33</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context22.stop();<br>                    }<br>                }<br>            }, _callee22, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "52705a6b-d838-4dba-bab3-70a2dcfd1268",
      "parentUUID": "645a6bf7-eca9-490f-9ca1-c7379067a38a",
      "skipped": false
    },
    {
      "title": "buid",
      "fullTitle": "Complete demo project buid",
      "timedOut": false,
      "duration": 1930,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee23</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> user, valOrError, results, project, experiment, processes, samples, files, i, processData, processName, _process9, _i11, sample, name, missingFiles;<br>            <span class=\"hljs-keyword\">return</span> _regenerator2.default.wrap(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_callee23$</span>(<span class=\"hljs-params\">_context23</span>) </span>{<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>                    <span class=\"hljs-keyword\">switch</span> (_context23.prev = _context23.next) {<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                            <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">5000</span>); <span class=\"hljs-comment\">// this test can take up to 5 seconds</span><br>                            _context23.next = <span class=\"hljs-number\">3</span>;<br>                            <span class=\"hljs-keyword\">return</span> dbModelUsers.getUser(demoProjectTestUserId);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:<br>                            user = _context23.sent;<br>                            assert.equal(user.id, demoProjectTestUserId);<br>                            _context23.next = <span class=\"hljs-number\">7</span>;<br>                            <span class=\"hljs-keyword\">return</span> buildDemoProject.findOrBuildAllParts(user, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:<br>                            valOrError = _context23.sent;<br>                            assert.isUndefined(valOrError.error, <span class=\"hljs-string\">\"Unexpected error from createDemoProjectForUser: \"</span> + valOrError.error);<br>                            results = valOrError.val;<br>                            project = results.project;<br>                            experiment = results.experiment;<br>                            processes = results.processes;<br>                            samples = results.samples;<br>                            files = results.files;<br>                            assert.equal(project.name, demoProjectConf.demoProjectName);<br>                            assert(project.description.includes(demoProjectConf.demoProjectDescription));<br>                            assert.equal(project.owner, demoProjectTestUserId);<br>                            assert.equal(experiment.name, demoProjectConf.demoProjectExperimentName);<br>                            assert(experiment.description.includes(demoProjectConf.demoProjectExperimentDescription));<br>                            assert.equal(experiment.owner, demoProjectTestUserId);<br>                            assert.lengthOf(processes, demoProjectConf.processesData.length);<br>                            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; demoProjectConf.processesData.length; i++) {<br>                                processData = demoProjectConf.processesData[i];<br>                                processName = processData.name;<br>                                _process9 = processes[i];<br>                                assert.equal(_process9.otype, <span class=\"hljs-string\">\"process\"</span>);<br>                                assert.equal(_process9.name, processName);<br>                            }<br>                            assert.lengthOf(samples, demoProjectConf.sampleNameData.length);<br>                            <span class=\"hljs-keyword\">for</span> (_i11 = <span class=\"hljs-number\">0</span>; _i11 &lt; demoProjectConf.sampleNameData.length; _i11++) {<br>                                sample = samples[_i11];<br>                                name = demoProjectConf.sampleNameData[_i11];<br>                                assert.equal(name, sample.name);<br>                            }<br>                            assert.lengthOf(files, helper.filesDescriptions().length);<br>                            _context23.next = <span class=\"hljs-number\">28</span>;<br>                            <span class=\"hljs-keyword\">return</span> helper.filesMissingInDatabase(project, demoProjectConf.datapathPrefix);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">28</span>:<br>                            missingFiles = _context23.sent;<br>                            assert.lengthOf(missingFiles, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">30</span>:<br>                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'end'</span>:<br>                            <span class=\"hljs-keyword\">return</span> _context23.stop();<br>                    }<br>                }<br>            }, _callee23, <span class=\"hljs-keyword\">this</span>);",
      "isRoot": false,
      "uuid": "dc6be1b4-150f-4917-bb5e-9bdca7de6c70",
      "parentUUID": "c7dd15f6-e338-4a04-b460-e7c5cd84cb6c",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}